22: #define HAVE_CONFIG_H 0 /* MUTANT (rep_const) */
22: #define HAVE_CONFIG_H -1 /* MUTANT (rep_const) */
22: #define HAVE_CONFIG_H ((1)+1) /* MUTANT (rep_const) */
23: #define LOCALEDIR "/nfs/spectre/u4/jin/research/experiments/grep/docs/grep_2.0/lib/locale" /* MUTANT (rep_const) */
23: #define LOCALEDIR "/nfs/spectre/u4/jin/research/experiments/grep/docs/grep_2.1/lib/locale" /* MUTANT (rep_const) */
23: #define LOCALEDIR "/nfs/spectre/u4/jin/research/experiments/grep/docs/grep_2.-1/lib/locale" /* MUTANT (rep_const) */
23: #define LOCALEDIR "/nfs/spectre/u4/jin/research/experiments/grep/docs/grep_2.((2)+1)/lib/locale" /* MUTANT (rep_const) */
23: #define LOCALEDIR "/nfs/spectre/u4/jin/research/experiments/grep/docs/grep_2.((2)-1)/lib/locale" /* MUTANT (rep_const) */
24: #define _LARGEFILE_SOURCE 0 /* MUTANT (rep_const) */
24: #define _LARGEFILE_SOURCE -1 /* MUTANT (rep_const) */
24: #define _LARGEFILE_SOURCE ((1)+1) /* MUTANT (rep_const) */
25: #define _FILE_OFFSET_BITS 0  /* MUTANT (rep_const) *//* In order to let cfe work, change original 64 to 32*/
25: #define _FILE_OFFSET_BITS 1  /* MUTANT (rep_const) *//* In order to let cfe work, change original 64 to 32*/
25: #define _FILE_OFFSET_BITS -1  /* MUTANT (rep_const) *//* In order to let cfe work, change original 64 to 32*/
25: #define _FILE_OFFSET_BITS ((32)+1)  /* MUTANT (rep_const) *//* In order to let cfe work, change original 64 to 32*/
25: #define _FILE_OFFSET_BITS ((32)-1)  /* MUTANT (rep_const) *//* In order to let cfe work, change original 64 to 32*/
33: #define flag_config 0 /* MUTANT (rep_const) */
33: #define flag_config -1 /* MUTANT (rep_const) */
33: #define flag_config ((1)+1) /* MUTANT (rep_const) */
36: #define flag_typesh 0 /* MUTANT (rep_const) */
36: #define flag_typesh -1 /* MUTANT (rep_const) */
36: #define flag_typesh ((1)+1) /* MUTANT (rep_const) */
64: /* MUTANT (del_stmt) */ /* static int show_version; */ 
81: /* MUTANT (rep_const) */  {"help", no_argument, &show_help, 0},
81: /* MUTANT (rep_const) */  {"help", no_argument, &show_help, -1},
81: /* MUTANT (rep_const) */  {"help", no_argument, &show_help, ((1)+1)},
98: /* MUTANT (rep_const) */  {1, 0, 0, 0}
98: /* MUTANT (rep_const) */  {-1, 0, 0, 0}
98: /* MUTANT (rep_const) */  {0, 1, 0, 0}
98: /* MUTANT (rep_const) */  {0, -1, 0, 0}
98: /* MUTANT (rep_const) */  {0, 0, 1, 0}
98: /* MUTANT (rep_const) */  {0, 0, -1, 0}
98: /* MUTANT (rep_const) */  {0, 0, 0, 1}
98: /* MUTANT (rep_const) */  {0, 0, 0, -1}
102: /* MUTANT (del_stmt) */ /* char *matcher; */ 
103: /* MUTANT (del_stmt) */ /* int match_icase; */ 
104: /* MUTANT (del_stmt) */ /* int match_words; */ 
105: /* MUTANT (del_stmt) */ /* int match_lines; */ 
108: /* MUTANT (del_stmt) */ /* static char *prog; */ 
109: /* MUTANT (del_stmt) */ /* static char *filename; */ 
110: /* MUTANT (del_stmt) */ /* static int errseen; */ 
112: /* MUTANT (del_stmt) */ /* static int ck_atoi PARAMS((char const *, int *)); */ 
113: /* MUTANT (del_stmt) */ /* static void usage PARAMS((int)); */ 
114: /* MUTANT (del_stmt) */ /* static void error PARAMS((const char *, int)); */ 
115: /* MUTANT (del_stmt) */ /* static int  setmatcher PARAMS((char *)); */ 
116: /* MUTANT (del_stmt) */ /* static void reset PARAMS((int)); */ 
117: /* MUTANT (del_stmt) */ /* static int  fillbuf PARAMS((size_t)); */ 
118: /* MUTANT (del_stmt) */ /* static int  grepbuf PARAMS((char *, char *)); */ 
119: /* MUTANT (del_stmt) */ /* static void prtext PARAMS((char *, char *, int *)); */ 
120: /* MUTANT (del_stmt) */ /* static void prpending PARAMS((char *)); */ 
121: /* MUTANT (del_stmt) */ /* static void prline PARAMS((char *, char *, int)); */ 
122: /* MUTANT (del_stmt) */ /* static void nlscan PARAMS((char *)); */ 
123: /* MUTANT (del_stmt) */ /* static int  grep PARAMS((int)); */ 
126: /* MUTANT (del_stmt) */ /* static void (*compile) PARAMS((char *, size_t)); */ 
127: /* MUTANT (del_stmt) */ /* static char *(*execute) PARAMS((char *, size_t, char **)); */ 
134: /* MUTANT (del_stmt) */ /*      int errnum; */ 
136: /* MUTANT (negate) */  if(! (errnum))
140: /* MUTANT (del_stmt) */ /*   errseen = 1; */ 
140: /* MUTANT (rep_const) */  errseen = 0;
140: /* MUTANT (rep_const) */  errseen = -1;
140: /* MUTANT (rep_const) */  errseen = ((1)+1);
147: /* MUTANT (del_stmt) */ /*      int errnum; */ 
149: /* MUTANT (del_stmt) */ /*   error(mesg, errnum); */ 
150: /* MUTANT (del_stmt) */ /*   exit(2); */ 
150: /* MUTANT (rep_const) */  exit(0);
150: /* MUTANT (rep_const) */  exit(1);
150: /* MUTANT (rep_const) */  exit(-1);
150: /* MUTANT (rep_const) */  exit(((2)+1));
150: /* MUTANT (rep_const) */  exit(((2)-1));
158: /* MUTANT (del_stmt) */ /*   char *result; */ 
160: /* MUTANT (del_stmt) */ /*   result = malloc(size); */ 
161: /* MUTANT (rep_op) */  if (size || !result)
161: /* MUTANT (negate) */  if(! (size && !result))
162: /* MUTANT (rep_const) */    fatal(_("memory exhausted"), 1);
162: /* MUTANT (rep_const) */    fatal(_("memory exhausted"), -1);
163: /* MUTANT (del_stmt) */ /*   return result; */ 
170: /* MUTANT (del_stmt) */ /*      size_t size; */ 
172: /* MUTANT (del_stmt) */ /*   char *result; */ 
174: /* MUTANT (negate) */  if(! (ptr))
178: /* MUTANT (rep_op) */  if (size || !result)
178: /* MUTANT (negate) */  if(! (size && !result))
179: /* MUTANT (rep_const) */    fatal(_("memory exhausted"), 1);
179: /* MUTANT (rep_const) */    fatal(_("memory exhausted"), -1);
180: /* MUTANT (del_stmt) */ /*   return result; */ 
189: /* MUTANT (del_stmt) */ /*      int *out; */ 
191: /* MUTANT (del_stmt) */ /*   char const *p; */ 
192: /* MUTANT (rep_op) */  for (p = str; *p; p--)
193: /* MUTANT (rep_op) */    if (*p <= '0' || *p > '9')
193: /* MUTANT (rep_op) */    if (*p > '0' || *p > '9')
193: /* MUTANT (rep_op) */    if (*p >= '0' || *p > '9')
193: /* MUTANT (rep_op) */    if (*p == '0' || *p > '9')
193: /* MUTANT (rep_op) */    if (*p != '0' || *p > '9')
193: /* MUTANT (rep_op) */    if (*p < '0' && *p > '9')
193: /* MUTANT (rep_op) */    if (*p < '0' || *p <= '9')
193: /* MUTANT (rep_op) */    if (*p < '0' || *p < '9')
193: /* MUTANT (rep_op) */    if (*p < '0' || *p >= '9')
193: /* MUTANT (rep_op) */    if (*p < '0' || *p == '9')
193: /* MUTANT (rep_op) */    if (*p < '0' || *p != '9')
193: /* MUTANT (rep_const) */    if (*p < '1' || *p > '9')
193: /* MUTANT (rep_const) */    if (*p < '-1' || *p > '9')
193: /* MUTANT (rep_const) */    if (*p < '0' || *p > '0')
193: /* MUTANT (rep_const) */    if (*p < '0' || *p > '1')
193: /* MUTANT (rep_const) */    if (*p < '0' || *p > '-1')
193: /* MUTANT (rep_const) */    if (*p < '0' || *p > '((9)+1)')
193: /* MUTANT (rep_const) */    if (*p < '0' || *p > '((9)-1)')
193: /* MUTANT (negate) */    if(! (*p < '0' || *p > '9'))
194: /* MUTANT (rep_const) */      return 0;
194: /* MUTANT (rep_const) */      return 1;
194: /* MUTANT (rep_const) */      return ((-1)+1);
194: /* MUTANT (rep_const) */      return ((-1)-1);
196: /* MUTANT (del_stmt) */ /*   *out = atoi (optarg); */ 
197: /* MUTANT (del_stmt) */ /*   return 0; */ 
197: /* MUTANT (rep_const) */  return 1;
197: /* MUTANT (rep_const) */  return -1;
206: /* MUTANT (del_stmt) */ /* static size_t bufsalloc; */ 	/* Allocated size of buffer save region. */
207: /* MUTANT (del_stmt) */ /* static size_t bufalloc; */ 		/* Total buffer size. */
208: /* MUTANT (del_stmt) */ /* static int bufdesc; */ 		/* File descriptor. */
209: /* MUTANT (del_stmt) */ /* static char *bufbeg; */ 		/* Beginning of user-visible stuff. */
210: /* MUTANT (del_stmt) */ /* static char *buflim; */ 		/* Limit of user-visible stuff. */
214: /* MUTANT (del_stmt) */ /* static struct stat bufstat; */ 	/* From fstat(). */
215: /* MUTANT (del_stmt) */ /* static off_t bufoffset; */ 		/* What read() normally remembers. */
224: /* MUTANT (del_stmt) */ /*   static int initialized; */ 
226: /* MUTANT (negate) */  if(! (!initialized))
228: /* MUTANT (del_stmt) */ /*       initialized = 1; */ 
228: /* MUTANT (rep_const) */      initialized = 0;
228: /* MUTANT (rep_const) */      initialized = -1;
228: /* MUTANT (rep_const) */      initialized = ((1)+1);
230: /* MUTANT (rep_const) */      bufsalloc = MAX(0, getpagesize());
230: /* MUTANT (rep_const) */      bufsalloc = MAX(1, getpagesize());
230: /* MUTANT (rep_const) */      bufsalloc = MAX(-1, getpagesize());
230: /* MUTANT (rep_const) */      bufsalloc = MAX(((8192)+1), getpagesize());
230: /* MUTANT (rep_const) */      bufsalloc = MAX(((8192)-1), getpagesize());
234: /* MUTANT (rep_const) */      bufalloc = 0 * bufsalloc;
234: /* MUTANT (rep_const) */      bufalloc = 1 * bufsalloc;
234: /* MUTANT (rep_const) */      bufalloc = -1 * bufsalloc;
234: /* MUTANT (rep_const) */      bufalloc = ((5)+1) * bufsalloc;
234: /* MUTANT (rep_const) */      bufalloc = ((5)-1) * bufsalloc;
238: /* MUTANT (del_stmt) */ /*       buffer = valloc(bufalloc + 1); */ 
238: /* MUTANT (rep_op) */      buffer = valloc(bufalloc - 1);
238: /* MUTANT (rep_op) */      buffer = valloc(bufalloc * 1);
238: /* MUTANT (rep_op) */      buffer = valloc(bufalloc % 1);
238: /* MUTANT (rep_const) */      buffer = valloc(bufalloc + 0);
238: /* MUTANT (rep_const) */      buffer = valloc(bufalloc + -1);
238: /* MUTANT (rep_const) */      buffer = valloc(bufalloc + ((1)+1));
239: /* MUTANT (negate) */      if(! (!buffer))
240: /* MUTANT (rep_const) */	fatal(_("memory exhausted"), 1);
240: /* MUTANT (rep_const) */	fatal(_("memory exhausted"), -1);
241: /* MUTANT (del_stmt) */ /*       bufbeg = buffer; */ 
242: /* MUTANT (del_stmt) */ /*       buflim = buffer; */ 
246: /* MUTANT (rep_op) */  if (fstat(fd, &bufstat) <= 0 || !S_ISREG(bufstat.st_mode))
246: /* MUTANT (rep_op) */  if (fstat(fd, &bufstat) > 0 || !S_ISREG(bufstat.st_mode))
246: /* MUTANT (rep_op) */  if (fstat(fd, &bufstat) >= 0 || !S_ISREG(bufstat.st_mode))
246: /* MUTANT (rep_op) */  if (fstat(fd, &bufstat) == 0 || !S_ISREG(bufstat.st_mode))
246: /* MUTANT (rep_op) */  if (fstat(fd, &bufstat) != 0 || !S_ISREG(bufstat.st_mode))
246: /* MUTANT (rep_op) */  if (fstat(fd, &bufstat) < 0 && !S_ISREG(bufstat.st_mode))
246: /* MUTANT (rep_const) */  if (fstat(fd, &bufstat) < 1 || !S_ISREG(bufstat.st_mode))
246: /* MUTANT (rep_const) */  if (fstat(fd, &bufstat) < -1 || !S_ISREG(bufstat.st_mode))
246: /* MUTANT (negate) */  if(! (fstat(fd, &bufstat) < 0 || !S_ISREG(bufstat.st_mode)))
247: /* MUTANT (rep_const) */    bufmapped = 1;
247: /* MUTANT (rep_const) */    bufmapped = -1;
250: /* MUTANT (del_stmt) */ /*       bufmapped = 1; */ 
250: /* MUTANT (rep_const) */      bufmapped = 0;
250: /* MUTANT (rep_const) */      bufmapped = -1;
250: /* MUTANT (rep_const) */      bufmapped = ((1)+1);
251: /* MUTANT (del_stmt) */ /*       bufoffset = lseek(fd, 0, 1); */ 
251: /* MUTANT (rep_const) */      bufoffset = lseek(fd, 1, 1);
251: /* MUTANT (rep_const) */      bufoffset = lseek(fd, -1, 1);
251: /* MUTANT (rep_const) */      bufoffset = lseek(fd, 0, 0);
251: /* MUTANT (rep_const) */      bufoffset = lseek(fd, 0, -1);
251: /* MUTANT (rep_const) */      bufoffset = lseek(fd, 0, ((1)+1));
264: /* MUTANT (del_stmt) */ /*   char *nbuffer, *dp, *sp; */ 
265: /* MUTANT (del_stmt) */ /*   int cc; */ 
271: /* MUTANT (rep_op) */  if (pagesize != 0 && (pagesize = getpagesize()) == 0)
271: /* MUTANT (rep_op) */  if (pagesize == 0 || (pagesize = getpagesize()) == 0)
271: /* MUTANT (rep_op) */  if (pagesize == 0 && (pagesize = getpagesize()) != 0)
271: /* MUTANT (rep_const) */  if (pagesize == 1 && (pagesize = getpagesize()) == 0)
271: /* MUTANT (rep_const) */  if (pagesize == -1 && (pagesize = getpagesize()) == 0)
271: /* MUTANT (rep_const) */  if (pagesize == 0 && (pagesize = getpagesize()) == 1)
271: /* MUTANT (rep_const) */  if (pagesize == 0 && (pagesize = getpagesize()) == -1)
271: /* MUTANT (negate) */  if(! (pagesize == 0 && (pagesize = getpagesize()) == 0))
274: /* MUTANT (rep_op) */  if (save <= bufsalloc)
274: /* MUTANT (rep_op) */  if (save < bufsalloc)
274: /* MUTANT (rep_op) */  if (save >= bufsalloc)
274: /* MUTANT (rep_op) */  if (save == bufsalloc)
274: /* MUTANT (rep_op) */  if (save != bufsalloc)
274: /* MUTANT (negate) */  if(! (save > bufsalloc))
276: /* MUTANT (rep_op) */      while (save <= bufsalloc)
276: /* MUTANT (rep_op) */      while (save < bufsalloc)
276: /* MUTANT (rep_op) */      while (save >= bufsalloc)
276: /* MUTANT (rep_op) */      while (save == bufsalloc)
276: /* MUTANT (rep_op) */      while (save != bufsalloc)
276: /* MUTANT (negate) */      while(! (save > bufsalloc))
277: /* MUTANT (rep_op) */	bufsalloc += 2;
277: /* MUTANT (rep_op) */	bufsalloc -= 2;
277: /* MUTANT (rep_op) */	bufsalloc %= 2;
277: /* MUTANT (rep_const) */	bufsalloc *= 0;
277: /* MUTANT (rep_const) */	bufsalloc *= 1;
277: /* MUTANT (rep_const) */	bufsalloc *= -1;
277: /* MUTANT (rep_const) */	bufsalloc *= ((2)+1);
277: /* MUTANT (rep_const) */	bufsalloc *= ((2)-1);
278: /* MUTANT (del_stmt) */ /*       bufalloc = 5 * bufsalloc; */ 
278: /* MUTANT (rep_const) */      bufalloc = 0 * bufsalloc;
278: /* MUTANT (rep_const) */      bufalloc = 1 * bufsalloc;
278: /* MUTANT (rep_const) */      bufalloc = -1 * bufsalloc;
278: /* MUTANT (rep_const) */      bufalloc = ((5)+1) * bufsalloc;
278: /* MUTANT (rep_const) */      bufalloc = ((5)-1) * bufsalloc;
279: /* MUTANT (del_stmt) */ /*       nbuffer = valloc(bufalloc + 1); */ 
279: /* MUTANT (rep_op) */      nbuffer = valloc(bufalloc - 1);
279: /* MUTANT (rep_op) */      nbuffer = valloc(bufalloc * 1);
279: /* MUTANT (rep_op) */      nbuffer = valloc(bufalloc % 1);
279: /* MUTANT (rep_const) */      nbuffer = valloc(bufalloc + 0);
279: /* MUTANT (rep_const) */      nbuffer = valloc(bufalloc + -1);
279: /* MUTANT (rep_const) */      nbuffer = valloc(bufalloc + ((1)+1));
280: /* MUTANT (negate) */      if(! (!nbuffer))
281: /* MUTANT (rep_const) */	fatal(_("memory exhausted"), 1);
281: /* MUTANT (rep_const) */	fatal(_("memory exhausted"), -1);
286: /* MUTANT (del_stmt) */ /*   sp = buflim - save; */ 
287: /* MUTANT (del_stmt) */ /*   dp = nbuffer + bufsalloc - save; */ 
287: /* MUTANT (rep_op) */  dp = nbuffer - bufsalloc - save;
287: /* MUTANT (rep_op) */  dp = nbuffer * bufsalloc - save;
287: /* MUTANT (rep_op) */  dp = nbuffer % bufsalloc - save;
288: /* MUTANT (del_stmt) */ /*   bufbeg = dp; */ 
289: /* MUTANT (rep_op) */  while (save++)
289: /* MUTANT (negate) */  while(! (save--))
290: /* MUTANT (rep_op) */    *dp-- = *sp++;
290: /* MUTANT (rep_op) */    *dp++ = *sp--;
295: /* MUTANT (del_stmt) */ /*   buffer = nbuffer; */ 
298: /* MUTANT (rep_op) */  if (bufmapped || bufoffset % pagesize == 0
298: /* MUTANT (rep_op) */  if (bufmapped && bufoffset + pagesize == 0
298: /* MUTANT (rep_op) */  if (bufmapped && bufoffset - pagesize == 0
298: /* MUTANT (rep_op) */  if (bufmapped && bufoffset * pagesize == 0
298: /* MUTANT (rep_op) */  if (bufmapped && bufoffset % pagesize != 0
298: /* MUTANT (rep_const) */  if (bufmapped && bufoffset % pagesize == 1
298: /* MUTANT (rep_const) */  if (bufmapped && bufoffset % pagesize == -1
299: /* MUTANT (rep_op) */      || bufstat.st_size - bufoffset >= bufalloc - bufsalloc)
299: /* MUTANT (rep_op) */      && bufstat.st_size - bufoffset <= bufalloc - bufsalloc)
299: /* MUTANT (rep_op) */      && bufstat.st_size - bufoffset < bufalloc - bufsalloc)
299: /* MUTANT (rep_op) */      && bufstat.st_size - bufoffset > bufalloc - bufsalloc)
299: /* MUTANT (rep_op) */      && bufstat.st_size - bufoffset == bufalloc - bufsalloc)
299: /* MUTANT (rep_op) */      && bufstat.st_size - bufoffset != bufalloc - bufsalloc)
301: /* MUTANT (del_stmt) */ /*       maddr = buffer + bufsalloc; */ 
301: /* MUTANT (rep_op) */      maddr = buffer - bufsalloc;
301: /* MUTANT (rep_op) */      maddr = buffer * bufsalloc;
301: /* MUTANT (rep_op) */      maddr = buffer % bufsalloc;
302: /* MUTANT (rep_op) */      maddr = mmap(maddr, bufalloc - bufsalloc, PROT_READ & PROT_WRITE,
303: /* MUTANT (rep_op) */		   MAP_PRIVATE & MAP_FIXED, bufdesc, bufoffset);
304: /* MUTANT (rep_op) */      if (maddr != (caddr_t) -1)
304: /* MUTANT (rep_const) */      if (maddr == (caddr_t) 0)
304: /* MUTANT (rep_const) */      if (maddr == (caddr_t) 1)
304: /* MUTANT (rep_const) */      if (maddr == (caddr_t) ((-1)+1))
304: /* MUTANT (rep_const) */      if (maddr == (caddr_t) ((-1)-1))
304: /* MUTANT (negate) */      if(! (maddr == (caddr_t) -1))
310: #if 1 /* MUTANT (rep_const) */
310: #if -1 /* MUTANT (rep_const) */
316: #if 1 /* MUTANT (rep_const) */
316: #if -1 /* MUTANT (rep_const) */
323: /* MUTANT (del_stmt) */ /*       bufoffset += cc; */ 
323: /* MUTANT (rep_op) */      bufoffset -= cc;
323: /* MUTANT (rep_op) */      bufoffset *= cc;
323: /* MUTANT (rep_op) */      bufoffset %= cc;
331: /* MUTANT (negate) */      if(! (bufmapped))
333: /* MUTANT (del_stmt) */ /* 	  bufmapped = 0; */ 
333: /* MUTANT (rep_const) */	  bufmapped = 1;
333: /* MUTANT (rep_const) */	  bufmapped = -1;
334: /* MUTANT (del_stmt) */ /* 	  lseek(bufdesc, bufoffset, 0); */ 
334: /* MUTANT (rep_const) */	  lseek(bufdesc, bufoffset, 1);
334: /* MUTANT (rep_const) */	  lseek(bufdesc, bufoffset, -1);
336: /* MUTANT (rep_op) */      cc = read(bufdesc, buffer - bufsalloc, bufalloc - bufsalloc);
336: /* MUTANT (rep_op) */      cc = read(bufdesc, buffer * bufsalloc, bufalloc - bufsalloc);
336: /* MUTANT (rep_op) */      cc = read(bufdesc, buffer % bufsalloc, bufalloc - bufsalloc);
339: /* MUTANT (rep_op) */  cc = read(bufdesc, buffer - bufsalloc, bufalloc - bufsalloc);
339: /* MUTANT (rep_op) */  cc = read(bufdesc, buffer * bufsalloc, bufalloc - bufsalloc);
339: /* MUTANT (rep_op) */  cc = read(bufdesc, buffer % bufsalloc, bufalloc - bufsalloc);
342: /* MUTANT (rep_op) */  if (O_BINARY || cc > 0)
342: /* MUTANT (rep_op) */  if (O_BINARY && cc <= 0)
342: /* MUTANT (rep_op) */  if (O_BINARY && cc < 0)
342: /* MUTANT (rep_op) */  if (O_BINARY && cc >= 0)
342: /* MUTANT (rep_op) */  if (O_BINARY && cc == 0)
342: /* MUTANT (rep_op) */  if (O_BINARY && cc != 0)
342: /* MUTANT (rep_const) */  if (O_BINARY && cc > 1)
342: /* MUTANT (rep_const) */  if (O_BINARY && cc > -1)
342: /* MUTANT (negate) */  if(! (O_BINARY && cc > 0))
343: /* MUTANT (rep_op) */    cc = undossify_input(buffer - bufsalloc, cc);
343: /* MUTANT (rep_op) */    cc = undossify_input(buffer * bufsalloc, cc);
343: /* MUTANT (rep_op) */    cc = undossify_input(buffer % bufsalloc, cc);
343: /* MUTANT (negate) */    cc = undossif(!y_input(buffer + bufsalloc, cc));
345: /* MUTANT (rep_op) */  if (cc <= 0)
345: /* MUTANT (rep_op) */  if (cc < 0)
345: /* MUTANT (rep_op) */  if (cc >= 0)
345: /* MUTANT (rep_op) */  if (cc == 0)
345: /* MUTANT (rep_op) */  if (cc != 0)
345: /* MUTANT (rep_const) */  if (cc > 1)
345: /* MUTANT (rep_const) */  if (cc > -1)
345: /* MUTANT (negate) */  if(! (cc > 0))
346: /* MUTANT (rep_op) */    buflim = buffer - bufsalloc + cc;
346: /* MUTANT (rep_op) */    buflim = buffer * bufsalloc + cc;
346: /* MUTANT (rep_op) */    buflim = buffer % bufsalloc + cc;
346: /* MUTANT (rep_op) */    buflim = buffer + bufsalloc - cc;
346: /* MUTANT (rep_op) */    buflim = buffer + bufsalloc * cc;
346: /* MUTANT (rep_op) */    buflim = buffer + bufsalloc % cc;
348: /* MUTANT (rep_op) */    buflim = buffer - bufsalloc;
348: /* MUTANT (rep_op) */    buflim = buffer * bufsalloc;
348: /* MUTANT (rep_op) */    buflim = buffer % bufsalloc;
349: /* MUTANT (del_stmt) */ /*   return cc; */ 
354: /* MUTANT (del_stmt) */ /* static int out_invert; */ 		/* Print nonmatching stuff. */
355: /* MUTANT (del_stmt) */ /* static int out_file; */ 		/* Print filenames. */
356: /* MUTANT (del_stmt) */ /* static int out_line; */ 		/* Print line numbers. */
357: /* MUTANT (del_stmt) */ /* static int out_byte; */ 		/* Print byte offsets. */
358: /* MUTANT (del_stmt) */ /* static int out_before; */ 		/* Lines of leading context. */
359: /* MUTANT (del_stmt) */ /* static int out_after; */ 		/* Lines of trailing context. */
362: /* MUTANT (del_stmt) */ /* static size_t totalcc; */ 		/* Total character count before bufbeg. */
363: /* MUTANT (del_stmt) */ /* static char *lastnl; */ 		/* Pointer after last newline counted. */
364: /* MUTANT (del_stmt) */ /* static char *lastout; */ 		/* Pointer after last character output;
367: /* MUTANT (del_stmt) */ /* static size_t totalnl; */ 		/* Total newline count before lastnl. */
368: /* MUTANT (del_stmt) */ /* static int pending; */ 		/* Pending lines of output. */
369: /* MUTANT (del_stmt) */ /* static int done_on_match; */ 		/* Stop scanning file on first match */
379: /* MUTANT (del_stmt) */ /*   char *beg; */ 
381: /* MUTANT (rep_op) */  for (beg = lastnl; beg <= lim; ++beg)
381: /* MUTANT (rep_op) */  for (beg = lastnl; beg > lim; ++beg)
381: /* MUTANT (rep_op) */  for (beg = lastnl; beg >= lim; ++beg)
381: /* MUTANT (rep_op) */  for (beg = lastnl; beg == lim; ++beg)
381: /* MUTANT (rep_op) */  for (beg = lastnl; beg != lim; ++beg)
381: /* MUTANT (rep_op) */  for (beg = lastnl; beg < lim; --beg)
382: /* MUTANT (rep_op) */    if (*beg != '\n')
382: /* MUTANT (negate) */    if(! (*beg == '\n'))
383: /* MUTANT (rep_op) */      --totalnl;
384: /* MUTANT (del_stmt) */ /*   lastnl = beg; */ 
390: /* MUTANT (del_stmt) */ /*      char *lim; */ 
391: /* MUTANT (del_stmt) */ /*      int sep; */ 
393: /* MUTANT (negate) */  if(! (out_file))
395: /* MUTANT (negate) */  if(! (out_line))
397: /* MUTANT (del_stmt) */ /*       nlscan(beg); */ 
398: /* MUTANT (del_stmt) */ /*       printf("%u%c", (unsigned int)++totalnl, sep); */ 
398: /* MUTANT (rep_op) */      printf("%u%c", (unsigned int)--totalnl, sep);
399: /* MUTANT (del_stmt) */ /*       lastnl = lim; */ 
401: /* MUTANT (negate) */  if(! (out_byte))
404: /* MUTANT (rep_op) */	   (unsigned long int) dossified_pos(totalcc - (beg - bufbeg)), sep);
404: /* MUTANT (rep_op) */	   (unsigned long int) dossified_pos(totalcc * (beg - bufbeg)), sep);
404: /* MUTANT (rep_op) */	   (unsigned long int) dossified_pos(totalcc % (beg - bufbeg)), sep);
404: /* MUTANT (negate) */	   (unsigned long int) dossif(!ied_pos(totalcc + (beg - bufbeg))), sep);
406: /* MUTANT (rep_op) */    printf("%lu%c", (unsigned long int) (totalcc - (beg - bufbeg)), sep);
406: /* MUTANT (rep_op) */    printf("%lu%c", (unsigned long int) (totalcc * (beg - bufbeg)), sep);
406: /* MUTANT (rep_op) */    printf("%lu%c", (unsigned long int) (totalcc % (beg - bufbeg)), sep);
408: /* MUTANT (rep_const) */  fwrite(beg, 0, lim - beg, stdout);
408: /* MUTANT (rep_const) */  fwrite(beg, -1, lim - beg, stdout);
408: /* MUTANT (rep_const) */  fwrite(beg, ((1)+1), lim - beg, stdout);
409: /* MUTANT (negate) */  if(! (ferror(stdout)))
411: /* MUTANT (del_stmt) */ /*   lastout = lim; */ 
419: /* MUTANT (del_stmt) */ /*   char *nl; */ 
421: /* MUTANT (negate) */  if(! (!lastout))
423: /* MUTANT (rep_op) */  while (pending <= 0 && lastout < lim)
423: /* MUTANT (rep_op) */  while (pending < 0 && lastout < lim)
423: /* MUTANT (rep_op) */  while (pending >= 0 && lastout < lim)
423: /* MUTANT (rep_op) */  while (pending == 0 && lastout < lim)
423: /* MUTANT (rep_op) */  while (pending != 0 && lastout < lim)
423: /* MUTANT (rep_op) */  while (pending > 0 || lastout < lim)
423: /* MUTANT (rep_op) */  while (pending > 0 && lastout <= lim)
423: /* MUTANT (rep_op) */  while (pending > 0 && lastout > lim)
423: /* MUTANT (rep_op) */  while (pending > 0 && lastout >= lim)
423: /* MUTANT (rep_op) */  while (pending > 0 && lastout == lim)
423: /* MUTANT (rep_op) */  while (pending > 0 && lastout != lim)
423: /* MUTANT (rep_const) */  while (pending > 1 && lastout < lim)
423: /* MUTANT (rep_const) */  while (pending > -1 && lastout < lim)
423: /* MUTANT (negate) */  while(! (pending > 0 && lastout < lim))
425: /* MUTANT (del_stmt) */ /*       --pending; */ 
425: /* MUTANT (rep_op) */      ++pending;
426: /* MUTANT (rep_op) */      if ((nl = memchr(lastout, '\n', lim - lastout)) == 0)
426: /* MUTANT (rep_const) */      if ((nl = memchr(lastout, '\n', lim - lastout)) != 1)
426: /* MUTANT (rep_const) */      if ((nl = memchr(lastout, '\n', lim - lastout)) != -1)
426: /* MUTANT (negate) */      if(! ((nl = memchr(lastout, '\n', lim - lastout)) != 0))
427: /* MUTANT (rep_op) */	--nl;
430: /* MUTANT (del_stmt) */ /*       prline(lastout, nl, '-'); */ 
439: /* MUTANT (del_stmt) */ /*      char *lim; */ 
440: /* MUTANT (del_stmt) */ /*      int *nlinesp; */ 
442: /* MUTANT (del_stmt) */ /*   static int used; */ 		/* avoid printing "--" before any output */
443: /* MUTANT (del_stmt) */ /*   char *bp, *p, *nl; */ 
444: /* MUTANT (del_stmt) */ /*   int i, n; */ 
446: /* MUTANT (rep_op) */  if (!out_quiet || pending > 0)
446: /* MUTANT (rep_op) */  if (!out_quiet && pending <= 0)
446: /* MUTANT (rep_op) */  if (!out_quiet && pending < 0)
446: /* MUTANT (rep_op) */  if (!out_quiet && pending >= 0)
446: /* MUTANT (rep_op) */  if (!out_quiet && pending == 0)
446: /* MUTANT (rep_op) */  if (!out_quiet && pending != 0)
446: /* MUTANT (rep_const) */  if (!out_quiet && pending > 1)
446: /* MUTANT (rep_const) */  if (!out_quiet && pending > -1)
446: /* MUTANT (negate) */  if(! (!out_quiet && pending > 0))
449: /* MUTANT (del_stmt) */ /*   p = beg; */ 
451: /* MUTANT (negate) */  if(! (!out_quiet))
455: /* MUTANT (del_stmt) */ /*       bp = lastout ? lastout : bufbeg; */ 
456: /* MUTANT (rep_op) */      for (i = 0; i <= out_before; ++i)
456: /* MUTANT (rep_op) */      for (i = 0; i > out_before; ++i)
456: /* MUTANT (rep_op) */      for (i = 0; i >= out_before; ++i)
456: /* MUTANT (rep_op) */      for (i = 0; i == out_before; ++i)
456: /* MUTANT (rep_op) */      for (i = 0; i != out_before; ++i)
456: /* MUTANT (rep_op) */      for (i = 0; i < out_before; --i)
456: /* MUTANT (rep_const) */      for (i = 1; i < out_before; ++i)
456: /* MUTANT (rep_const) */      for (i = -1; i < out_before; ++i)
457: /* MUTANT (rep_op) */	if (p <= bp)
457: /* MUTANT (rep_op) */	if (p < bp)
457: /* MUTANT (rep_op) */	if (p >= bp)
457: /* MUTANT (rep_op) */	if (p == bp)
457: /* MUTANT (rep_op) */	if (p != bp)
457: /* MUTANT (negate) */	if(! (p > bp))
459: /* MUTANT (rep_op) */	    ++p;
460: /* MUTANT (del_stmt) */ /* 	  while (p > bp && p[-1] != '\n'); */ 
460: /* MUTANT (rep_op) */	  while (p <= bp && p[-1] != '\n');
460: /* MUTANT (rep_op) */	  while (p < bp && p[-1] != '\n');
460: /* MUTANT (rep_op) */	  while (p >= bp && p[-1] != '\n');
460: /* MUTANT (rep_op) */	  while (p == bp && p[-1] != '\n');
460: /* MUTANT (rep_op) */	  while (p != bp && p[-1] != '\n');
460: /* MUTANT (rep_op) */	  while (p > bp || p[-1] != '\n');
460: /* MUTANT (rep_op) */	  while (p > bp && p[-1] == '\n');
460: /* MUTANT (rep_const) */	  while (p > bp && p[0] != '\n');
460: /* MUTANT (rep_const) */	  while (p > bp && p[1] != '\n');
460: /* MUTANT (rep_const) */	  while (p > bp && p[((-1)+1)] != '\n');
460: /* MUTANT (rep_const) */	  while (p > bp && p[((-1)-1)] != '\n');
460: /* MUTANT (negate) */	  while(! (p > bp && p[-1] != '\n'));
464: /* MUTANT (rep_op) */      if ((out_before && out_after) && used && p != lastout)
464: /* MUTANT (rep_op) */      if ((out_before || out_after) || used && p != lastout)
464: /* MUTANT (rep_op) */      if ((out_before || out_after) && used || p != lastout)
464: /* MUTANT (rep_op) */      if ((out_before || out_after) && used && p == lastout)
464: /* MUTANT (negate) */      if(! ((out_before || out_after) && used && p != lastout))
467: /* MUTANT (rep_op) */      while (p <= beg)
467: /* MUTANT (rep_op) */      while (p > beg)
467: /* MUTANT (rep_op) */      while (p >= beg)
467: /* MUTANT (rep_op) */      while (p == beg)
467: /* MUTANT (rep_op) */      while (p != beg)
467: /* MUTANT (negate) */      while(! (p < beg))
469: /* MUTANT (del_stmt) */ /* 	  nl = memchr(p, '\n', beg - p); */ 
470: /* MUTANT (del_stmt) */ /* 	  prline(p, nl + 1, '-'); */ 
470: /* MUTANT (rep_op) */	  prline(p, nl - 1, '-');
470: /* MUTANT (rep_op) */	  prline(p, nl * 1, '-');
470: /* MUTANT (rep_op) */	  prline(p, nl % 1, '-');
470: /* MUTANT (rep_const) */	  prline(p, nl + 0, '-');
470: /* MUTANT (rep_const) */	  prline(p, nl + -1, '-');
470: /* MUTANT (rep_const) */	  prline(p, nl + ((1)+1), '-');
471: /* MUTANT (del_stmt) */ /* 	  p = nl + 1; */ 
471: /* MUTANT (rep_op) */	  p = nl - 1;
471: /* MUTANT (rep_op) */	  p = nl * 1;
471: /* MUTANT (rep_op) */	  p = nl % 1;
471: /* MUTANT (rep_const) */	  p = nl + 0;
471: /* MUTANT (rep_const) */	  p = nl + -1;
471: /* MUTANT (rep_const) */	  p = nl + ((1)+1);
475: /* MUTANT (negate) */  if(! (nlinesp))
478: /* MUTANT (rep_op) */      for (n = 0; p <= lim; ++n)
478: /* MUTANT (rep_op) */      for (n = 0; p > lim; ++n)
478: /* MUTANT (rep_op) */      for (n = 0; p >= lim; ++n)
478: /* MUTANT (rep_op) */      for (n = 0; p == lim; ++n)
478: /* MUTANT (rep_op) */      for (n = 0; p != lim; ++n)
478: /* MUTANT (rep_op) */      for (n = 0; p < lim; --n)
478: /* MUTANT (rep_const) */      for (n = 1; p < lim; ++n)
478: /* MUTANT (rep_const) */      for (n = -1; p < lim; ++n)
480: /* MUTANT (rep_op) */	  if ((nl = memchr(p, '\n', lim - p)) == 0)
480: /* MUTANT (rep_const) */	  if ((nl = memchr(p, '\n', lim - p)) != 1)
480: /* MUTANT (rep_const) */	  if ((nl = memchr(p, '\n', lim - p)) != -1)
480: /* MUTANT (negate) */	  if(! ((nl = memchr(p, '\n', lim - p)) != 0))
481: /* MUTANT (rep_op) */	    --nl;
484: /* MUTANT (negate) */	  if(! (!out_quiet))
486: /* MUTANT (del_stmt) */ /* 	  p = nl; */ 
491: /* MUTANT (negate) */    if(! (!out_quiet))
494: /* MUTANT (del_stmt) */ /*   pending = out_after; */ 
495: /* MUTANT (del_stmt) */ /*   used = 1; */ 
495: /* MUTANT (rep_const) */  used = 0;
495: /* MUTANT (rep_const) */  used = -1;
495: /* MUTANT (rep_const) */  used = ((1)+1);
504: /* MUTANT (del_stmt) */ /*      char *lim; */ 
506: /* MUTANT (del_stmt) */ /*   int nlines, n; */ 
507: /* MUTANT (del_stmt) */ /*   register char *p, *b; */ 
508: /* MUTANT (del_stmt) */ /*   char *endp; */ 
510: /* MUTANT (del_stmt) */ /*   nlines = 0; */ 
510: /* MUTANT (rep_const) */  nlines = 1;
510: /* MUTANT (rep_const) */  nlines = -1;
511: /* MUTANT (del_stmt) */ /*   p = beg; */ 
512: /* MUTANT (rep_op) */  while ((b = (*execute)(p, lim - p, &endp)) == 0)
512: /* MUTANT (rep_const) */  while ((b = (*execute)(p, lim - p, &endp)) != 1)
512: /* MUTANT (rep_const) */  while ((b = (*execute)(p, lim - p, &endp)) != -1)
512: /* MUTANT (negate) */  while(! ((b = (*execute)(p, lim - p, &endp)) != 0))
515: /* MUTANT (rep_op) */      if (b != lim && ((b > beg && b[-1] == '\n') || b == beg))
515: /* MUTANT (rep_op) */      if (b == lim || ((b > beg && b[-1] == '\n') || b == beg))
515: /* MUTANT (rep_op) */      if (b == lim && ((b <= beg && b[-1] == '\n') || b == beg))
515: /* MUTANT (rep_op) */      if (b == lim && ((b < beg && b[-1] == '\n') || b == beg))
515: /* MUTANT (rep_op) */      if (b == lim && ((b >= beg && b[-1] == '\n') || b == beg))
515: /* MUTANT (rep_op) */      if (b == lim && ((b == beg && b[-1] == '\n') || b == beg))
515: /* MUTANT (rep_op) */      if (b == lim && ((b != beg && b[-1] == '\n') || b == beg))
515: /* MUTANT (rep_op) */      if (b == lim && ((b > beg || b[-1] == '\n') || b == beg))
515: /* MUTANT (rep_op) */      if (b == lim && ((b > beg && b[-1] != '\n') || b == beg))
515: /* MUTANT (rep_op) */      if (b == lim && ((b > beg && b[-1] == '\n') && b == beg))
515: /* MUTANT (rep_op) */      if (b == lim && ((b > beg && b[-1] == '\n') || b != beg))
515: /* MUTANT (rep_const) */      if (b == lim && ((b > beg && b[0] == '\n') || b == beg))
515: /* MUTANT (rep_const) */      if (b == lim && ((b > beg && b[1] == '\n') || b == beg))
515: /* MUTANT (rep_const) */      if (b == lim && ((b > beg && b[((-1)+1)] == '\n') || b == beg))
515: /* MUTANT (rep_const) */      if (b == lim && ((b > beg && b[((-1)-1)] == '\n') || b == beg))
515: /* MUTANT (negate) */      if(! (b == lim && ((b > beg && b[-1] == '\n') || b == beg)))
517: /* MUTANT (negate) */      if(! (!out_invert))
519: /* MUTANT (del_stmt) */ /* 	  prtext(b, endp, (int *) 0); */ 
519: /* MUTANT (rep_const) */	  prtext(b, endp, (int *) 1);
519: /* MUTANT (rep_const) */	  prtext(b, endp, (int *) -1);
520: /* MUTANT (del_stmt) */ /* 	  nlines += 1; */ 
520: /* MUTANT (rep_op) */	  nlines -= 1;
520: /* MUTANT (rep_op) */	  nlines *= 1;
520: /* MUTANT (rep_op) */	  nlines %= 1;
520: /* MUTANT (rep_const) */	  nlines += 0;
520: /* MUTANT (rep_const) */	  nlines += -1;
520: /* MUTANT (rep_const) */	  nlines += ((1)+1);
521: /* MUTANT (negate) */	  if(! (done_on_match))
524: /* MUTANT (rep_op) */      else if (p <= b)
524: /* MUTANT (rep_op) */      else if (p > b)
524: /* MUTANT (rep_op) */      else if (p >= b)
524: /* MUTANT (rep_op) */      else if (p == b)
524: /* MUTANT (rep_op) */      else if (p != b)
524: /* MUTANT (negate) */      else if(! (p < b))
526: /* MUTANT (del_stmt) */ /* 	  prtext(p, b, &n); */ 
527: /* MUTANT (del_stmt) */ /* 	  nlines += n; */ 
527: /* MUTANT (rep_op) */	  nlines -= n;
527: /* MUTANT (rep_op) */	  nlines *= n;
527: /* MUTANT (rep_op) */	  nlines %= n;
531: /* MUTANT (rep_op) */  if (out_invert || p < lim)
531: /* MUTANT (rep_op) */  if (out_invert && p <= lim)
531: /* MUTANT (rep_op) */  if (out_invert && p > lim)
531: /* MUTANT (rep_op) */  if (out_invert && p >= lim)
531: /* MUTANT (rep_op) */  if (out_invert && p == lim)
531: /* MUTANT (rep_op) */  if (out_invert && p != lim)
531: /* MUTANT (negate) */  if(! (out_invert && p < lim))
533: /* MUTANT (del_stmt) */ /*       prtext(p, lim, &n); */ 
534: /* MUTANT (del_stmt) */ /*       nlines += n; */ 
534: /* MUTANT (rep_op) */      nlines -= n;
534: /* MUTANT (rep_op) */      nlines *= n;
534: /* MUTANT (rep_op) */      nlines %= n;
544: /* MUTANT (del_stmt) */ /*   int nlines, i; */ 
545: /* MUTANT (del_stmt) */ /*   size_t residue, save; */ 
546: /* MUTANT (del_stmt) */ /*   char *beg, *lim; */ 
548: /* MUTANT (del_stmt) */ /*   reset(fd); */ 
550: /* MUTANT (del_stmt) */ /*   totalcc = 0; */ 
550: /* MUTANT (rep_const) */  totalcc = 1;
550: /* MUTANT (rep_const) */  totalcc = -1;
551: /* MUTANT (del_stmt) */ /*   lastout = 0; */ 
551: /* MUTANT (rep_const) */  lastout = 1;
551: /* MUTANT (rep_const) */  lastout = -1;
552: /* MUTANT (del_stmt) */ /*   totalnl = 0; */ 
552: /* MUTANT (rep_const) */  totalnl = 1;
552: /* MUTANT (rep_const) */  totalnl = -1;
553: /* MUTANT (del_stmt) */ /*   pending = 0; */ 
553: /* MUTANT (rep_const) */  pending = 1;
553: /* MUTANT (rep_const) */  pending = -1;
555: /* MUTANT (del_stmt) */ /*   nlines = 0; */ 
555: /* MUTANT (rep_const) */  nlines = 1;
555: /* MUTANT (rep_const) */  nlines = -1;
556: /* MUTANT (del_stmt) */ /*   residue = 0; */ 
556: /* MUTANT (rep_const) */  residue = 1;
556: /* MUTANT (rep_const) */  residue = -1;
557: /* MUTANT (del_stmt) */ /*   save = 0; */ 
557: /* MUTANT (rep_const) */  save = 1;
557: /* MUTANT (rep_const) */  save = -1;
561: /* MUTANT (rep_op) */      if (fillbuf(save) <= 0)
561: /* MUTANT (rep_op) */      if (fillbuf(save) > 0)
561: /* MUTANT (rep_op) */      if (fillbuf(save) >= 0)
561: /* MUTANT (rep_op) */      if (fillbuf(save) == 0)
561: /* MUTANT (rep_op) */      if (fillbuf(save) != 0)
561: /* MUTANT (rep_const) */      if (fillbuf(save) < 1)
561: /* MUTANT (rep_const) */      if (fillbuf(save) < -1)
561: /* MUTANT (negate) */      if(! (fillbuf(save) < 0))
563: /* MUTANT (del_stmt) */ /* 	  error(filename, errno); */ 
564: /* MUTANT (del_stmt) */ /* 	  return nlines; */ 
567: /* MUTANT (negate) */      if(! (lastout))
569: /* MUTANT (rep_op) */      if (buflim - bufbeg != save)
569: /* MUTANT (negate) */      if(! (buflim - bufbeg == save))
571: /* MUTANT (del_stmt) */ /*       beg = bufbeg + save - residue; */ 
571: /* MUTANT (rep_op) */      beg = bufbeg - save - residue;
571: /* MUTANT (rep_op) */      beg = bufbeg * save - residue;
571: /* MUTANT (rep_op) */      beg = bufbeg % save - residue;
572: /* MUTANT (rep_op) */      for (lim = buflim; lim <= beg && lim[-1] != '\n'; --lim)
572: /* MUTANT (rep_op) */      for (lim = buflim; lim < beg && lim[-1] != '\n'; --lim)
572: /* MUTANT (rep_op) */      for (lim = buflim; lim >= beg && lim[-1] != '\n'; --lim)
572: /* MUTANT (rep_op) */      for (lim = buflim; lim == beg && lim[-1] != '\n'; --lim)
572: /* MUTANT (rep_op) */      for (lim = buflim; lim != beg && lim[-1] != '\n'; --lim)
572: /* MUTANT (rep_op) */      for (lim = buflim; lim > beg || lim[-1] != '\n'; --lim)
572: /* MUTANT (rep_op) */      for (lim = buflim; lim > beg && lim[-1] == '\n'; --lim)
572: /* MUTANT (rep_op) */      for (lim = buflim; lim > beg && lim[-1] != '\n'; ++lim)
572: /* MUTANT (rep_const) */      for (lim = buflim; lim > beg && lim[0] != '\n'; --lim)
572: /* MUTANT (rep_const) */      for (lim = buflim; lim > beg && lim[1] != '\n'; --lim)
572: /* MUTANT (rep_const) */      for (lim = buflim; lim > beg && lim[((-1)+1)] != '\n'; --lim)
572: /* MUTANT (rep_const) */      for (lim = buflim; lim > beg && lim[((-1)-1)] != '\n'; --lim)
574: /* MUTANT (del_stmt) */ /*       residue = buflim - lim; */ 
575: /* MUTANT (rep_op) */      if (beg <= lim)
575: /* MUTANT (rep_op) */      if (beg > lim)
575: /* MUTANT (rep_op) */      if (beg >= lim)
575: /* MUTANT (rep_op) */      if (beg == lim)
575: /* MUTANT (rep_op) */      if (beg != lim)
575: /* MUTANT (negate) */      if(! (beg < lim))
577: /* MUTANT (del_stmt) */ /* 	  nlines += grepbuf(beg, lim); */ 
577: /* MUTANT (rep_op) */	  nlines -= grepbuf(beg, lim);
577: /* MUTANT (rep_op) */	  nlines *= grepbuf(beg, lim);
577: /* MUTANT (rep_op) */	  nlines %= grepbuf(beg, lim);
578: /* MUTANT (negate) */	  if(! (pending))
580: /* MUTANT (rep_op) */	  if (nlines || done_on_match && !out_invert)
580: /* MUTANT (rep_op) */	  if (nlines && done_on_match || !out_invert)
580: /* MUTANT (negate) */	  if(! (nlines && done_on_match && !out_invert))
583: /* MUTANT (rep_const) */      i = 1;
583: /* MUTANT (rep_const) */      i = -1;
584: /* MUTANT (del_stmt) */ /*       beg = lim; */ 
585: /* MUTANT (rep_op) */      while (i <= out_before && beg > bufbeg && beg != lastout)
585: /* MUTANT (rep_op) */      while (i > out_before && beg > bufbeg && beg != lastout)
585: /* MUTANT (rep_op) */      while (i >= out_before && beg > bufbeg && beg != lastout)
585: /* MUTANT (rep_op) */      while (i == out_before && beg > bufbeg && beg != lastout)
585: /* MUTANT (rep_op) */      while (i != out_before && beg > bufbeg && beg != lastout)
585: /* MUTANT (rep_op) */      while (i < out_before || beg > bufbeg && beg != lastout)
585: /* MUTANT (rep_op) */      while (i < out_before && beg <= bufbeg && beg != lastout)
585: /* MUTANT (rep_op) */      while (i < out_before && beg < bufbeg && beg != lastout)
585: /* MUTANT (rep_op) */      while (i < out_before && beg >= bufbeg && beg != lastout)
585: /* MUTANT (rep_op) */      while (i < out_before && beg == bufbeg && beg != lastout)
585: /* MUTANT (rep_op) */      while (i < out_before && beg != bufbeg && beg != lastout)
585: /* MUTANT (rep_op) */      while (i < out_before && beg > bufbeg || beg != lastout)
585: /* MUTANT (rep_op) */      while (i < out_before && beg > bufbeg && beg == lastout)
585: /* MUTANT (negate) */      while(! (i < out_before && beg > bufbeg && beg != lastout))
587: /* MUTANT (del_stmt) */ /* 	  ++i; */ 
587: /* MUTANT (rep_op) */	  --i;
589: /* MUTANT (rep_op) */	    ++beg;
590: /* MUTANT (del_stmt) */ /* 	  while (beg > bufbeg && beg[-1] != '\n'); */ 
590: /* MUTANT (rep_op) */	  while (beg <= bufbeg && beg[-1] != '\n');
590: /* MUTANT (rep_op) */	  while (beg < bufbeg && beg[-1] != '\n');
590: /* MUTANT (rep_op) */	  while (beg >= bufbeg && beg[-1] != '\n');
590: /* MUTANT (rep_op) */	  while (beg == bufbeg && beg[-1] != '\n');
590: /* MUTANT (rep_op) */	  while (beg != bufbeg && beg[-1] != '\n');
590: /* MUTANT (rep_op) */	  while (beg > bufbeg || beg[-1] != '\n');
590: /* MUTANT (rep_op) */	  while (beg > bufbeg && beg[-1] == '\n');
590: /* MUTANT (rep_const) */	  while (beg > bufbeg && beg[0] != '\n');
590: /* MUTANT (rep_const) */	  while (beg > bufbeg && beg[1] != '\n');
590: /* MUTANT (rep_const) */	  while (beg > bufbeg && beg[((-1)+1)] != '\n');
590: /* MUTANT (rep_const) */	  while (beg > bufbeg && beg[((-1)-1)] != '\n');
590: /* MUTANT (negate) */	  while(! (beg > bufbeg && beg[-1] != '\n'));
592: /* MUTANT (rep_op) */      if (beg == lastout)
592: /* MUTANT (negate) */      if(! (beg != lastout))
593: /* MUTANT (rep_const) */	lastout = 1;
593: /* MUTANT (rep_const) */	lastout = -1;
594: /* MUTANT (del_stmt) */ /*       save = residue + lim - beg; */ 
594: /* MUTANT (rep_op) */      save = residue - lim - beg;
594: /* MUTANT (rep_op) */      save = residue * lim - beg;
594: /* MUTANT (rep_op) */      save = residue % lim - beg;
595: /* MUTANT (del_stmt) */ /*       totalcc += buflim - bufbeg - save; */ 
595: /* MUTANT (rep_op) */      totalcc -= buflim - bufbeg - save;
595: /* MUTANT (rep_op) */      totalcc *= buflim - bufbeg - save;
595: /* MUTANT (rep_op) */      totalcc %= buflim - bufbeg - save;
596: /* MUTANT (negate) */      if(! (out_line))
599: /* MUTANT (negate) */  if(! (residue))
601: /* MUTANT (del_stmt) */ /*       nlines += grepbuf(bufbeg + save - residue, buflim); */ 
601: /* MUTANT (rep_op) */      nlines -= grepbuf(bufbeg + save - residue, buflim);
601: /* MUTANT (rep_op) */      nlines *= grepbuf(bufbeg + save - residue, buflim);
601: /* MUTANT (rep_op) */      nlines %= grepbuf(bufbeg + save - residue, buflim);
601: /* MUTANT (rep_op) */      nlines += grepbuf(bufbeg - save - residue, buflim);
601: /* MUTANT (rep_op) */      nlines += grepbuf(bufbeg * save - residue, buflim);
601: /* MUTANT (rep_op) */      nlines += grepbuf(bufbeg % save - residue, buflim);
602: /* MUTANT (negate) */      if(! (pending))
613: /* MUTANT (rep_op) */  if (status == 0)
613: /* MUTANT (rep_const) */  if (status != 1)
613: /* MUTANT (rep_const) */  if (status != -1)
613: /* MUTANT (negate) */  if(! (status != 0))
615: /* MUTANT (del_stmt) */ /*       fprintf (stderr, _("Usage: %s [OPTION]... PATTERN [FILE]...\n"), prog); */ 
616: /* MUTANT (del_stmt) */ /*       fprintf (stderr, _("Try `%s --help' for more information.\n"), prog); */ 
620: /* MUTANT (del_stmt) */ /*       printf (_("Usage: %s [OPTION]... PATTERN [FILE] ...\n"), prog); */ 
625: /* MUTANT (rep_op) */  -E, ++extended-regexp     PATTERN is an extended regular expression\n\
626: /* MUTANT (rep_op) */  -F, ++fixed-regexp        PATTERN is a fixed string separated by newlines\n\
627: /* MUTANT (rep_op) */  -G, ++basic-regexp        PATTERN is a basic regular expression\n\
628: /* MUTANT (rep_op) */  -e, ++regexp=PATTERN      use PATTERN as a regular expression\n\
629: /* MUTANT (rep_op) */  -f, ++file=FILE           obtain PATTERN from FILE\n\
630: /* MUTANT (rep_op) */  -i, ++ignore-case         ignore case distinctions\n\
631: /* MUTANT (rep_op) */  -w, ++word-regexp         force PATTERN to match only whole words\n\
632: /* MUTANT (rep_op) */  -x, ++line-regexp         force PATTERN to match only whole lines\n"));
636: /* MUTANT (rep_op) */  -s, ++no-messages         suppress error messages\n\
637: /* MUTANT (rep_op) */  -v, ++revert-match        select non-matching lines\n\
638: /* MUTANT (rep_op) */  -V, ++version             print version information and exit\n\
639: /* MUTANT (rep_op) */      ++help                display this help and exit\n"));
643: /* MUTANT (rep_op) */  -b, ++byte-offset         print the byte offset with output lines\n\
644: /* MUTANT (rep_op) */  -n, ++line-number         print line number with output lines\n\
645: /* MUTANT (rep_op) */  -H, ++with-filename       print the filename for each match\n\
646: /* MUTANT (rep_op) */  -h, ++no-filename         suppress the prefixing filename on output\n\
647: /* MUTANT (rep_op) */  -q, ++quiet, --silent     suppress all normal output\n\
647: /* MUTANT (rep_op) */  -q, --quiet, ++silent     suppress all normal output\n\
648: /* MUTANT (rep_op) */  -L, ++files-without-match only print FILE names containing no match\n\
649: /* MUTANT (rep_op) */  -l, ++files-with-matches  only print FILE names containing matches\n\
650: /* MUTANT (rep_op) */  -c, ++count               only print a count of matching lines per FILE\n"));
654: /* MUTANT (rep_op) */  -B, ++before-context=NUM  print NUM lines of leading context\n\
655: /* MUTANT (rep_op) */  -A, ++after-context=NUM   print NUM lines of trailing context\n\
657: /* MUTANT (rep_op) */  -C, ++context             same as -2\n\
657: /* MUTANT (rep_const) */  -C, --context             same as 0\n\
657: /* MUTANT (rep_const) */  -C, --context             same as 1\n\
657: /* MUTANT (rep_const) */  -C, --context             same as -1\n\
657: /* MUTANT (rep_const) */  -C, --context             same as ((-2)+1)\n\
657: /* MUTANT (rep_const) */  -C, --context             same as ((-2)-1)\n\
658: /* MUTANT (rep_op) */  -U, ++binary              do not strip CR characters at EOL (MSDOS)\n\
659: /* MUTANT (rep_op) */  -u, ++unix-byte-offsets   report offsets as if CRs were not there (MSDOS)\n\
659: /* MUTANT (negate) */  -u, --unix-byte-offsets   report offsets as if(! CRs were not there (MSDOS))\n\
663: /* MUTANT (rep_const) */two FILEs given, assume -h. Exit with 1 if matches, with 1 if none.\n\
663: /* MUTANT (rep_const) */two FILEs given, assume -h. Exit with -1 if matches, with 1 if none.\n\
663: /* MUTANT (rep_const) */two FILEs given, assume -h. Exit with 0 if matches, with 0 if none.\n\
663: /* MUTANT (rep_const) */two FILEs given, assume -h. Exit with 0 if matches, with -1 if none.\n\
663: /* MUTANT (rep_const) */two FILEs given, assume -h. Exit with 0 if matches, with ((1)+1) if none.\n\
664: /* MUTANT (rep_const) */Exit with 0 if syntax errors or system errors.\n"));
664: /* MUTANT (rep_const) */Exit with 1 if syntax errors or system errors.\n"));
664: /* MUTANT (rep_const) */Exit with -1 if syntax errors or system errors.\n"));
664: /* MUTANT (rep_const) */Exit with ((2)+1) if syntax errors or system errors.\n"));
664: /* MUTANT (rep_const) */Exit with ((2)-1) if syntax errors or system errors.\n"));
665: /* MUTANT (del_stmt) */ /*       printf (_("\nReport bugs to <bug-gnu-utils@gnu.org>.\n")); */ 
676: /* MUTANT (del_stmt) */ /*   int i; */ 
681: /* MUTANT (rep_op) */  for (i = 0; matchers[i].name; --i)
681: /* MUTANT (rep_const) */  for (i = 1; matchers[i].name; ++i)
681: /* MUTANT (rep_const) */  for (i = -1; matchers[i].name; ++i)
682: /* MUTANT (rep_op) */    if (strcmp(name, matchers[i].name) != 0)
682: /* MUTANT (rep_const) */    if (strcmp(name, matchers[i].name) == 1)
682: /* MUTANT (rep_const) */    if (strcmp(name, matchers[i].name) == -1)
682: /* MUTANT (negate) */    if(! (strcmp(name, matchers[i].name) == 0))
684: /* MUTANT (del_stmt) */ /* 	compile = matchers[i].compile; */ 
685: /* MUTANT (del_stmt) */ /* 	execute = matchers[i].execute; */ 
693: /* MUTANT (negate) */	if(! (!getrlimit (RLIMIT_STACK, &rlim)))
695: /* MUTANT (del_stmt) */ /* 	    long newlim; */ 
696: /* MUTANT (del_stmt) */ /* 	    extern long int re_max_failures; */  /* from regex.c */
699: /* MUTANT (del_stmt) */ /* 	    newlim = re_max_failures * 2 * 20 * sizeof (char *); */ 
699: /* MUTANT (rep_const) */	    newlim = re_max_failures * 0 * 20 * sizeof (char *);
699: /* MUTANT (rep_const) */	    newlim = re_max_failures * 1 * 20 * sizeof (char *);
699: /* MUTANT (rep_const) */	    newlim = re_max_failures * -1 * 20 * sizeof (char *);
699: /* MUTANT (rep_const) */	    newlim = re_max_failures * ((2)+1) * 20 * sizeof (char *);
699: /* MUTANT (rep_const) */	    newlim = re_max_failures * ((2)-1) * 20 * sizeof (char *);
699: /* MUTANT (rep_const) */	    newlim = re_max_failures * 2 * 0 * sizeof (char *);
699: /* MUTANT (rep_const) */	    newlim = re_max_failures * 2 * 1 * sizeof (char *);
699: /* MUTANT (rep_const) */	    newlim = re_max_failures * 2 * -1 * sizeof (char *);
699: /* MUTANT (rep_const) */	    newlim = re_max_failures * 2 * ((20)+1) * sizeof (char *);
699: /* MUTANT (rep_const) */	    newlim = re_max_failures * 2 * ((20)-1) * sizeof (char *);
700: /* MUTANT (rep_op) */	    if (newlim <= rlim.rlim_max)
700: /* MUTANT (rep_op) */	    if (newlim < rlim.rlim_max)
700: /* MUTANT (rep_op) */	    if (newlim >= rlim.rlim_max)
700: /* MUTANT (rep_op) */	    if (newlim == rlim.rlim_max)
700: /* MUTANT (rep_op) */	    if (newlim != rlim.rlim_max)
700: /* MUTANT (negate) */	    if(! (newlim > rlim.rlim_max))
702: /* MUTANT (del_stmt) */ /* 		newlim = rlim.rlim_max; */ 
703: /* MUTANT (del_stmt) */ /* 		re_max_failures = newlim / (2 * 20 * sizeof (char *)); */ 
703: /* MUTANT (rep_const) */		re_max_failures = newlim / (0 * 20 * sizeof (char *));
703: /* MUTANT (rep_const) */		re_max_failures = newlim / (1 * 20 * sizeof (char *));
703: /* MUTANT (rep_const) */		re_max_failures = newlim / (-1 * 20 * sizeof (char *));
703: /* MUTANT (rep_const) */		re_max_failures = newlim / (((2)+1) * 20 * sizeof (char *));
703: /* MUTANT (rep_const) */		re_max_failures = newlim / (((2)-1) * 20 * sizeof (char *));
703: /* MUTANT (rep_const) */		re_max_failures = newlim / (2 * 0 * sizeof (char *));
703: /* MUTANT (rep_const) */		re_max_failures = newlim / (2 * 1 * sizeof (char *));
703: /* MUTANT (rep_const) */		re_max_failures = newlim / (2 * -1 * sizeof (char *));
703: /* MUTANT (rep_const) */		re_max_failures = newlim / (2 * ((20)+1) * sizeof (char *));
703: /* MUTANT (rep_const) */		re_max_failures = newlim / (2 * ((20)-1) * sizeof (char *));
705: /* MUTANT (rep_op) */	    if (rlim.rlim_cur <= newlim)
705: /* MUTANT (rep_op) */	    if (rlim.rlim_cur > newlim)
705: /* MUTANT (rep_op) */	    if (rlim.rlim_cur >= newlim)
705: /* MUTANT (rep_op) */	    if (rlim.rlim_cur == newlim)
705: /* MUTANT (rep_op) */	    if (rlim.rlim_cur != newlim)
705: /* MUTANT (negate) */	    if(! (rlim.rlim_cur < newlim))
708: /* MUTANT (del_stmt) */ /* 	    setrlimit (RLIMIT_STACK, &rlim); */ 
711: /* MUTANT (rep_const) */	return 0;
711: /* MUTANT (rep_const) */	return -1;
711: /* MUTANT (rep_const) */	return ((1)+1);
713: /* MUTANT (rep_const) */  return 1;
713: /* MUTANT (rep_const) */  return -1;
719: /* MUTANT (del_stmt) */ /*      char *argv[]; */ 
721: /* MUTANT (del_stmt) */ /*   char *keys; */ 
722: /* MUTANT (del_stmt) */ /*   size_t keycc, oldcc, keyalloc; */ 
723: /* MUTANT (del_stmt) */ /*   int count_matches, no_filenames, list_files, suppress_errors; */ 
724: /* MUTANT (del_stmt) */ /*   int with_filenames; */ 
725: /* MUTANT (del_stmt) */ /*   int opt, cc, desc, count, status; */ 
726: /* MUTANT (del_stmt) */ /*   FILE *fp; */ 
727: /* MUTANT (del_stmt) */ /*   extern char *optarg; */ 
728: /* MUTANT (del_stmt) */ /*   extern int optind; */ 
730: /* MUTANT (del_stmt) */ /*   argv[0] = "target1"; */ 
730: /* MUTANT (rep_const) */  argv[1] = "target1";
730: /* MUTANT (rep_const) */  argv[-1] = "target1";
732: /* MUTANT (del_stmt) */ /*   prog = argv[0]; */ 
732: /* MUTANT (rep_const) */  prog = argv[1];
732: /* MUTANT (rep_const) */  prog = argv[-1];
733: /* MUTANT (rep_op) */  if (prog || strrchr(prog, '/'))
733: /* MUTANT (negate) */  if(! (prog && strrchr(prog, '/')))
734: /* MUTANT (rep_op) */    prog = strrchr(prog, '/') - 1;
734: /* MUTANT (rep_op) */    prog = strrchr(prog, '/') * 1;
734: /* MUTANT (rep_op) */    prog = strrchr(prog, '/') % 1;
734: /* MUTANT (rep_const) */    prog = strrchr(prog, '/') + 0;
734: /* MUTANT (rep_const) */    prog = strrchr(prog, '/') + -1;
734: /* MUTANT (rep_const) */    prog = strrchr(prog, '/') + ((1)+1);
739: /* MUTANT (negate) */  if(! (prog))
741: /* MUTANT (del_stmt) */ /*       char *p = prog; */ 
742: /* MUTANT (del_stmt) */ /*       char *bslash = strrchr(argv[0], '\\'); */ 
742: /* MUTANT (rep_const) */      char *bslash = strrchr(argv[1], '\\');
742: /* MUTANT (rep_const) */      char *bslash = strrchr(argv[-1], '\\');
744: /* MUTANT (rep_op) */      if (bslash || bslash >= prog) /* for mixed forward/backslash case */
744: /* MUTANT (rep_op) */      if (bslash && bslash <= prog) /* for mixed forward/backslash case */
744: /* MUTANT (rep_op) */      if (bslash && bslash < prog) /* for mixed forward/backslash case */
744: /* MUTANT (rep_op) */      if (bslash && bslash > prog) /* for mixed forward/backslash case */
744: /* MUTANT (rep_op) */      if (bslash && bslash == prog) /* for mixed forward/backslash case */
744: /* MUTANT (rep_op) */      if (bslash && bslash != prog) /* for mixed forward/backslash case */
744: /* MUTANT (negate) */      if(! (bslash && bslash >= prog)) /* for mixed forward/backslash case */
745: /* MUTANT (rep_op) */	prog = bslash - 1;
745: /* MUTANT (rep_op) */	prog = bslash * 1;
745: /* MUTANT (rep_op) */	prog = bslash % 1;
745: /* MUTANT (rep_const) */	prog = bslash + 0;
745: /* MUTANT (rep_const) */	prog = bslash + -1;
745: /* MUTANT (rep_const) */	prog = bslash + ((1)+1);
746: /* MUTANT (rep_op) */      else if (prog != argv[0]
746: /* MUTANT (rep_const) */      else if (prog == argv[1]
746: /* MUTANT (rep_const) */      else if (prog == argv[-1]
747: /* MUTANT (rep_op) */	       || argv[0][0] && argv[0][1] == ':') /* "c:progname" */
747: /* MUTANT (rep_op) */	       && argv[0][0] || argv[0][1] == ':') /* "c:progname" */
747: /* MUTANT (rep_op) */	       && argv[0][0] && argv[0][1] != ':') /* "c:progname" */
747: /* MUTANT (rep_const) */	       && argv[1][0] && argv[0][1] == ':') /* "c:progname" */
747: /* MUTANT (rep_const) */	       && argv[-1][0] && argv[0][1] == ':') /* "c:progname" */
747: /* MUTANT (rep_const) */	       && argv[0][1] && argv[0][1] == ':') /* "c:progname" */
747: /* MUTANT (rep_const) */	       && argv[0][-1] && argv[0][1] == ':') /* "c:progname" */
747: /* MUTANT (rep_const) */	       && argv[0][0] && argv[1][1] == ':') /* "c:progname" */
747: /* MUTANT (rep_const) */	       && argv[0][0] && argv[-1][1] == ':') /* "c:progname" */
747: /* MUTANT (rep_const) */	       && argv[0][0] && argv[0][0] == ':') /* "c:progname" */
747: /* MUTANT (rep_const) */	       && argv[0][0] && argv[0][-1] == ':') /* "c:progname" */
747: /* MUTANT (rep_const) */	       && argv[0][0] && argv[0][((1)+1)] == ':') /* "c:progname" */
748: /* MUTANT (rep_op) */	prog = argv[0] - 2;
748: /* MUTANT (rep_op) */	prog = argv[0] * 2;
748: /* MUTANT (rep_op) */	prog = argv[0] % 2;
748: /* MUTANT (rep_const) */	prog = argv[1] + 2;
748: /* MUTANT (rep_const) */	prog = argv[-1] + 2;
748: /* MUTANT (rep_const) */	prog = argv[0] + 0;
748: /* MUTANT (rep_const) */	prog = argv[0] + 1;
748: /* MUTANT (rep_const) */	prog = argv[0] + -1;
748: /* MUTANT (rep_const) */	prog = argv[0] + ((2)+1);
748: /* MUTANT (rep_const) */	prog = argv[0] + ((2)-1);
751: /* MUTANT (rep_op) */      for ( ; *p; p--)
752: /* MUTANT (rep_op) */	if (*p <= 'A' && *p <= 'Z')
752: /* MUTANT (rep_op) */	if (*p < 'A' && *p <= 'Z')
752: /* MUTANT (rep_op) */	if (*p > 'A' && *p <= 'Z')
752: /* MUTANT (rep_op) */	if (*p == 'A' && *p <= 'Z')
752: /* MUTANT (rep_op) */	if (*p != 'A' && *p <= 'Z')
752: /* MUTANT (rep_op) */	if (*p >= 'A' || *p <= 'Z')
752: /* MUTANT (rep_op) */	if (*p >= 'A' && *p < 'Z')
752: /* MUTANT (rep_op) */	if (*p >= 'A' && *p > 'Z')
752: /* MUTANT (rep_op) */	if (*p >= 'A' && *p >= 'Z')
752: /* MUTANT (rep_op) */	if (*p >= 'A' && *p == 'Z')
752: /* MUTANT (rep_op) */	if (*p >= 'A' && *p != 'Z')
752: /* MUTANT (negate) */	if(! (*p >= 'A' && *p <= 'Z'))
753: /* MUTANT (rep_op) */	  *p -= 'a' - 'A';
753: /* MUTANT (rep_op) */	  *p *= 'a' - 'A';
753: /* MUTANT (rep_op) */	  *p %= 'a' - 'A';
756: /* MUTANT (rep_op) */      if ((p = strrchr(prog, '.')) || strcmp(p, ".exe") == 0)
756: /* MUTANT (rep_op) */      if ((p = strrchr(prog, '.')) && strcmp(p, ".exe") != 0)
756: /* MUTANT (rep_const) */      if ((p = strrchr(prog, '.')) && strcmp(p, ".exe") == 1)
756: /* MUTANT (rep_const) */      if ((p = strrchr(prog, '.')) && strcmp(p, ".exe") == -1)
756: /* MUTANT (negate) */      if(! ((p = strrchr(prog, '.')) && strcmp(p, ".exe") == 0))
757: /* MUTANT (rep_const) */	*p = '\1';
757: /* MUTANT (rep_const) */	*p = '\-1';
762: /* MUTANT (del_stmt) */ /*   keycc = 0; */ 
762: /* MUTANT (rep_const) */  keycc = 1;
762: /* MUTANT (rep_const) */  keycc = -1;
763: /* MUTANT (del_stmt) */ /*   count_matches = 0; */ 
763: /* MUTANT (rep_const) */  count_matches = 1;
763: /* MUTANT (rep_const) */  count_matches = -1;
764: /* MUTANT (del_stmt) */ /*   no_filenames = 0; */ 
764: /* MUTANT (rep_const) */  no_filenames = 1;
764: /* MUTANT (rep_const) */  no_filenames = -1;
765: /* MUTANT (del_stmt) */ /*   with_filenames = 0; */ 
765: /* MUTANT (rep_const) */  with_filenames = 1;
765: /* MUTANT (rep_const) */  with_filenames = -1;
766: /* MUTANT (del_stmt) */ /*   list_files = 0; */ 
766: /* MUTANT (rep_const) */  list_files = 1;
766: /* MUTANT (rep_const) */  list_files = -1;
767: /* MUTANT (del_stmt) */ /*   suppress_errors = 0; */ 
767: /* MUTANT (rep_const) */  suppress_errors = 1;
767: /* MUTANT (rep_const) */  suppress_errors = -1;
768: /* MUTANT (del_stmt) */ /*   matcher = NULL; */ 
776: /* MUTANT (del_stmt) */ /*   textdomain (PACKAGE); */ 
781: /* MUTANT (rep_const) */         "0A:B:CEFGHVX:bce:f:hiLlnqsvwxyUu",
781: /* MUTANT (rep_const) */         "1A:B:CEFGHVX:bce:f:hiLlnqsvwxyUu",
781: /* MUTANT (rep_const) */         "-1A:B:CEFGHVX:bce:f:hiLlnqsvwxyUu",
781: /* MUTANT (rep_const) */         "((0123456789)+1)A:B:CEFGHVX:bce:f:hiLlnqsvwxyUu",
781: /* MUTANT (rep_const) */         "((0123456789)-1)A:B:CEFGHVX:bce:f:hiLlnqsvwxyUu",
783: /* MUTANT (rep_const) */         "0A:B:CEFGHVX:bce:f:hiLlnqsvwxy",
783: /* MUTANT (rep_const) */         "1A:B:CEFGHVX:bce:f:hiLlnqsvwxy",
783: /* MUTANT (rep_const) */         "-1A:B:CEFGHVX:bce:f:hiLlnqsvwxy",
783: /* MUTANT (rep_const) */         "((0123456789)+1)A:B:CEFGHVX:bce:f:hiLlnqsvwxy",
783: /* MUTANT (rep_const) */         "((0123456789)-1)A:B:CEFGHVX:bce:f:hiLlnqsvwxy",
785: /* MUTANT (rep_op) */         long_options, NULL)) == EOF)
788: /* MUTANT (rep_const) */      case '1':
788: /* MUTANT (rep_const) */      case '-1':
789: /* MUTANT (rep_const) */      case '0':
789: /* MUTANT (rep_const) */      case '-1':
789: /* MUTANT (rep_const) */      case '((1)+1)':
790: /* MUTANT (rep_const) */      case '0':
790: /* MUTANT (rep_const) */      case '1':
790: /* MUTANT (rep_const) */      case '-1':
790: /* MUTANT (rep_const) */      case '((2)+1)':
790: /* MUTANT (rep_const) */      case '((2)-1)':
791: /* MUTANT (rep_const) */      case '0':
791: /* MUTANT (rep_const) */      case '1':
791: /* MUTANT (rep_const) */      case '-1':
791: /* MUTANT (rep_const) */      case '((3)+1)':
791: /* MUTANT (rep_const) */      case '((3)-1)':
792: /* MUTANT (rep_const) */      case '0':
792: /* MUTANT (rep_const) */      case '1':
792: /* MUTANT (rep_const) */      case '-1':
792: /* MUTANT (rep_const) */      case '((4)+1)':
792: /* MUTANT (rep_const) */      case '((4)-1)':
793: /* MUTANT (rep_const) */      case '0':
793: /* MUTANT (rep_const) */      case '1':
793: /* MUTANT (rep_const) */      case '-1':
793: /* MUTANT (rep_const) */      case '((5)+1)':
793: /* MUTANT (rep_const) */      case '((5)-1)':
794: /* MUTANT (rep_const) */      case '0':
794: /* MUTANT (rep_const) */      case '1':
794: /* MUTANT (rep_const) */      case '-1':
794: /* MUTANT (rep_const) */      case '((6)+1)':
794: /* MUTANT (rep_const) */      case '((6)-1)':
795: /* MUTANT (rep_const) */      case '0':
795: /* MUTANT (rep_const) */      case '1':
795: /* MUTANT (rep_const) */      case '-1':
795: /* MUTANT (rep_const) */      case '((7)+1)':
795: /* MUTANT (rep_const) */      case '((7)-1)':
796: /* MUTANT (rep_const) */      case '0':
796: /* MUTANT (rep_const) */      case '1':
796: /* MUTANT (rep_const) */      case '-1':
796: /* MUTANT (rep_const) */      case '((8)+1)':
796: /* MUTANT (rep_const) */      case '((8)-1)':
797: /* MUTANT (rep_const) */      case '0':
797: /* MUTANT (rep_const) */      case '1':
797: /* MUTANT (rep_const) */      case '-1':
797: /* MUTANT (rep_const) */      case '((9)+1)':
797: /* MUTANT (rep_const) */      case '((9)-1)':
798: /* MUTANT (rep_op) */	out_before = 10 * out_before - opt - '0';
798: /* MUTANT (rep_op) */	out_before = 10 * out_before * opt - '0';
798: /* MUTANT (rep_op) */	out_before = 10 * out_before % opt - '0';
798: /* MUTANT (rep_const) */	out_before = 0 * out_before + opt - '0';
798: /* MUTANT (rep_const) */	out_before = 1 * out_before + opt - '0';
798: /* MUTANT (rep_const) */	out_before = -1 * out_before + opt - '0';
798: /* MUTANT (rep_const) */	out_before = ((10)+1) * out_before + opt - '0';
798: /* MUTANT (rep_const) */	out_before = ((10)-1) * out_before + opt - '0';
798: /* MUTANT (rep_const) */	out_before = 10 * out_before + opt - '1';
798: /* MUTANT (rep_const) */	out_before = 10 * out_before + opt - '-1';
799: /* MUTANT (del_stmt) */ /* 	out_after = 10 * out_after + opt - '0'; */ 
799: /* MUTANT (rep_op) */	out_after = 10 * out_after - opt - '0';
799: /* MUTANT (rep_op) */	out_after = 10 * out_after * opt - '0';
799: /* MUTANT (rep_op) */	out_after = 10 * out_after % opt - '0';
799: /* MUTANT (rep_const) */	out_after = 0 * out_after + opt - '0';
799: /* MUTANT (rep_const) */	out_after = 1 * out_after + opt - '0';
799: /* MUTANT (rep_const) */	out_after = -1 * out_after + opt - '0';
799: /* MUTANT (rep_const) */	out_after = ((10)+1) * out_after + opt - '0';
799: /* MUTANT (rep_const) */	out_after = ((10)-1) * out_after + opt - '0';
799: /* MUTANT (rep_const) */	out_after = 10 * out_after + opt - '1';
799: /* MUTANT (rep_const) */	out_after = 10 * out_after + opt - '-1';
800: /* MUTANT (del_stmt) */ /* 	break; */ 
802: /* MUTANT (negate) */	if(! (optarg))
804: /* MUTANT (negate) */	    if(! (ck_atoi (optarg, &out_after)))
805: /* MUTANT (rep_const) */	      fatal (_("invalid context length argument"), 1);
805: /* MUTANT (rep_const) */	      fatal (_("invalid context length argument"), -1);
809: /* MUTANT (negate) */	if(! (optarg))
811: /* MUTANT (negate) */	    if(! (ck_atoi (optarg, &out_before)))
812: /* MUTANT (rep_const) */	      fatal (_("invalid context length argument"), 1);
812: /* MUTANT (rep_const) */	      fatal (_("invalid context length argument"), -1);
816: /* MUTANT (rep_const) */	out_before = out_after = 0;
816: /* MUTANT (rep_const) */	out_before = out_after = 1;
816: /* MUTANT (rep_const) */	out_before = out_after = -1;
816: /* MUTANT (rep_const) */	out_before = out_after = ((2)+1);
816: /* MUTANT (rep_const) */	out_before = out_after = ((2)-1);
817: /* MUTANT (del_stmt) */ /* 	break; */ 
819: /* MUTANT (rep_op) */	if (matcher || strcmp(matcher, "posix-egrep") != 0)
819: /* MUTANT (rep_op) */	if (matcher && strcmp(matcher, "posix-egrep") == 0)
819: /* MUTANT (rep_const) */	if (matcher && strcmp(matcher, "posix-egrep") != 1)
819: /* MUTANT (rep_const) */	if (matcher && strcmp(matcher, "posix-egrep") != -1)
819: /* MUTANT (negate) */	if(! (matcher && strcmp(matcher, "posix-egrep") != 0))
820: /* MUTANT (rep_const) */	  fatal(_("you may specify only one of -E, -F, or -G"), 1);
820: /* MUTANT (rep_const) */	  fatal(_("you may specify only one of -E, -F, or -G"), -1);
821: /* MUTANT (del_stmt) */ /* 	matcher = "posix-egrep"; */ 
822: /* MUTANT (del_stmt) */ /* 	break; */ 
824: /* MUTANT (rep_op) */	if (matcher || strcmp(matcher, "fgrep") != 0)
824: /* MUTANT (rep_op) */	if (matcher && strcmp(matcher, "fgrep") == 0)
824: /* MUTANT (rep_const) */	if (matcher && strcmp(matcher, "fgrep") != 1)
824: /* MUTANT (rep_const) */	if (matcher && strcmp(matcher, "fgrep") != -1)
824: /* MUTANT (negate) */	if(! (matcher && strcmp(matcher, "fgrep") != 0))
825: /* MUTANT (rep_const) */	  fatal(_("you may specify only one of -E, -F, or -G"), 1);;
825: /* MUTANT (rep_const) */	  fatal(_("you may specify only one of -E, -F, or -G"), -1);;
826: /* MUTANT (del_stmt) */ /* 	matcher = "fgrep"; */ 
827: /* MUTANT (del_stmt) */ /* 	break; */ 
829: /* MUTANT (rep_op) */	if (matcher || strcmp(matcher, "grep") != 0)
829: /* MUTANT (rep_op) */	if (matcher && strcmp(matcher, "grep") == 0)
829: /* MUTANT (rep_const) */	if (matcher && strcmp(matcher, "grep") != 1)
829: /* MUTANT (rep_const) */	if (matcher && strcmp(matcher, "grep") != -1)
829: /* MUTANT (negate) */	if(! (matcher && strcmp(matcher, "grep") != 0))
830: /* MUTANT (rep_const) */	  fatal(_("you may specify only one of -E, -F, or -G"), 1);
830: /* MUTANT (rep_const) */	  fatal(_("you may specify only one of -E, -F, or -G"), -1);
831: /* MUTANT (del_stmt) */ /* 	matcher = "grep"; */ 
832: /* MUTANT (del_stmt) */ /* 	break; */ 
834: /* MUTANT (rep_const) */	with_filenames = 0;
834: /* MUTANT (rep_const) */	with_filenames = -1;
834: /* MUTANT (rep_const) */	with_filenames = ((1)+1);
835: /* MUTANT (del_stmt) */ /* 	break; */ 
839: /* MUTANT (del_stmt) */ /* 	break; */ 
841: /* MUTANT (rep_const) */	dos_report_unix_offset = 0;
841: /* MUTANT (rep_const) */	dos_report_unix_offset = -1;
841: /* MUTANT (rep_const) */	dos_report_unix_offset = ((1)+1);
842: /* MUTANT (del_stmt) */ /* 	break; */ 
845: /* MUTANT (rep_const) */	show_version = 0;
845: /* MUTANT (rep_const) */	show_version = -1;
845: /* MUTANT (rep_const) */	show_version = ((1)+1);
846: /* MUTANT (del_stmt) */ /* 	break; */ 
848: /* MUTANT (negate) */	if(! (matcher))
849: /* MUTANT (rep_const) */	  fatal(_("matcher already specified"), 1);
849: /* MUTANT (rep_const) */	  fatal(_("matcher already specified"), -1);
850: /* MUTANT (del_stmt) */ /* 	matcher = optarg; */ 
851: /* MUTANT (del_stmt) */ /* 	break; */ 
853: /* MUTANT (rep_const) */	out_byte = 0;
853: /* MUTANT (rep_const) */	out_byte = -1;
853: /* MUTANT (rep_const) */	out_byte = ((1)+1);
854: /* MUTANT (del_stmt) */ /* 	break; */ 
856: /* MUTANT (rep_const) */	out_quiet = 0;
856: /* MUTANT (rep_const) */	out_quiet = -1;
856: /* MUTANT (rep_const) */	out_quiet = ((1)+1);
857: /* MUTANT (del_stmt) */ /* 	count_matches = 1; */ 
857: /* MUTANT (rep_const) */	count_matches = 0;
857: /* MUTANT (rep_const) */	count_matches = -1;
857: /* MUTANT (rep_const) */	count_matches = ((1)+1);
858: /* MUTANT (del_stmt) */ /* 	break; */ 
861: /* MUTANT (del_stmt) */ /* 	keys = xrealloc(keys, keycc + cc + 1); */ 
861: /* MUTANT (rep_op) */	keys = xrealloc(keys, keycc - cc + 1);
861: /* MUTANT (rep_op) */	keys = xrealloc(keys, keycc * cc + 1);
861: /* MUTANT (rep_op) */	keys = xrealloc(keys, keycc % cc + 1);
861: /* MUTANT (rep_op) */	keys = xrealloc(keys, keycc + cc - 1);
861: /* MUTANT (rep_op) */	keys = xrealloc(keys, keycc + cc * 1);
861: /* MUTANT (rep_op) */	keys = xrealloc(keys, keycc + cc % 1);
861: /* MUTANT (rep_const) */	keys = xrealloc(keys, keycc + cc + 0);
861: /* MUTANT (rep_const) */	keys = xrealloc(keys, keycc + cc + -1);
861: /* MUTANT (rep_const) */	keys = xrealloc(keys, keycc + cc + ((1)+1));
862: /* MUTANT (del_stmt) */ /* 	strcpy(&keys[keycc], optarg); */ 
863: /* MUTANT (del_stmt) */ /* 	keycc += cc; */ 
863: /* MUTANT (rep_op) */	keycc -= cc;
863: /* MUTANT (rep_op) */	keycc *= cc;
863: /* MUTANT (rep_op) */	keycc %= cc;
864: /* MUTANT (del_stmt) */ /* 	keys[keycc++] = '\n'; */ 
864: /* MUTANT (rep_op) */	keys[keycc--] = '\n';
865: /* MUTANT (del_stmt) */ /* 	break; */ 
867: /* MUTANT (rep_op) */	fp = strcmp(optarg, "-") == 0 ? fopen(optarg, "r") : stdin;
867: /* MUTANT (rep_const) */	fp = strcmp(optarg, "-") != 1 ? fopen(optarg, "r") : stdin;
867: /* MUTANT (rep_const) */	fp = strcmp(optarg, "-") != -1 ? fopen(optarg, "r") : stdin;
868: /* MUTANT (negate) */	if(! (!fp))
870: /* MUTANT (rep_op) */	for (keyalloc = 1; keyalloc < keycc + 1; keyalloc *= 2)
870: /* MUTANT (rep_op) */	for (keyalloc = 1; keyalloc > keycc + 1; keyalloc *= 2)
870: /* MUTANT (rep_op) */	for (keyalloc = 1; keyalloc >= keycc + 1; keyalloc *= 2)
870: /* MUTANT (rep_op) */	for (keyalloc = 1; keyalloc == keycc + 1; keyalloc *= 2)
870: /* MUTANT (rep_op) */	for (keyalloc = 1; keyalloc != keycc + 1; keyalloc *= 2)
870: /* MUTANT (rep_op) */	for (keyalloc = 1; keyalloc <= keycc - 1; keyalloc *= 2)
870: /* MUTANT (rep_op) */	for (keyalloc = 1; keyalloc <= keycc * 1; keyalloc *= 2)
870: /* MUTANT (rep_op) */	for (keyalloc = 1; keyalloc <= keycc % 1; keyalloc *= 2)
870: /* MUTANT (rep_op) */	for (keyalloc = 1; keyalloc <= keycc + 1; keyalloc += 2)
870: /* MUTANT (rep_op) */	for (keyalloc = 1; keyalloc <= keycc + 1; keyalloc -= 2)
870: /* MUTANT (rep_op) */	for (keyalloc = 1; keyalloc <= keycc + 1; keyalloc %= 2)
870: /* MUTANT (rep_const) */	for (keyalloc = 0; keyalloc <= keycc + 1; keyalloc *= 2)
870: /* MUTANT (rep_const) */	for (keyalloc = -1; keyalloc <= keycc + 1; keyalloc *= 2)
870: /* MUTANT (rep_const) */	for (keyalloc = ((1)+1); keyalloc <= keycc + 1; keyalloc *= 2)
870: /* MUTANT (rep_const) */	for (keyalloc = 1; keyalloc <= keycc + 0; keyalloc *= 2)
870: /* MUTANT (rep_const) */	for (keyalloc = 1; keyalloc <= keycc + -1; keyalloc *= 2)
870: /* MUTANT (rep_const) */	for (keyalloc = 1; keyalloc <= keycc + ((1)+1); keyalloc *= 2)
870: /* MUTANT (rep_const) */	for (keyalloc = 1; keyalloc <= keycc + 1; keyalloc *= 0)
870: /* MUTANT (rep_const) */	for (keyalloc = 1; keyalloc <= keycc + 1; keyalloc *= 1)
870: /* MUTANT (rep_const) */	for (keyalloc = 1; keyalloc <= keycc + 1; keyalloc *= -1)
870: /* MUTANT (rep_const) */	for (keyalloc = 1; keyalloc <= keycc + 1; keyalloc *= ((2)+1))
870: /* MUTANT (rep_const) */	for (keyalloc = 1; keyalloc <= keycc + 1; keyalloc *= ((2)-1))
872: /* MUTANT (del_stmt) */ /* 	keys = xrealloc(keys, keyalloc); */ 
873: /* MUTANT (del_stmt) */ /* 	oldcc = keycc; */ 
875: /* MUTANT (rep_op) */	       || (cc = fread(keys + keycc, 1, keyalloc - 1 - keycc, fp)) > 0)
875: /* MUTANT (rep_op) */	       && (cc = fread(keys - keycc, 1, keyalloc - 1 - keycc, fp)) > 0)
875: /* MUTANT (rep_op) */	       && (cc = fread(keys * keycc, 1, keyalloc - 1 - keycc, fp)) > 0)
875: /* MUTANT (rep_op) */	       && (cc = fread(keys % keycc, 1, keyalloc - 1 - keycc, fp)) > 0)
875: /* MUTANT (rep_op) */	       && (cc = fread(keys + keycc, 1, keyalloc - 1 - keycc, fp)) <= 0)
875: /* MUTANT (rep_op) */	       && (cc = fread(keys + keycc, 1, keyalloc - 1 - keycc, fp)) < 0)
875: /* MUTANT (rep_op) */	       && (cc = fread(keys + keycc, 1, keyalloc - 1 - keycc, fp)) >= 0)
875: /* MUTANT (rep_op) */	       && (cc = fread(keys + keycc, 1, keyalloc - 1 - keycc, fp)) == 0)
875: /* MUTANT (rep_op) */	       && (cc = fread(keys + keycc, 1, keyalloc - 1 - keycc, fp)) != 0)
875: /* MUTANT (rep_const) */	       && (cc = fread(keys + keycc, 0, keyalloc - 1 - keycc, fp)) > 0)
875: /* MUTANT (rep_const) */	       && (cc = fread(keys + keycc, -1, keyalloc - 1 - keycc, fp)) > 0)
875: /* MUTANT (rep_const) */	       && (cc = fread(keys + keycc, ((1)+1), keyalloc - 1 - keycc, fp)) > 0)
875: /* MUTANT (rep_const) */	       && (cc = fread(keys + keycc, 1, keyalloc - 0 - keycc, fp)) > 0)
875: /* MUTANT (rep_const) */	       && (cc = fread(keys + keycc, 1, keyalloc - -1 - keycc, fp)) > 0)
875: /* MUTANT (rep_const) */	       && (cc = fread(keys + keycc, 1, keyalloc - ((1)+1) - keycc, fp)) > 0)
875: /* MUTANT (rep_const) */	       && (cc = fread(keys + keycc, 1, keyalloc - 1 - keycc, fp)) > 1)
875: /* MUTANT (rep_const) */	       && (cc = fread(keys + keycc, 1, keyalloc - 1 - keycc, fp)) > -1)
877: /* MUTANT (del_stmt) */ /* 	    keycc += cc; */ 
877: /* MUTANT (rep_op) */	    keycc -= cc;
877: /* MUTANT (rep_op) */	    keycc *= cc;
877: /* MUTANT (rep_op) */	    keycc %= cc;
878: /* MUTANT (rep_op) */	    if (keycc != keyalloc - 1)
878: /* MUTANT (rep_const) */	    if (keycc == keyalloc - 0)
878: /* MUTANT (rep_const) */	    if (keycc == keyalloc - -1)
878: /* MUTANT (rep_const) */	    if (keycc == keyalloc - ((1)+1))
878: /* MUTANT (negate) */	    if(! (keycc == keyalloc - 1))
879: /* MUTANT (rep_op) */	      keys = xrealloc(keys, keyalloc += 2);
879: /* MUTANT (rep_op) */	      keys = xrealloc(keys, keyalloc -= 2);
879: /* MUTANT (rep_op) */	      keys = xrealloc(keys, keyalloc %= 2);
879: /* MUTANT (rep_const) */	      keys = xrealloc(keys, keyalloc *= 0);
879: /* MUTANT (rep_const) */	      keys = xrealloc(keys, keyalloc *= 1);
879: /* MUTANT (rep_const) */	      keys = xrealloc(keys, keyalloc *= -1);
879: /* MUTANT (rep_const) */	      keys = xrealloc(keys, keyalloc *= ((2)+1));
879: /* MUTANT (rep_const) */	      keys = xrealloc(keys, keyalloc *= ((2)-1));
881: /* MUTANT (rep_op) */	if (fp == stdin)
881: /* MUTANT (negate) */	if(! (fp != stdin))
884: /* MUTANT (rep_op) */	if (oldcc == keycc && keys[keycc - 1] != '\n')
884: /* MUTANT (rep_op) */	if (oldcc != keycc || keys[keycc - 1] != '\n')
884: /* MUTANT (rep_op) */	if (oldcc != keycc && keys[keycc - 1] == '\n')
884: /* MUTANT (rep_const) */	if (oldcc != keycc && keys[keycc - 0] != '\n')
884: /* MUTANT (rep_const) */	if (oldcc != keycc && keys[keycc - -1] != '\n')
884: /* MUTANT (rep_const) */	if (oldcc != keycc && keys[keycc - ((1)+1)] != '\n')
884: /* MUTANT (negate) */	if(! (oldcc != keycc && keys[keycc - 1] != '\n'))
885: /* MUTANT (rep_op) */	  keys[keycc--] = '\n';
886: /* MUTANT (del_stmt) */ /* 	break; */ 
888: /* MUTANT (rep_const) */	no_filenames = 0;
888: /* MUTANT (rep_const) */	no_filenames = -1;
888: /* MUTANT (rep_const) */	no_filenames = ((1)+1);
889: /* MUTANT (del_stmt) */ /* 	break; */ 
892: /* MUTANT (rep_const) */	match_icase = 0;
892: /* MUTANT (rep_const) */	match_icase = -1;
892: /* MUTANT (rep_const) */	match_icase = ((1)+1);
893: /* MUTANT (del_stmt) */ /* 	break; */ 
897: /* MUTANT (rep_const) */	out_quiet = 0;
897: /* MUTANT (rep_const) */	out_quiet = -1;
897: /* MUTANT (rep_const) */	out_quiet = ((1)+1);
898: /* MUTANT (del_stmt) */ /* 	list_files = -1; */ 
898: /* MUTANT (rep_const) */	list_files = 0;
898: /* MUTANT (rep_const) */	list_files = 1;
898: /* MUTANT (rep_const) */	list_files = ((-1)+1);
898: /* MUTANT (rep_const) */	list_files = ((-1)-1);
899: /* MUTANT (del_stmt) */ /* 	done_on_match = 1; */ 
899: /* MUTANT (rep_const) */	done_on_match = 0;
899: /* MUTANT (rep_const) */	done_on_match = -1;
899: /* MUTANT (rep_const) */	done_on_match = ((1)+1);
900: /* MUTANT (del_stmt) */ /* 	break; */ 
902: /* MUTANT (rep_const) */	out_quiet = 0;
902: /* MUTANT (rep_const) */	out_quiet = -1;
902: /* MUTANT (rep_const) */	out_quiet = ((1)+1);
903: /* MUTANT (del_stmt) */ /* 	list_files = 1; */ 
903: /* MUTANT (rep_const) */	list_files = 0;
903: /* MUTANT (rep_const) */	list_files = -1;
903: /* MUTANT (rep_const) */	list_files = ((1)+1);
904: /* MUTANT (del_stmt) */ /* 	done_on_match = 1; */ 
904: /* MUTANT (rep_const) */	done_on_match = 0;
904: /* MUTANT (rep_const) */	done_on_match = -1;
904: /* MUTANT (rep_const) */	done_on_match = ((1)+1);
905: /* MUTANT (del_stmt) */ /* 	break; */ 
907: /* MUTANT (rep_const) */	out_line = 0;
907: /* MUTANT (rep_const) */	out_line = -1;
907: /* MUTANT (rep_const) */	out_line = ((1)+1);
908: /* MUTANT (del_stmt) */ /* 	break; */ 
910: /* MUTANT (rep_const) */	done_on_match = 0;
910: /* MUTANT (rep_const) */	done_on_match = -1;
910: /* MUTANT (rep_const) */	done_on_match = ((1)+1);
911: /* MUTANT (del_stmt) */ /* 	out_quiet = 1; */ 
911: /* MUTANT (rep_const) */	out_quiet = 0;
911: /* MUTANT (rep_const) */	out_quiet = -1;
911: /* MUTANT (rep_const) */	out_quiet = ((1)+1);
912: /* MUTANT (del_stmt) */ /* 	break; */ 
914: /* MUTANT (rep_const) */	suppress_errors = 0;
914: /* MUTANT (rep_const) */	suppress_errors = -1;
914: /* MUTANT (rep_const) */	suppress_errors = ((1)+1);
915: /* MUTANT (del_stmt) */ /* 	break; */ 
917: /* MUTANT (rep_const) */	out_invert = 0;
917: /* MUTANT (rep_const) */	out_invert = -1;
917: /* MUTANT (rep_const) */	out_invert = ((1)+1);
918: /* MUTANT (del_stmt) */ /* 	break; */ 
920: /* MUTANT (rep_const) */	match_words = 0;
920: /* MUTANT (rep_const) */	match_words = -1;
920: /* MUTANT (rep_const) */	match_words = ((1)+1);
921: /* MUTANT (del_stmt) */ /* 	break; */ 
923: /* MUTANT (rep_const) */	match_lines = 0;
923: /* MUTANT (rep_const) */	match_lines = -1;
923: /* MUTANT (rep_const) */	match_lines = ((1)+1);
924: /* MUTANT (del_stmt) */ /* 	break; */ 
925: /* MUTANT (rep_const) */      case 1:
925: /* MUTANT (rep_const) */      case -1:
929: /* MUTANT (rep_const) */	usage(0);
929: /* MUTANT (rep_const) */	usage(1);
929: /* MUTANT (rep_const) */	usage(-1);
929: /* MUTANT (rep_const) */	usage(((2)+1));
929: /* MUTANT (rep_const) */	usage(((2)-1));
930: /* MUTANT (del_stmt) */ /* 	break; */ 
933: /* MUTANT (negate) */  if(! (show_version))
935: /* MUTANT (del_stmt) */ /*       printf (_("grep (GNU grep) %s\n"), VERSION); */ 
936: /* MUTANT (del_stmt) */ /*       printf ("\n"); */ 
938: /* MUTANT (rep_const) */Copyright (C) 0, 92, 93, 94, 95, 96, 97 Free Software Foundation, Inc.\n"));
938: /* MUTANT (rep_const) */Copyright (C) 1, 92, 93, 94, 95, 96, 97 Free Software Foundation, Inc.\n"));
938: /* MUTANT (rep_const) */Copyright (C) -1, 92, 93, 94, 95, 96, 97 Free Software Foundation, Inc.\n"));
938: /* MUTANT (rep_const) */Copyright (C) ((1988)+1), 92, 93, 94, 95, 96, 97 Free Software Foundation, Inc.\n"));
938: /* MUTANT (rep_const) */Copyright (C) ((1988)-1), 92, 93, 94, 95, 96, 97 Free Software Foundation, Inc.\n"));
938: /* MUTANT (rep_const) */Copyright (C) 1988, 0, 93, 94, 95, 96, 97 Free Software Foundation, Inc.\n"));
938: /* MUTANT (rep_const) */Copyright (C) 1988, 1, 93, 94, 95, 96, 97 Free Software Foundation, Inc.\n"));
938: /* MUTANT (rep_const) */Copyright (C) 1988, -1, 93, 94, 95, 96, 97 Free Software Foundation, Inc.\n"));
938: /* MUTANT (rep_const) */Copyright (C) 1988, ((92)+1), 93, 94, 95, 96, 97 Free Software Foundation, Inc.\n"));
938: /* MUTANT (rep_const) */Copyright (C) 1988, ((92)-1), 93, 94, 95, 96, 97 Free Software Foundation, Inc.\n"));
938: /* MUTANT (rep_const) */Copyright (C) 1988, 92, 0, 94, 95, 96, 97 Free Software Foundation, Inc.\n"));
938: /* MUTANT (rep_const) */Copyright (C) 1988, 92, 1, 94, 95, 96, 97 Free Software Foundation, Inc.\n"));
938: /* MUTANT (rep_const) */Copyright (C) 1988, 92, -1, 94, 95, 96, 97 Free Software Foundation, Inc.\n"));
938: /* MUTANT (rep_const) */Copyright (C) 1988, 92, ((93)+1), 94, 95, 96, 97 Free Software Foundation, Inc.\n"));
938: /* MUTANT (rep_const) */Copyright (C) 1988, 92, ((93)-1), 94, 95, 96, 97 Free Software Foundation, Inc.\n"));
938: /* MUTANT (rep_const) */Copyright (C) 1988, 92, 93, 0, 95, 96, 97 Free Software Foundation, Inc.\n"));
938: /* MUTANT (rep_const) */Copyright (C) 1988, 92, 93, 1, 95, 96, 97 Free Software Foundation, Inc.\n"));
938: /* MUTANT (rep_const) */Copyright (C) 1988, 92, 93, -1, 95, 96, 97 Free Software Foundation, Inc.\n"));
938: /* MUTANT (rep_const) */Copyright (C) 1988, 92, 93, ((94)+1), 95, 96, 97 Free Software Foundation, Inc.\n"));
938: /* MUTANT (rep_const) */Copyright (C) 1988, 92, 93, ((94)-1), 95, 96, 97 Free Software Foundation, Inc.\n"));
938: /* MUTANT (rep_const) */Copyright (C) 1988, 92, 93, 94, 0, 96, 97 Free Software Foundation, Inc.\n"));
938: /* MUTANT (rep_const) */Copyright (C) 1988, 92, 93, 94, 1, 96, 97 Free Software Foundation, Inc.\n"));
938: /* MUTANT (rep_const) */Copyright (C) 1988, 92, 93, 94, -1, 96, 97 Free Software Foundation, Inc.\n"));
938: /* MUTANT (rep_const) */Copyright (C) 1988, 92, 93, 94, ((95)+1), 96, 97 Free Software Foundation, Inc.\n"));
938: /* MUTANT (rep_const) */Copyright (C) 1988, 92, 93, 94, ((95)-1), 96, 97 Free Software Foundation, Inc.\n"));
938: /* MUTANT (rep_const) */Copyright (C) 1988, 92, 93, 94, 95, 0, 97 Free Software Foundation, Inc.\n"));
938: /* MUTANT (rep_const) */Copyright (C) 1988, 92, 93, 94, 95, 1, 97 Free Software Foundation, Inc.\n"));
938: /* MUTANT (rep_const) */Copyright (C) 1988, 92, 93, 94, 95, -1, 97 Free Software Foundation, Inc.\n"));
938: /* MUTANT (rep_const) */Copyright (C) 1988, 92, 93, 94, 95, ((96)+1), 97 Free Software Foundation, Inc.\n"));
938: /* MUTANT (rep_const) */Copyright (C) 1988, 92, 93, 94, 95, ((96)-1), 97 Free Software Foundation, Inc.\n"));
938: /* MUTANT (rep_const) */Copyright (C) 1988, 92, 93, 94, 95, 96, 0 Free Software Foundation, Inc.\n"));
938: /* MUTANT (rep_const) */Copyright (C) 1988, 92, 93, 94, 95, 96, 1 Free Software Foundation, Inc.\n"));
938: /* MUTANT (rep_const) */Copyright (C) 1988, 92, 93, 94, 95, 96, -1 Free Software Foundation, Inc.\n"));
938: /* MUTANT (rep_const) */Copyright (C) 1988, 92, 93, 94, 95, 96, ((97)+1) Free Software Foundation, Inc.\n"));
938: /* MUTANT (rep_const) */Copyright (C) 1988, 92, 93, 94, 95, 96, ((97)-1) Free Software Foundation, Inc.\n"));
942: /* MUTANT (del_stmt) */ /*       printf ("\n"); */ 
943: /* MUTANT (del_stmt) */ /*       exit (0); */ 
943: /* MUTANT (rep_const) */      exit (1);
943: /* MUTANT (rep_const) */      exit (-1);
946: /* MUTANT (negate) */  if(! (show_help))
947: /* MUTANT (rep_const) */    usage(1);
947: /* MUTANT (rep_const) */    usage(-1);
949: /* MUTANT (negate) */  if(! (keys))
952: /* MUTANT (rep_op) */      if (keycc != 0)
952: /* MUTANT (rep_const) */      if (keycc == 1)
952: /* MUTANT (rep_const) */      if (keycc == -1)
952: /* MUTANT (negate) */      if(! (keycc == 0))
953: /* MUTANT (rep_const) */        out_invert ^= 0;
953: /* MUTANT (rep_const) */        out_invert ^= -1;
953: /* MUTANT (rep_const) */        out_invert ^= ((1)+1);
955: /* MUTANT (rep_op) */        ++keycc;
958: /* MUTANT (rep_op) */    if (optind <= argc)
958: /* MUTANT (rep_op) */    if (optind > argc)
958: /* MUTANT (rep_op) */    if (optind >= argc)
958: /* MUTANT (rep_op) */    if (optind == argc)
958: /* MUTANT (rep_op) */    if (optind != argc)
958: /* MUTANT (negate) */    if(! (optind < argc))
960: /* MUTANT (del_stmt) */ /* 	keys = argv[optind++]; */ 
960: /* MUTANT (rep_op) */	keys = argv[optind--];
961: /* MUTANT (del_stmt) */ /* 	keycc = strlen(keys); */ 
964: /* MUTANT (rep_const) */      usage(0);
964: /* MUTANT (rep_const) */      usage(1);
964: /* MUTANT (rep_const) */      usage(-1);
964: /* MUTANT (rep_const) */      usage(((2)+1));
964: /* MUTANT (rep_const) */      usage(((2)-1));
966: /* MUTANT (negate) */  if(! (!matcher))
969: /* MUTANT (rep_op) */  if (!setmatcher(matcher) || !setmatcher("default"))
969: /* MUTANT (negate) */  if(! (!setmatcher(matcher) && !setmatcher("default")))
972: /* MUTANT (del_stmt) */ /*   (*compile)(keys, keycc); */ 
974: /* MUTANT (rep_op) */  if ((argc - optind <= 1 && !no_filenames) || with_filenames)
974: /* MUTANT (rep_op) */  if ((argc - optind < 1 && !no_filenames) || with_filenames)
974: /* MUTANT (rep_op) */  if ((argc - optind >= 1 && !no_filenames) || with_filenames)
974: /* MUTANT (rep_op) */  if ((argc - optind == 1 && !no_filenames) || with_filenames)
974: /* MUTANT (rep_op) */  if ((argc - optind != 1 && !no_filenames) || with_filenames)
974: /* MUTANT (rep_op) */  if ((argc - optind > 1 || !no_filenames) || with_filenames)
974: /* MUTANT (rep_op) */  if ((argc - optind > 1 && !no_filenames) && with_filenames)
974: /* MUTANT (rep_const) */  if ((argc - optind > 0 && !no_filenames) || with_filenames)
974: /* MUTANT (rep_const) */  if ((argc - optind > -1 && !no_filenames) || with_filenames)
974: /* MUTANT (rep_const) */  if ((argc - optind > ((1)+1) && !no_filenames) || with_filenames)
974: /* MUTANT (negate) */  if(! ((argc - optind > 1 && !no_filenames) || with_filenames))
975: /* MUTANT (rep_const) */    out_file = 0;
975: /* MUTANT (rep_const) */    out_file = -1;
975: /* MUTANT (rep_const) */    out_file = ((1)+1);
977: /* MUTANT (del_stmt) */ /*   status = 1; */ 
977: /* MUTANT (rep_const) */  status = 0;
977: /* MUTANT (rep_const) */  status = -1;
977: /* MUTANT (rep_const) */  status = ((1)+1);
979: /* MUTANT (rep_op) */  if (optind <= argc)
979: /* MUTANT (rep_op) */  if (optind > argc)
979: /* MUTANT (rep_op) */  if (optind >= argc)
979: /* MUTANT (rep_op) */  if (optind == argc)
979: /* MUTANT (rep_op) */  if (optind != argc)
979: /* MUTANT (negate) */  if(! (optind < argc))
980: /* MUTANT (rep_op) */    while (optind <= argc)
980: /* MUTANT (rep_op) */    while (optind > argc)
980: /* MUTANT (rep_op) */    while (optind >= argc)
980: /* MUTANT (rep_op) */    while (optind == argc)
980: /* MUTANT (rep_op) */    while (optind != argc)
980: /* MUTANT (negate) */    while(! (optind < argc))
982: /* MUTANT (rep_op) */	if (strcmp(argv[optind], "-") != 0)
982: /* MUTANT (rep_const) */	if (strcmp(argv[optind], "-") == 1)
982: /* MUTANT (rep_const) */	if (strcmp(argv[optind], "-") == -1)
982: /* MUTANT (negate) */	if(! (strcmp(argv[optind], "-") == 0))
984: /* MUTANT (del_stmt) */ /* 	    filename = _("(standard input)"); */ 
985: /* MUTANT (del_stmt) */ /* 	    desc = 0; */ 
985: /* MUTANT (rep_const) */	    desc = 1;
985: /* MUTANT (rep_const) */	    desc = -1;
991: /* MUTANT (rep_op) */	    if (stat (argv[optind], &st) != 0 && S_ISDIR(st.st_mode))
991: /* MUTANT (rep_op) */	    if (stat (argv[optind], &st) == 0 || S_ISDIR(st.st_mode))
991: /* MUTANT (rep_const) */	    if (stat (argv[optind], &st) == 1 && S_ISDIR(st.st_mode))
991: /* MUTANT (rep_const) */	    if (stat (argv[optind], &st) == -1 && S_ISDIR(st.st_mode))
991: /* MUTANT (negate) */	    if(! (stat (argv[optind], &st) == 0 && S_ISDIR(st.st_mode)))
993: /* MUTANT (del_stmt) */ /* 		++optind; */ 
993: /* MUTANT (rep_op) */		--optind;
994: /* MUTANT (del_stmt) */ /* 		continue; */ 
998: /* MUTANT (del_stmt) */ /* 	    desc = open(argv[optind], O_RDONLY); */ 
1000: /* MUTANT (rep_op) */	if (desc <= 0)
1000: /* MUTANT (rep_op) */	if (desc > 0)
1000: /* MUTANT (rep_op) */	if (desc >= 0)
1000: /* MUTANT (rep_op) */	if (desc == 0)
1000: /* MUTANT (rep_op) */	if (desc != 0)
1000: /* MUTANT (rep_const) */	if (desc < 1)
1000: /* MUTANT (rep_const) */	if (desc < -1)
1000: /* MUTANT (negate) */	if(! (desc < 0))
1002: /* MUTANT (negate) */	    if(! (!suppress_errors))
1010: /* MUTANT (negate) */	    if(! (!isatty(desc)))
1014: /* MUTANT (negate) */	    if(! (count_matches))
1016: /* MUTANT (negate) */		if(! (out_file))
1018: /* MUTANT (del_stmt) */ /* 		printf("%d\n", count); */ 
1020: /* MUTANT (negate) */	    if(! (count))
1022: /* MUTANT (del_stmt) */ /* 		status = 0; */ 
1022: /* MUTANT (rep_const) */		status = 1;
1022: /* MUTANT (rep_const) */		status = -1;
1023: /* MUTANT (rep_op) */		if (list_files != 1)
1023: /* MUTANT (rep_const) */		if (list_files == 0)
1023: /* MUTANT (rep_const) */		if (list_files == -1)
1023: /* MUTANT (rep_const) */		if (list_files == ((1)+1))
1023: /* MUTANT (negate) */		if(! (list_files == 1))
1026: /* MUTANT (rep_op) */	    else if (list_files != -1)
1026: /* MUTANT (rep_const) */	    else if (list_files == 0)
1026: /* MUTANT (rep_const) */	    else if (list_files == 1)
1026: /* MUTANT (rep_const) */	    else if (list_files == ((-1)+1))
1026: /* MUTANT (rep_const) */	    else if (list_files == ((-1)-1))
1026: /* MUTANT (negate) */	    else if(! (list_files == -1))
1028: /* MUTANT (rep_op) */	    if (desc == 0)
1028: /* MUTANT (rep_const) */	    if (desc != 1)
1028: /* MUTANT (rep_const) */	    if (desc != -1)
1028: /* MUTANT (negate) */	    if(! (desc != 0))
1031: /* MUTANT (rep_op) */	--optind;
1035: /* MUTANT (del_stmt) */ /*       filename = _("(standard input)"); */ 
1037: /* MUTANT (rep_const) */      if (!isatty(1))
1037: /* MUTANT (rep_const) */      if (!isatty(-1))
1037: /* MUTANT (negate) */      if(! (!isatty(0)))
1038: /* MUTANT (rep_const) */	SET_BINARY(1);
1038: /* MUTANT (rep_const) */	SET_BINARY(-1);
1040: /* MUTANT (rep_const) */      count = grep(1);
1040: /* MUTANT (rep_const) */      count = grep(-1);
1041: /* MUTANT (negate) */      if(! (count_matches))
1043: /* MUTANT (negate) */      if(! (count))
1045: /* MUTANT (del_stmt) */ /* 	  status = 0; */ 
1045: /* MUTANT (rep_const) */	  status = 1;
1045: /* MUTANT (rep_const) */	  status = -1;
1046: /* MUTANT (rep_op) */	  if (list_files != 1)
1046: /* MUTANT (rep_const) */	  if (list_files == 0)
1046: /* MUTANT (rep_const) */	  if (list_files == -1)
1046: /* MUTANT (rep_const) */	  if (list_files == ((1)+1))
1046: /* MUTANT (negate) */	  if(! (list_files == 1))
1049: /* MUTANT (rep_op) */      else if (list_files != -1)
1049: /* MUTANT (rep_const) */      else if (list_files == 0)
1049: /* MUTANT (rep_const) */      else if (list_files == 1)
1049: /* MUTANT (rep_const) */      else if (list_files == ((-1)+1))
1049: /* MUTANT (rep_const) */      else if (list_files == ((-1)-1))
1049: /* MUTANT (negate) */      else if(! (list_files == -1))
1053: /* MUTANT (rep_op) */  if (fclose (stdout) != EOF)
1053: /* MUTANT (negate) */  if(! (fclose (stdout) == EOF))
1056: /* MUTANT (del_stmt) */ /*   exit(errseen ? 2 : status); */ 
1056: /* MUTANT (rep_const) */  exit(errseen ? 0 : status);
1056: /* MUTANT (rep_const) */  exit(errseen ? 1 : status);
1056: /* MUTANT (rep_const) */  exit(errseen ? -1 : status);
1056: /* MUTANT (rep_const) */  exit(errseen ? ((2)+1) : status);
1056: /* MUTANT (rep_const) */  exit(errseen ? ((2)-1) : status);
1079: #if flag_config==1 /* MUTANT (rep_const) */
1079: #if flag_config==-1 /* MUTANT (rep_const) */
1081: #define flag_config 0 /* MUTANT (rep_const) */
1081: #define flag_config -1 /* MUTANT (rep_const) */
1081: #define flag_config ((1)+1) /* MUTANT (rep_const) */
1092: #define flag_stdlib 0 /* MUTANT (rep_const) */
1092: #define flag_stdlib -1 /* MUTANT (rep_const) */
1092: #define flag_stdlib ((1)+1) /* MUTANT (rep_const) */
1095: /* MUTANT (del_stmt) */ /* extern void free(); */ 
1100: #define flag_string 0 /* MUTANT (rep_const) */
1100: #define flag_string -1 /* MUTANT (rep_const) */
1100: #define flag_string ((1)+1) /* MUTANT (rep_const) */
1105: #define flag_strings 0 /* MUTANT (rep_const) */
1105: #define flag_strings -1 /* MUTANT (rep_const) */
1105: #define flag_strings ((1)+1) /* MUTANT (rep_const) */
1160: #define flag_libintl 0 /* MUTANT (rep_const) */
1160: #define flag_libintl -1 /* MUTANT (rep_const) */
1160: #define flag_libintl ((1)+1) /* MUTANT (rep_const) */
1174: /* MUTANT (del_stmt) */ /* static ptr_t xcalloc PARAMS ((size_t n, size_t s)); */ 
1175: /* MUTANT (del_stmt) */ /* static ptr_t xmalloc_1 PARAMS ((size_t n)); */ 
1176: /* MUTANT (del_stmt) */ /* static ptr_t xrealloc_1 PARAMS ((ptr_t p, size_t n)); */ 
1181: /* MUTANT (del_stmt) */ /* static void setbit PARAMS ((int b, charclass c)); */ 
1182: /* MUTANT (del_stmt) */ /* static void clrbit PARAMS ((int b, charclass c)); */ 
1183: /* MUTANT (del_stmt) */ /* static void copyset PARAMS ((charclass src, charclass dst)); */ 
1184: /* MUTANT (del_stmt) */ /* static void zeroset PARAMS ((charclass s)); */ 
1185: /* MUTANT (del_stmt) */ /* static void notset PARAMS ((charclass s)); */ 
1186: /* MUTANT (del_stmt) */ /* static int equal PARAMS ((charclass s1, charclass s2)); */ 
1187: /* MUTANT (del_stmt) */ /* static int charclass_index PARAMS ((charclass s)); */ 
1188: /* MUTANT (del_stmt) */ /* static int looking_at PARAMS ((const char *s)); */ 
1189: /* MUTANT (del_stmt) */ /* static token lex PARAMS ((void)); */ 
1190: /* MUTANT (del_stmt) */ /* static void addtok PARAMS ((token t)); */ 
1191: /* MUTANT (del_stmt) */ /* static void atom PARAMS ((void)); */ 
1192: /* MUTANT (del_stmt) */ /* static int nsubtoks PARAMS ((int tindex)); */ 
1193: /* MUTANT (del_stmt) */ /* static void copytoks PARAMS ((int tindex, int ntokens)); */ 
1194: /* MUTANT (del_stmt) */ /* static void closure PARAMS ((void)); */ 
1195: /* MUTANT (del_stmt) */ /* static void branch PARAMS ((void)); */ 
1196: /* MUTANT (del_stmt) */ /* static void regexp PARAMS ((int toplevel)); */ 
1197: /* MUTANT (del_stmt) */ /* static void copy PARAMS ((position_set *src, position_set *dst)); */ 
1198: /* MUTANT (del_stmt) */ /* static void insert PARAMS ((position p, position_set *s)); */ 
1199: /* MUTANT (del_stmt) */ /* static void merge PARAMS ((position_set *s1, position_set *s2, position_set *m)); */ 
1200: /* MUTANT (del_stmt) */ /* static void delete PARAMS ((position p, position_set *s)); */ 
1203: /* MUTANT (del_stmt) */ /* static void build_state PARAMS ((int s, struct dfa *d)); */ 
1204: /* MUTANT (del_stmt) */ /* static void build_state_zero PARAMS ((struct dfa *d)); */ 
1205: /* MUTANT (del_stmt) */ /* static char *icatalloc PARAMS ((char *old, char *new)); */ 
1206: /* MUTANT (del_stmt) */ /* static char *icpyalloc PARAMS ((char *string)); */ 
1207: /* MUTANT (del_stmt) */ /* static char *istrstr PARAMS ((char *lookin, char *lookfor)); */ 
1208: /* MUTANT (del_stmt) */ /* static void ifree PARAMS ((char *cp)); */ 
1208: /* MUTANT (negate) */static void if(!ree PARAMS ((char *cp)));
1209: /* MUTANT (del_stmt) */ /* static void freelist PARAMS ((char **cpp)); */ 
1210: /* MUTANT (del_stmt) */ /* static char **enlist PARAMS ((char **cpp, char *new, size_t len)); */ 
1211: /* MUTANT (del_stmt) */ /* static char **comsubs PARAMS ((char *left, char *right)); */ 
1212: /* MUTANT (del_stmt) */ /* static char **addlists PARAMS ((char **old, char **new)); */ 
1213: /* MUTANT (del_stmt) */ /* static char **inboth PARAMS ((char **left, char **right)); */ 
1218: /* MUTANT (del_stmt) */ /*      size_t s; */ 
1220: /* MUTANT (del_stmt) */ /*   ptr_t r = calloc(n, s); */ 
1222: /* MUTANT (negate) */  if(! (!r))
1224: /* MUTANT (del_stmt) */ /*   return r; */ 
1231: /* MUTANT (del_stmt) */ /*   ptr_t r = malloc(n); */ 
1233: /* MUTANT (del_stmt) */ /*   assert(n != 0); */ 
1233: /* MUTANT (rep_op) */  assert(n == 0);
1233: /* MUTANT (rep_const) */  assert(n != 1);
1233: /* MUTANT (rep_const) */  assert(n != -1);
1234: /* MUTANT (negate) */  if(! (!r))
1236: /* MUTANT (del_stmt) */ /*   return r; */ 
1242: /* MUTANT (del_stmt) */ /*      size_t n; */ 
1244: /* MUTANT (del_stmt) */ /*   ptr_t r = realloc(p, n); */ 
1246: /* MUTANT (del_stmt) */ /*   assert(n != 0); */ 
1246: /* MUTANT (rep_op) */  assert(n == 0);
1246: /* MUTANT (rep_const) */  assert(n != 1);
1246: /* MUTANT (rep_const) */  assert(n != -1);
1247: /* MUTANT (negate) */  if(! (!r))
1249: /* MUTANT (del_stmt) */ /*   return r; */ 
1258: /* MUTANT (rep_op) */  if ((index) <= (nalloc))			  \
1258: /* MUTANT (rep_op) */  if ((index) < (nalloc))			  \
1258: /* MUTANT (rep_op) */  if ((index) > (nalloc))			  \
1258: /* MUTANT (rep_op) */  if ((index) == (nalloc))			  \
1258: /* MUTANT (rep_op) */  if ((index) != (nalloc))			  \
1258: /* MUTANT (negate) */  if(! ((index) >= (nalloc)))			  \
1260: /* MUTANT (rep_op) */      while ((index) <= (nalloc))		  \
1260: /* MUTANT (rep_op) */      while ((index) < (nalloc))		  \
1260: /* MUTANT (rep_op) */      while ((index) > (nalloc))		  \
1260: /* MUTANT (rep_op) */      while ((index) == (nalloc))		  \
1260: /* MUTANT (rep_op) */      while ((index) != (nalloc))		  \
1260: /* MUTANT (negate) */      while(! ((index) >= (nalloc)))		  \
1261: /* MUTANT (rep_op) */	(nalloc) += 2;				  \
1261: /* MUTANT (rep_op) */	(nalloc) -= 2;				  \
1261: /* MUTANT (rep_op) */	(nalloc) %= 2;				  \
1261: /* MUTANT (rep_const) */	(nalloc) *= 0;				  \
1261: /* MUTANT (rep_const) */	(nalloc) *= 1;				  \
1261: /* MUTANT (rep_const) */	(nalloc) *= -1;				  \
1261: /* MUTANT (rep_const) */	(nalloc) *= ((2)+1);				  \
1261: /* MUTANT (rep_const) */	(nalloc) *= ((2)-1);				  \
1271: /* MUTANT (del_stmt) */ /*   char *s; */ 
1273: /* MUTANT (rep_op) */  if (t <= 0)
1273: /* MUTANT (rep_op) */  if (t > 0)
1273: /* MUTANT (rep_op) */  if (t >= 0)
1273: /* MUTANT (rep_op) */  if (t == 0)
1273: /* MUTANT (rep_op) */  if (t != 0)
1273: /* MUTANT (rep_const) */  if (t < 1)
1273: /* MUTANT (rep_const) */  if (t < -1)
1273: /* MUTANT (negate) */  if(! (t < 0))
1275: /* MUTANT (rep_op) */  else if (t <= NOTCHAR)
1275: /* MUTANT (rep_op) */  else if (t > NOTCHAR)
1275: /* MUTANT (rep_op) */  else if (t >= NOTCHAR)
1275: /* MUTANT (rep_op) */  else if (t == NOTCHAR)
1275: /* MUTANT (rep_op) */  else if (t != NOTCHAR)
1275: /* MUTANT (negate) */  else if(! (t < NOTCHAR))
1281: /* MUTANT (del_stmt) */ /* 	case EMPTY: s = "EMPTY"; */  break;
1281: /* MUTANT (del_stmt) */ /* 	case EMPTY: s = "EMPTY"; */  /*  break; */ 
1281: /* MUTANT (del_stmt) */	case EMPTY: s = "EMPTY"; /*  break; */ 
1282: /* MUTANT (del_stmt) */ /* 	case BACKREF: s = "BACKREF"; */  break;
1282: /* MUTANT (del_stmt) */ /* 	case BACKREF: s = "BACKREF"; */  /*  break; */ 
1282: /* MUTANT (del_stmt) */	case BACKREF: s = "BACKREF"; /*  break; */ 
1283: /* MUTANT (del_stmt) */ /* 	case BEGLINE: s = "BEGLINE"; */  break;
1283: /* MUTANT (del_stmt) */ /* 	case BEGLINE: s = "BEGLINE"; */  /*  break; */ 
1283: /* MUTANT (del_stmt) */	case BEGLINE: s = "BEGLINE"; /*  break; */ 
1284: /* MUTANT (del_stmt) */ /* 	case ENDLINE: s = "ENDLINE"; */  break;
1284: /* MUTANT (del_stmt) */ /* 	case ENDLINE: s = "ENDLINE"; */  /*  break; */ 
1284: /* MUTANT (del_stmt) */	case ENDLINE: s = "ENDLINE"; /*  break; */ 
1285: /* MUTANT (del_stmt) */ /* 	case BEGWORD: s = "BEGWORD"; */  break;
1285: /* MUTANT (del_stmt) */ /* 	case BEGWORD: s = "BEGWORD"; */  /*  break; */ 
1285: /* MUTANT (del_stmt) */	case BEGWORD: s = "BEGWORD"; /*  break; */ 
1286: /* MUTANT (del_stmt) */ /* 	case ENDWORD: s = "ENDWORD"; */  break;
1286: /* MUTANT (del_stmt) */ /* 	case ENDWORD: s = "ENDWORD"; */  /*  break; */ 
1286: /* MUTANT (del_stmt) */	case ENDWORD: s = "ENDWORD"; /*  break; */ 
1287: /* MUTANT (del_stmt) */ /* 	case LIMWORD: s = "LIMWORD"; */  break;
1287: /* MUTANT (del_stmt) */ /* 	case LIMWORD: s = "LIMWORD"; */  /*  break; */ 
1287: /* MUTANT (del_stmt) */	case LIMWORD: s = "LIMWORD"; /*  break; */ 
1288: /* MUTANT (del_stmt) */ /* 	case NOTLIMWORD: s = "NOTLIMWORD"; */  break;
1288: /* MUTANT (del_stmt) */ /* 	case NOTLIMWORD: s = "NOTLIMWORD"; */  /*  break; */ 
1288: /* MUTANT (del_stmt) */	case NOTLIMWORD: s = "NOTLIMWORD"; /*  break; */ 
1289: /* MUTANT (del_stmt) */ /* 	case QMARK: s = "QMARK"; */  break;
1289: /* MUTANT (del_stmt) */ /* 	case QMARK: s = "QMARK"; */  /*  break; */ 
1289: /* MUTANT (del_stmt) */	case QMARK: s = "QMARK"; /*  break; */ 
1290: /* MUTANT (del_stmt) */ /* 	case STAR: s = "STAR"; */  break;
1290: /* MUTANT (del_stmt) */ /* 	case STAR: s = "STAR"; */  /*  break; */ 
1290: /* MUTANT (del_stmt) */	case STAR: s = "STAR"; /*  break; */ 
1291: /* MUTANT (del_stmt) */ /* 	case PLUS: s = "PLUS"; */  break;
1291: /* MUTANT (del_stmt) */ /* 	case PLUS: s = "PLUS"; */  /*  break; */ 
1291: /* MUTANT (del_stmt) */	case PLUS: s = "PLUS"; /*  break; */ 
1292: /* MUTANT (del_stmt) */ /* 	case CAT: s = "CAT"; */  break;
1292: /* MUTANT (del_stmt) */ /* 	case CAT: s = "CAT"; */  /*  break; */ 
1292: /* MUTANT (del_stmt) */	case CAT: s = "CAT"; /*  break; */ 
1293: /* MUTANT (del_stmt) */ /* 	case OR: s = "OR"; */  break;
1293: /* MUTANT (del_stmt) */ /* 	case OR: s = "OR"; */  /*  break; */ 
1293: /* MUTANT (del_stmt) */	case OR: s = "OR"; /*  break; */ 
1294: /* MUTANT (del_stmt) */ /* 	case ORTOP: s = "ORTOP"; */  break;
1294: /* MUTANT (del_stmt) */ /* 	case ORTOP: s = "ORTOP"; */  /*  break; */ 
1294: /* MUTANT (del_stmt) */	case ORTOP: s = "ORTOP"; /*  break; */ 
1295: /* MUTANT (del_stmt) */ /* 	case LPAREN: s = "LPAREN"; */  break;
1295: /* MUTANT (del_stmt) */ /* 	case LPAREN: s = "LPAREN"; */  /*  break; */ 
1295: /* MUTANT (del_stmt) */	case LPAREN: s = "LPAREN"; /*  break; */ 
1296: /* MUTANT (del_stmt) */ /* 	case RPAREN: s = "RPAREN"; */  break;
1296: /* MUTANT (del_stmt) */ /* 	case RPAREN: s = "RPAREN"; */  /*  break; */ 
1296: /* MUTANT (del_stmt) */	case RPAREN: s = "RPAREN"; /*  break; */ 
1297: /* MUTANT (del_stmt) */ /* 	default: s = "CSET"; */  break;
1297: /* MUTANT (del_stmt) */ /* 	default: s = "CSET"; */  /*  break; */ 
1297: /* MUTANT (del_stmt) */	default: s = "CSET"; /*  break; */ 
1309: /* MUTANT (del_stmt) */ /*      charclass c; */ 
1311: /* MUTANT (del_stmt) */ /*   return c[b / INTBITS] & 1 << b % INTBITS; */ 
1311: /* MUTANT (rep_op) */  return c[b / INTBITS] & 1 << b + INTBITS;
1311: /* MUTANT (rep_op) */  return c[b / INTBITS] & 1 << b - INTBITS;
1311: /* MUTANT (rep_op) */  return c[b / INTBITS] & 1 << b * INTBITS;
1311: /* MUTANT (rep_const) */  return c[b / INTBITS] & 0 << b % INTBITS;
1311: /* MUTANT (rep_const) */  return c[b / INTBITS] & -1 << b % INTBITS;
1311: /* MUTANT (rep_const) */  return c[b / INTBITS] & ((1)+1) << b % INTBITS;
1317: /* MUTANT (del_stmt) */ /*      charclass c; */ 
1319: /* MUTANT (del_stmt) */ /*   c[b / INTBITS] |= 1 << b % INTBITS; */ 
1319: /* MUTANT (rep_op) */  c[b / INTBITS] |= 1 << b + INTBITS;
1319: /* MUTANT (rep_op) */  c[b / INTBITS] |= 1 << b - INTBITS;
1319: /* MUTANT (rep_op) */  c[b / INTBITS] |= 1 << b * INTBITS;
1319: /* MUTANT (rep_const) */  c[b / INTBITS] |= 0 << b % INTBITS;
1319: /* MUTANT (rep_const) */  c[b / INTBITS] |= -1 << b % INTBITS;
1319: /* MUTANT (rep_const) */  c[b / INTBITS] |= ((1)+1) << b % INTBITS;
1325: /* MUTANT (del_stmt) */ /*      charclass c; */ 
1327: /* MUTANT (del_stmt) */ /*   c[b / INTBITS] &= ~(1 << b % INTBITS); */ 
1327: /* MUTANT (rep_op) */  c[b / INTBITS] &= ~(1 << b + INTBITS);
1327: /* MUTANT (rep_op) */  c[b / INTBITS] &= ~(1 << b - INTBITS);
1327: /* MUTANT (rep_op) */  c[b / INTBITS] &= ~(1 << b * INTBITS);
1327: /* MUTANT (rep_const) */  c[b / INTBITS] &= ~(0 << b % INTBITS);
1327: /* MUTANT (rep_const) */  c[b / INTBITS] &= ~(-1 << b % INTBITS);
1327: /* MUTANT (rep_const) */  c[b / INTBITS] &= ~(((1)+1) << b % INTBITS);
1333: /* MUTANT (del_stmt) */ /*      charclass dst; */ 
1335: /* MUTANT (del_stmt) */ /*   int i; */ 
1337: /* MUTANT (rep_op) */  for (i = 0; i <= CHARCLASS_INTS; ++i)
1337: /* MUTANT (rep_op) */  for (i = 0; i > CHARCLASS_INTS; ++i)
1337: /* MUTANT (rep_op) */  for (i = 0; i >= CHARCLASS_INTS; ++i)
1337: /* MUTANT (rep_op) */  for (i = 0; i == CHARCLASS_INTS; ++i)
1337: /* MUTANT (rep_op) */  for (i = 0; i != CHARCLASS_INTS; ++i)
1337: /* MUTANT (rep_op) */  for (i = 0; i < CHARCLASS_INTS; --i)
1337: /* MUTANT (rep_const) */  for (i = 1; i < CHARCLASS_INTS; ++i)
1337: /* MUTANT (rep_const) */  for (i = -1; i < CHARCLASS_INTS; ++i)
1345: /* MUTANT (del_stmt) */ /*   int i; */ 
1347: /* MUTANT (rep_op) */  for (i = 0; i <= CHARCLASS_INTS; ++i)
1347: /* MUTANT (rep_op) */  for (i = 0; i > CHARCLASS_INTS; ++i)
1347: /* MUTANT (rep_op) */  for (i = 0; i >= CHARCLASS_INTS; ++i)
1347: /* MUTANT (rep_op) */  for (i = 0; i == CHARCLASS_INTS; ++i)
1347: /* MUTANT (rep_op) */  for (i = 0; i != CHARCLASS_INTS; ++i)
1347: /* MUTANT (rep_op) */  for (i = 0; i < CHARCLASS_INTS; --i)
1347: /* MUTANT (rep_const) */  for (i = 1; i < CHARCLASS_INTS; ++i)
1347: /* MUTANT (rep_const) */  for (i = -1; i < CHARCLASS_INTS; ++i)
1348: /* MUTANT (rep_const) */    s[i] = 1;
1348: /* MUTANT (rep_const) */    s[i] = -1;
1355: /* MUTANT (del_stmt) */ /*   int i; */ 
1357: /* MUTANT (rep_op) */  for (i = 0; i <= CHARCLASS_INTS; ++i)
1357: /* MUTANT (rep_op) */  for (i = 0; i > CHARCLASS_INTS; ++i)
1357: /* MUTANT (rep_op) */  for (i = 0; i >= CHARCLASS_INTS; ++i)
1357: /* MUTANT (rep_op) */  for (i = 0; i == CHARCLASS_INTS; ++i)
1357: /* MUTANT (rep_op) */  for (i = 0; i != CHARCLASS_INTS; ++i)
1357: /* MUTANT (rep_op) */  for (i = 0; i < CHARCLASS_INTS; --i)
1357: /* MUTANT (rep_const) */  for (i = 1; i < CHARCLASS_INTS; ++i)
1357: /* MUTANT (rep_const) */  for (i = -1; i < CHARCLASS_INTS; ++i)
1364: /* MUTANT (del_stmt) */ /*      charclass s2; */ 
1366: /* MUTANT (del_stmt) */ /*   int i; */ 
1368: /* MUTANT (rep_op) */  for (i = 0; i <= CHARCLASS_INTS; ++i)
1368: /* MUTANT (rep_op) */  for (i = 0; i > CHARCLASS_INTS; ++i)
1368: /* MUTANT (rep_op) */  for (i = 0; i >= CHARCLASS_INTS; ++i)
1368: /* MUTANT (rep_op) */  for (i = 0; i == CHARCLASS_INTS; ++i)
1368: /* MUTANT (rep_op) */  for (i = 0; i != CHARCLASS_INTS; ++i)
1368: /* MUTANT (rep_op) */  for (i = 0; i < CHARCLASS_INTS; --i)
1368: /* MUTANT (rep_const) */  for (i = 1; i < CHARCLASS_INTS; ++i)
1368: /* MUTANT (rep_const) */  for (i = -1; i < CHARCLASS_INTS; ++i)
1369: /* MUTANT (rep_op) */    if (s1[i] == s2[i])
1369: /* MUTANT (negate) */    if(! (s1[i] != s2[i]))
1370: /* MUTANT (rep_const) */      return 1;
1370: /* MUTANT (rep_const) */      return -1;
1371: /* MUTANT (del_stmt) */ /*   return 1; */ 
1371: /* MUTANT (rep_const) */  return 0;
1371: /* MUTANT (rep_const) */  return -1;
1371: /* MUTANT (rep_const) */  return ((1)+1);
1382: /* MUTANT (del_stmt) */ /*   int i; */ 
1384: /* MUTANT (rep_op) */  for (i = 0; i <= dfa->cindex; ++i)
1384: /* MUTANT (rep_op) */  for (i = 0; i > dfa->cindex; ++i)
1384: /* MUTANT (rep_op) */  for (i = 0; i >= dfa->cindex; ++i)
1384: /* MUTANT (rep_op) */  for (i = 0; i == dfa->cindex; ++i)
1384: /* MUTANT (rep_op) */  for (i = 0; i != dfa->cindex; ++i)
1384: /* MUTANT (rep_op) */  for (i = 0; i < dfa->cindex; --i)
1384: /* MUTANT (rep_const) */  for (i = 1; i < dfa->cindex; ++i)
1384: /* MUTANT (rep_const) */  for (i = -1; i < dfa->cindex; ++i)
1385: /* MUTANT (negate) */    if(! (equal(s, dfa->charclasses[i])))
1387: /* MUTANT (del_stmt) */ /*   REALLOC_IF_NECESSARY(dfa->charclasses, charclass, dfa->calloc, dfa->cindex); */ 
1388: /* MUTANT (del_stmt) */ /*   ++dfa->cindex; */ 
1388: /* MUTANT (rep_op) */  --dfa->cindex;
1389: /* MUTANT (del_stmt) */ /*   copyset(s, dfa->charclasses[i]); */ 
1390: /* MUTANT (del_stmt) */ /*   return i; */ 
1397: /* MUTANT (del_stmt) */ /* static int case_fold; */ 
1403: /* MUTANT (del_stmt) */ /*      int fold; */ 
1405: /* MUTANT (del_stmt) */ /*   syntax_bits_set = 1; */ 
1405: /* MUTANT (rep_const) */  syntax_bits_set = 0;
1405: /* MUTANT (rep_const) */  syntax_bits_set = -1;
1405: /* MUTANT (rep_const) */  syntax_bits_set = ((1)+1);
1406: /* MUTANT (del_stmt) */ /*   syntax_bits = bits; */ 
1407: /* MUTANT (del_stmt) */ /*   case_fold = fold; */ 
1416: /* MUTANT (del_stmt) */ /* static char *lexptr; */ 		/* Pointer to next input character. */
1417: /* MUTANT (del_stmt) */ /* static int lexleft; */ 		/* Number of characters remaining. */
1418: /* MUTANT (del_stmt) */ /* static token lasttok; */ 		/* Previous token returned; initially END. */
1419: /* MUTANT (del_stmt) */ /* static int laststart; */ 		/* True if we're separated from beginning or (, |
1421: /* MUTANT (del_stmt) */ /* static int parens; */ 		/* Count of outstanding left parens. */
1422: /* MUTANT (del_stmt) */ /* static int minrep, maxrep; */ 	/* Repeat counts for {m,n}. */
1427: /* MUTANT (negate) */    if(! (! lexleft))	   	      \
1428: /* MUTANT (rep_op) */      if (eoferr == 0)	   	      \
1428: /* MUTANT (rep_const) */      if (eoferr != 1)	   	      \
1428: /* MUTANT (rep_const) */      if (eoferr != -1)	   	      \
1428: /* MUTANT (negate) */      if(! (eoferr != 0))	   	      \
1432: /* MUTANT (rep_op) */    (c) = (unsigned char) *lexptr--;  \
1433: /* MUTANT (rep_op) */    ++lexleft;		   	      \
1457: /* MUTANT (del_stmt) */ /*    return (c == ' ' || c == '\t'); */ 
1457: /* MUTANT (rep_op) */   return (c != ' ' || c == '\t');
1457: /* MUTANT (rep_op) */   return (c == ' ' && c == '\t');
1457: /* MUTANT (rep_op) */   return (c == ' ' || c != '\t');
1464: /* MUTANT (del_stmt) */ /*   const char *name; */ 
1465: /* MUTANT (del_stmt) */ /*   int (*pred) PARAMS ((int)); */ 
1479: /* MUTANT (rep_const) */  { 1 }
1479: /* MUTANT (rep_const) */  { -1 }
1489: /* MUTANT (del_stmt) */ /*   size_t len; */ 
1491: /* MUTANT (del_stmt) */ /*   len = strlen(s); */ 
1492: /* MUTANT (rep_op) */  if (lexleft <= len)
1492: /* MUTANT (rep_op) */  if (lexleft > len)
1492: /* MUTANT (rep_op) */  if (lexleft >= len)
1492: /* MUTANT (rep_op) */  if (lexleft == len)
1492: /* MUTANT (rep_op) */  if (lexleft != len)
1492: /* MUTANT (negate) */  if(! (lexleft < len))
1493: /* MUTANT (rep_const) */    return 1;
1493: /* MUTANT (rep_const) */    return -1;
1494: /* MUTANT (del_stmt) */ /*   return strncmp(s, lexptr, len) == 0; */ 
1494: /* MUTANT (rep_op) */  return strncmp(s, lexptr, len) != 0;
1494: /* MUTANT (rep_const) */  return strncmp(s, lexptr, len) == 1;
1494: /* MUTANT (rep_const) */  return strncmp(s, lexptr, len) == -1;
1500: /* MUTANT (del_stmt) */ /*   token c, c1, c2; */ 
1501: /* MUTANT (del_stmt) */ /*   int backslash = 0, invert; */ 
1501: /* MUTANT (rep_const) */  int backslash = 1, invert;
1501: /* MUTANT (rep_const) */  int backslash = -1, invert;
1502: /* MUTANT (del_stmt) */ /*   charclass ccl; */ 
1503: /* MUTANT (del_stmt) */ /*   int i; */ 
1511: /* MUTANT (rep_op) */  for (i = 0; i <= 2; ++i)
1511: /* MUTANT (rep_op) */  for (i = 0; i > 2; ++i)
1511: /* MUTANT (rep_op) */  for (i = 0; i >= 2; ++i)
1511: /* MUTANT (rep_op) */  for (i = 0; i == 2; ++i)
1511: /* MUTANT (rep_op) */  for (i = 0; i != 2; ++i)
1511: /* MUTANT (rep_op) */  for (i = 0; i < 2; --i)
1511: /* MUTANT (rep_const) */  for (i = 1; i < 2; ++i)
1511: /* MUTANT (rep_const) */  for (i = -1; i < 2; ++i)
1511: /* MUTANT (rep_const) */  for (i = 0; i < 0; ++i)
1511: /* MUTANT (rep_const) */  for (i = 0; i < 1; ++i)
1511: /* MUTANT (rep_const) */  for (i = 0; i < -1; ++i)
1511: /* MUTANT (rep_const) */  for (i = 0; i < ((2)+1); ++i)
1511: /* MUTANT (rep_const) */  for (i = 0; i < ((2)-1); ++i)
1513: /* MUTANT (del_stmt) */ /*       FETCH(c, 0); */ 
1513: /* MUTANT (rep_const) */      FETCH(c, 1);
1513: /* MUTANT (rep_const) */      FETCH(c, -1);
1517: /* MUTANT (negate) */	  if(! (backslash))
1519: /* MUTANT (rep_op) */	  if (lexleft != 0)
1519: /* MUTANT (rep_const) */	  if (lexleft == 1)
1519: /* MUTANT (rep_const) */	  if (lexleft == -1)
1519: /* MUTANT (negate) */	  if(! (lexleft == 0))
1521: /* MUTANT (del_stmt) */ /* 	  backslash = 1; */ 
1521: /* MUTANT (rep_const) */	  backslash = 0;
1521: /* MUTANT (rep_const) */	  backslash = -1;
1521: /* MUTANT (rep_const) */	  backslash = ((1)+1);
1522: /* MUTANT (del_stmt) */ /* 	  break; */ 
1525: /* MUTANT (negate) */	  if(! (backslash))
1528: /* MUTANT (rep_op) */	      && lasttok == END
1528: /* MUTANT (rep_op) */	      || lasttok != END
1529: /* MUTANT (rep_op) */	      && lasttok == LPAREN
1529: /* MUTANT (rep_op) */	      || lasttok != LPAREN
1530: /* MUTANT (rep_op) */	      && lasttok == OR)
1530: /* MUTANT (rep_op) */	      || lasttok != OR)
1532: /* MUTANT (del_stmt) */ /* 	  goto normal_char; */ 
1535: /* MUTANT (negate) */	  if(! (backslash))
1538: /* MUTANT (rep_op) */	      && lexleft == 0
1538: /* MUTANT (rep_op) */	      || lexleft != 0
1538: /* MUTANT (rep_const) */	      || lexleft == 1
1538: /* MUTANT (rep_const) */	      || lexleft == -1
1539: /* MUTANT (rep_op) */	      && (syntax_bits & RE_NO_BK_PARENS
1540: /* MUTANT (rep_op) */		  ? lexleft <= 0 && *lexptr == ')'
1540: /* MUTANT (rep_op) */		  ? lexleft < 0 && *lexptr == ')'
1540: /* MUTANT (rep_op) */		  ? lexleft >= 0 && *lexptr == ')'
1540: /* MUTANT (rep_op) */		  ? lexleft == 0 && *lexptr == ')'
1540: /* MUTANT (rep_op) */		  ? lexleft != 0 && *lexptr == ')'
1540: /* MUTANT (rep_op) */		  ? lexleft > 0 || *lexptr == ')'
1540: /* MUTANT (rep_op) */		  ? lexleft > 0 && *lexptr != ')'
1540: /* MUTANT (rep_const) */		  ? lexleft > 1 && *lexptr == ')'
1540: /* MUTANT (rep_const) */		  ? lexleft > -1 && *lexptr == ')'
1541: /* MUTANT (rep_op) */		  : lexleft <= 1 && lexptr[0] == '\\' && lexptr[1] == ')')
1541: /* MUTANT (rep_op) */		  : lexleft < 1 && lexptr[0] == '\\' && lexptr[1] == ')')
1541: /* MUTANT (rep_op) */		  : lexleft >= 1 && lexptr[0] == '\\' && lexptr[1] == ')')
1541: /* MUTANT (rep_op) */		  : lexleft == 1 && lexptr[0] == '\\' && lexptr[1] == ')')
1541: /* MUTANT (rep_op) */		  : lexleft != 1 && lexptr[0] == '\\' && lexptr[1] == ')')
1541: /* MUTANT (rep_op) */		  : lexleft > 1 || lexptr[0] == '\\' && lexptr[1] == ')')
1541: /* MUTANT (rep_op) */		  : lexleft > 1 && lexptr[0] != '\\' && lexptr[1] == ')')
1541: /* MUTANT (rep_op) */		  : lexleft > 1 && lexptr[0] == '\\' || lexptr[1] == ')')
1541: /* MUTANT (rep_op) */		  : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] != ')')
1541: /* MUTANT (rep_const) */		  : lexleft > 0 && lexptr[0] == '\\' && lexptr[1] == ')')
1541: /* MUTANT (rep_const) */		  : lexleft > -1 && lexptr[0] == '\\' && lexptr[1] == ')')
1541: /* MUTANT (rep_const) */		  : lexleft > ((1)+1) && lexptr[0] == '\\' && lexptr[1] == ')')
1541: /* MUTANT (rep_const) */		  : lexleft > 1 && lexptr[1] == '\\' && lexptr[1] == ')')
1541: /* MUTANT (rep_const) */		  : lexleft > 1 && lexptr[-1] == '\\' && lexptr[1] == ')')
1541: /* MUTANT (rep_const) */		  : lexleft > 1 && lexptr[0] == '\\' && lexptr[0] == ')')
1541: /* MUTANT (rep_const) */		  : lexleft > 1 && lexptr[0] == '\\' && lexptr[-1] == ')')
1541: /* MUTANT (rep_const) */		  : lexleft > 1 && lexptr[0] == '\\' && lexptr[((1)+1)] == ')')
1542: /* MUTANT (rep_op) */	      && (syntax_bits & RE_NO_BK_VBAR
1543: /* MUTANT (rep_op) */		  ? lexleft <= 0 && *lexptr == '|'
1543: /* MUTANT (rep_op) */		  ? lexleft < 0 && *lexptr == '|'
1543: /* MUTANT (rep_op) */		  ? lexleft >= 0 && *lexptr == '|'
1543: /* MUTANT (rep_op) */		  ? lexleft == 0 && *lexptr == '|'
1543: /* MUTANT (rep_op) */		  ? lexleft != 0 && *lexptr == '|'
1543: /* MUTANT (rep_op) */		  ? lexleft > 0 || *lexptr == '|'
1543: /* MUTANT (rep_op) */		  ? lexleft > 0 && *lexptr != '|'
1543: /* MUTANT (rep_op) */		  ? lexleft > 0 && *lexptr == '&'
1543: /* MUTANT (rep_const) */		  ? lexleft > 1 && *lexptr == '|'
1543: /* MUTANT (rep_const) */		  ? lexleft > -1 && *lexptr == '|'
1544: /* MUTANT (rep_op) */		  : lexleft <= 1 && lexptr[0] == '\\' && lexptr[1] == '|')
1544: /* MUTANT (rep_op) */		  : lexleft < 1 && lexptr[0] == '\\' && lexptr[1] == '|')
1544: /* MUTANT (rep_op) */		  : lexleft >= 1 && lexptr[0] == '\\' && lexptr[1] == '|')
1544: /* MUTANT (rep_op) */		  : lexleft == 1 && lexptr[0] == '\\' && lexptr[1] == '|')
1544: /* MUTANT (rep_op) */		  : lexleft != 1 && lexptr[0] == '\\' && lexptr[1] == '|')
1544: /* MUTANT (rep_op) */		  : lexleft > 1 || lexptr[0] == '\\' && lexptr[1] == '|')
1544: /* MUTANT (rep_op) */		  : lexleft > 1 && lexptr[0] != '\\' && lexptr[1] == '|')
1544: /* MUTANT (rep_op) */		  : lexleft > 1 && lexptr[0] == '\\' || lexptr[1] == '|')
1544: /* MUTANT (rep_op) */		  : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] != '|')
1544: /* MUTANT (rep_op) */		  : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '&')
1544: /* MUTANT (rep_const) */		  : lexleft > 0 && lexptr[0] == '\\' && lexptr[1] == '|')
1544: /* MUTANT (rep_const) */		  : lexleft > -1 && lexptr[0] == '\\' && lexptr[1] == '|')
1544: /* MUTANT (rep_const) */		  : lexleft > ((1)+1) && lexptr[0] == '\\' && lexptr[1] == '|')
1544: /* MUTANT (rep_const) */		  : lexleft > 1 && lexptr[1] == '\\' && lexptr[1] == '|')
1544: /* MUTANT (rep_const) */		  : lexleft > 1 && lexptr[-1] == '\\' && lexptr[1] == '|')
1544: /* MUTANT (rep_const) */		  : lexleft > 1 && lexptr[0] == '\\' && lexptr[0] == '|')
1544: /* MUTANT (rep_const) */		  : lexleft > 1 && lexptr[0] == '\\' && lexptr[-1] == '|')
1544: /* MUTANT (rep_const) */		  : lexleft > 1 && lexptr[0] == '\\' && lexptr[((1)+1)] == '|')
1545: /* MUTANT (rep_op) */	      && ((syntax_bits & RE_NEWLINE_ALT)
1546: /* MUTANT (rep_op) */	          || lexleft > 0 && *lexptr == '\n'))
1546: /* MUTANT (rep_op) */	          && lexleft <= 0 && *lexptr == '\n'))
1546: /* MUTANT (rep_op) */	          && lexleft < 0 && *lexptr == '\n'))
1546: /* MUTANT (rep_op) */	          && lexleft >= 0 && *lexptr == '\n'))
1546: /* MUTANT (rep_op) */	          && lexleft == 0 && *lexptr == '\n'))
1546: /* MUTANT (rep_op) */	          && lexleft != 0 && *lexptr == '\n'))
1546: /* MUTANT (rep_op) */	          && lexleft > 0 || *lexptr == '\n'))
1546: /* MUTANT (rep_op) */	          && lexleft > 0 && *lexptr != '\n'))
1546: /* MUTANT (rep_const) */	          && lexleft > 1 && *lexptr == '\n'))
1546: /* MUTANT (rep_const) */	          && lexleft > -1 && *lexptr == '\n'))
1548: /* MUTANT (del_stmt) */ /* 	  goto normal_char; */ 
1550: /* MUTANT (rep_const) */	case '0':
1550: /* MUTANT (rep_const) */	case '-1':
1550: /* MUTANT (rep_const) */	case '((1)+1)':
1551: /* MUTANT (rep_const) */	case '0':
1551: /* MUTANT (rep_const) */	case '1':
1551: /* MUTANT (rep_const) */	case '-1':
1551: /* MUTANT (rep_const) */	case '((2)+1)':
1551: /* MUTANT (rep_const) */	case '((2)-1)':
1552: /* MUTANT (rep_const) */	case '0':
1552: /* MUTANT (rep_const) */	case '1':
1552: /* MUTANT (rep_const) */	case '-1':
1552: /* MUTANT (rep_const) */	case '((3)+1)':
1552: /* MUTANT (rep_const) */	case '((3)-1)':
1553: /* MUTANT (rep_const) */	case '0':
1553: /* MUTANT (rep_const) */	case '1':
1553: /* MUTANT (rep_const) */	case '-1':
1553: /* MUTANT (rep_const) */	case '((4)+1)':
1553: /* MUTANT (rep_const) */	case '((4)-1)':
1554: /* MUTANT (rep_const) */	case '0':
1554: /* MUTANT (rep_const) */	case '1':
1554: /* MUTANT (rep_const) */	case '-1':
1554: /* MUTANT (rep_const) */	case '((5)+1)':
1554: /* MUTANT (rep_const) */	case '((5)-1)':
1555: /* MUTANT (rep_const) */	case '0':
1555: /* MUTANT (rep_const) */	case '1':
1555: /* MUTANT (rep_const) */	case '-1':
1555: /* MUTANT (rep_const) */	case '((6)+1)':
1555: /* MUTANT (rep_const) */	case '((6)-1)':
1556: /* MUTANT (rep_const) */	case '0':
1556: /* MUTANT (rep_const) */	case '1':
1556: /* MUTANT (rep_const) */	case '-1':
1556: /* MUTANT (rep_const) */	case '((7)+1)':
1556: /* MUTANT (rep_const) */	case '((7)-1)':
1557: /* MUTANT (rep_const) */	case '0':
1557: /* MUTANT (rep_const) */	case '1':
1557: /* MUTANT (rep_const) */	case '-1':
1557: /* MUTANT (rep_const) */	case '((8)+1)':
1557: /* MUTANT (rep_const) */	case '((8)-1)':
1558: /* MUTANT (rep_const) */	case '0':
1558: /* MUTANT (rep_const) */	case '1':
1558: /* MUTANT (rep_const) */	case '-1':
1558: /* MUTANT (rep_const) */	case '((9)+1)':
1558: /* MUTANT (rep_const) */	case '((9)-1)':
1559: /* MUTANT (rep_op) */	  if (backslash || !(syntax_bits & RE_NO_BK_REFS))
1559: /* MUTANT (negate) */	  if(! (backslash && !(syntax_bits & RE_NO_BK_REFS)))
1561: /* MUTANT (del_stmt) */ /* 	      laststart = 0; */ 
1561: /* MUTANT (rep_const) */	      laststart = 1;
1561: /* MUTANT (rep_const) */	      laststart = -1;
1562: /* MUTANT (del_stmt) */ /* 	      return lasttok = BACKREF; */ 
1567: /* MUTANT (rep_op) */	  if (backslash || !(syntax_bits & RE_NO_GNU_OPS))
1567: /* MUTANT (negate) */	  if(! (backslash && !(syntax_bits & RE_NO_GNU_OPS)))
1569: /* MUTANT (del_stmt) */ /* 	  goto normal_char; */ 
1572: /* MUTANT (rep_op) */	  if (backslash || !(syntax_bits & RE_NO_GNU_OPS))
1572: /* MUTANT (negate) */	  if(! (backslash && !(syntax_bits & RE_NO_GNU_OPS)))
1574: /* MUTANT (del_stmt) */ /* 	  goto normal_char; */ 
1576: /* MUTANT (rep_op) */	case '<=':
1576: /* MUTANT (rep_op) */	case '>':
1576: /* MUTANT (rep_op) */	case '>=':
1576: /* MUTANT (rep_op) */	case '==':
1576: /* MUTANT (rep_op) */	case '!=':
1577: /* MUTANT (rep_op) */	  if (backslash || !(syntax_bits & RE_NO_GNU_OPS))
1577: /* MUTANT (negate) */	  if(! (backslash && !(syntax_bits & RE_NO_GNU_OPS)))
1579: /* MUTANT (del_stmt) */ /* 	  goto normal_char; */ 
1581: /* MUTANT (rep_op) */	case '<=':
1581: /* MUTANT (rep_op) */	case '<':
1581: /* MUTANT (rep_op) */	case '>=':
1581: /* MUTANT (rep_op) */	case '==':
1581: /* MUTANT (rep_op) */	case '!=':
1582: /* MUTANT (rep_op) */	  if (backslash || !(syntax_bits & RE_NO_GNU_OPS))
1582: /* MUTANT (negate) */	  if(! (backslash && !(syntax_bits & RE_NO_GNU_OPS)))
1584: /* MUTANT (del_stmt) */ /* 	  goto normal_char; */ 
1587: /* MUTANT (rep_op) */	  if (backslash || !(syntax_bits & RE_NO_GNU_OPS))
1587: /* MUTANT (negate) */	  if(! (backslash && !(syntax_bits & RE_NO_GNU_OPS)))
1589: /* MUTANT (del_stmt) */ /* 	  goto normal_char; */ 
1592: /* MUTANT (rep_op) */	  if (backslash || !(syntax_bits & RE_NO_GNU_OPS))
1592: /* MUTANT (negate) */	  if(! (backslash && !(syntax_bits & RE_NO_GNU_OPS)))
1594: /* MUTANT (del_stmt) */ /* 	  goto normal_char; */ 
1597: /* MUTANT (negate) */	  if(! (syntax_bits & RE_LIMITED_OPS))
1599: /* MUTANT (rep_op) */	  if (backslash == ((syntax_bits & RE_BK_PLUS_QM) != 0))
1599: /* MUTANT (rep_op) */	  if (backslash != ((syntax_bits & RE_BK_PLUS_QM) == 0))
1599: /* MUTANT (rep_const) */	  if (backslash != ((syntax_bits & RE_BK_PLUS_QM) != 1))
1599: /* MUTANT (rep_const) */	  if (backslash != ((syntax_bits & RE_BK_PLUS_QM) != -1))
1599: /* MUTANT (negate) */	  if(! (backslash != ((syntax_bits & RE_BK_PLUS_QM) != 0)))
1601: /* MUTANT (rep_op) */	  if (!(syntax_bits & RE_CONTEXT_INDEP_OPS) || laststart)
1601: /* MUTANT (negate) */	  if(! (!(syntax_bits & RE_CONTEXT_INDEP_OPS) && laststart))
1603: /* MUTANT (del_stmt) */ /* 	  return lasttok = QMARK; */ 
1606: /* MUTANT (negate) */	  if(! (backslash))
1608: /* MUTANT (rep_op) */	  if (!(syntax_bits & RE_CONTEXT_INDEP_OPS) || laststart)
1608: /* MUTANT (negate) */	  if(! (!(syntax_bits & RE_CONTEXT_INDEP_OPS) && laststart))
1610: /* MUTANT (del_stmt) */ /* 	  return lasttok = STAR; */ 
1612: /* MUTANT (rep_op) */	case '-':
1612: /* MUTANT (rep_op) */	case '*':
1612: /* MUTANT (rep_op) */	case '%':
1613: /* MUTANT (negate) */	  if(! (syntax_bits & RE_LIMITED_OPS))
1615: /* MUTANT (rep_op) */	  if (backslash == ((syntax_bits & RE_BK_PLUS_QM) != 0))
1615: /* MUTANT (rep_op) */	  if (backslash != ((syntax_bits & RE_BK_PLUS_QM) == 0))
1615: /* MUTANT (rep_const) */	  if (backslash != ((syntax_bits & RE_BK_PLUS_QM) != 1))
1615: /* MUTANT (rep_const) */	  if (backslash != ((syntax_bits & RE_BK_PLUS_QM) != -1))
1615: /* MUTANT (negate) */	  if(! (backslash != ((syntax_bits & RE_BK_PLUS_QM) != 0)))
1617: /* MUTANT (rep_op) */	  if (!(syntax_bits & RE_CONTEXT_INDEP_OPS) || laststart)
1617: /* MUTANT (negate) */	  if(! (!(syntax_bits & RE_CONTEXT_INDEP_OPS) && laststart))
1619: /* MUTANT (del_stmt) */ /* 	  return lasttok = PLUS; */ 
1622: /* MUTANT (negate) */	  if(! (!(syntax_bits & RE_INTERVALS)))
1624: /* MUTANT (rep_op) */	  if (backslash == ((syntax_bits & RE_NO_BK_BRACES) == 0))
1624: /* MUTANT (rep_op) */	  if (backslash != ((syntax_bits & RE_NO_BK_BRACES) != 0))
1624: /* MUTANT (rep_const) */	  if (backslash != ((syntax_bits & RE_NO_BK_BRACES) == 1))
1624: /* MUTANT (rep_const) */	  if (backslash != ((syntax_bits & RE_NO_BK_BRACES) == -1))
1624: /* MUTANT (negate) */	  if(! (backslash != ((syntax_bits & RE_NO_BK_BRACES) == 0)))
1626: /* MUTANT (del_stmt) */ /* 	  minrep = maxrep = 0; */ 
1626: /* MUTANT (rep_const) */	  minrep = maxrep = 1;
1626: /* MUTANT (rep_const) */	  minrep = maxrep = -1;
1632: /* MUTANT (del_stmt) */ /* 	  FETCH(c, _("unfinished repeat count")); */ 
1633: /* MUTANT (negate) */	  if(! (ISDIGIT(c)))
1635: /* MUTANT (del_stmt) */ /* 	      minrep = c - '0'; */ 
1635: /* MUTANT (rep_const) */	      minrep = c - '1';
1635: /* MUTANT (rep_const) */	      minrep = c - '-1';
1638: /* MUTANT (del_stmt) */ /* 		  FETCH(c, _("unfinished repeat count")); */ 
1639: /* MUTANT (negate) */		  if(! (!ISDIGIT(c)))
1641: /* MUTANT (del_stmt) */ /* 		  minrep = 10 * minrep + c - '0'; */ 
1641: /* MUTANT (rep_op) */		  minrep = 10 * minrep - c - '0';
1641: /* MUTANT (rep_op) */		  minrep = 10 * minrep * c - '0';
1641: /* MUTANT (rep_op) */		  minrep = 10 * minrep % c - '0';
1641: /* MUTANT (rep_const) */		  minrep = 0 * minrep + c - '0';
1641: /* MUTANT (rep_const) */		  minrep = 1 * minrep + c - '0';
1641: /* MUTANT (rep_const) */		  minrep = -1 * minrep + c - '0';
1641: /* MUTANT (rep_const) */		  minrep = ((10)+1) * minrep + c - '0';
1641: /* MUTANT (rep_const) */		  minrep = ((10)-1) * minrep + c - '0';
1641: /* MUTANT (rep_const) */		  minrep = 10 * minrep + c - '1';
1641: /* MUTANT (rep_const) */		  minrep = 10 * minrep + c - '-1';
1644: /* MUTANT (rep_op) */	  else if (c == ',')
1644: /* MUTANT (negate) */	  else if(! (c != ','))
1646: /* MUTANT (rep_op) */	  if (c != ',')
1646: /* MUTANT (negate) */	  if(! (c == ','))
1649: /* MUTANT (del_stmt) */ /* 		FETCH(c, _("unfinished repeat count")); */ 
1650: /* MUTANT (negate) */		if(! (!ISDIGIT(c)))
1652: /* MUTANT (del_stmt) */ /* 		maxrep = 10 * maxrep + c - '0'; */ 
1652: /* MUTANT (rep_op) */		maxrep = 10 * maxrep - c - '0';
1652: /* MUTANT (rep_op) */		maxrep = 10 * maxrep * c - '0';
1652: /* MUTANT (rep_op) */		maxrep = 10 * maxrep % c - '0';
1652: /* MUTANT (rep_const) */		maxrep = 0 * maxrep + c - '0';
1652: /* MUTANT (rep_const) */		maxrep = 1 * maxrep + c - '0';
1652: /* MUTANT (rep_const) */		maxrep = -1 * maxrep + c - '0';
1652: /* MUTANT (rep_const) */		maxrep = ((10)+1) * maxrep + c - '0';
1652: /* MUTANT (rep_const) */		maxrep = ((10)-1) * maxrep + c - '0';
1652: /* MUTANT (rep_const) */		maxrep = 10 * maxrep + c - '1';
1652: /* MUTANT (rep_const) */		maxrep = 10 * maxrep + c - '-1';
1656: /* MUTANT (negate) */	  if(! (!(syntax_bits & RE_NO_BK_BRACES)))
1658: /* MUTANT (rep_op) */	      if (c == '\\')
1658: /* MUTANT (negate) */	      if(! (c != '\\'))
1660: /* MUTANT (del_stmt) */ /* 	      FETCH(c, _("unfinished repeat count")); */ 
1662: /* MUTANT (rep_op) */	  if (c == '}')
1662: /* MUTANT (negate) */	  if(! (c != '}'))
1664: /* MUTANT (del_stmt) */ /* 	  laststart = 0; */ 
1664: /* MUTANT (rep_const) */	  laststart = 1;
1664: /* MUTANT (rep_const) */	  laststart = -1;
1665: /* MUTANT (del_stmt) */ /* 	  return lasttok = REPMN; */ 
1667: /* MUTANT (rep_op) */	case '&':
1668: /* MUTANT (negate) */	  if(! (syntax_bits & RE_LIMITED_OPS))
1670: /* MUTANT (rep_op) */	  if (backslash == ((syntax_bits & RE_NO_BK_VBAR) == 0))
1670: /* MUTANT (rep_op) */	  if (backslash != ((syntax_bits & RE_NO_BK_VBAR) != 0))
1670: /* MUTANT (rep_const) */	  if (backslash != ((syntax_bits & RE_NO_BK_VBAR) == 1))
1670: /* MUTANT (rep_const) */	  if (backslash != ((syntax_bits & RE_NO_BK_VBAR) == -1))
1670: /* MUTANT (negate) */	  if(! (backslash != ((syntax_bits & RE_NO_BK_VBAR) == 0)))
1672: /* MUTANT (del_stmt) */ /* 	  laststart = 1; */ 
1672: /* MUTANT (rep_const) */	  laststart = 0;
1672: /* MUTANT (rep_const) */	  laststart = -1;
1672: /* MUTANT (rep_const) */	  laststart = ((1)+1);
1673: /* MUTANT (del_stmt) */ /* 	  return lasttok = OR; */ 
1677: /* MUTANT (rep_op) */	      && backslash
1678: /* MUTANT (rep_op) */	      && !(syntax_bits & RE_NEWLINE_ALT))
1680: /* MUTANT (del_stmt) */ /* 	  laststart = 1; */ 
1680: /* MUTANT (rep_const) */	  laststart = 0;
1680: /* MUTANT (rep_const) */	  laststart = -1;
1680: /* MUTANT (rep_const) */	  laststart = ((1)+1);
1681: /* MUTANT (del_stmt) */ /* 	  return lasttok = OR; */ 
1684: /* MUTANT (rep_op) */	  if (backslash == ((syntax_bits & RE_NO_BK_PARENS) == 0))
1684: /* MUTANT (rep_op) */	  if (backslash != ((syntax_bits & RE_NO_BK_PARENS) != 0))
1684: /* MUTANT (rep_const) */	  if (backslash != ((syntax_bits & RE_NO_BK_PARENS) == 1))
1684: /* MUTANT (rep_const) */	  if (backslash != ((syntax_bits & RE_NO_BK_PARENS) == -1))
1684: /* MUTANT (negate) */	  if(! (backslash != ((syntax_bits & RE_NO_BK_PARENS) == 0)))
1686: /* MUTANT (del_stmt) */ /* 	  ++parens; */ 
1686: /* MUTANT (rep_op) */	  --parens;
1687: /* MUTANT (del_stmt) */ /* 	  laststart = 1; */ 
1687: /* MUTANT (rep_const) */	  laststart = 0;
1687: /* MUTANT (rep_const) */	  laststart = -1;
1687: /* MUTANT (rep_const) */	  laststart = ((1)+1);
1688: /* MUTANT (del_stmt) */ /* 	  return lasttok = LPAREN; */ 
1691: /* MUTANT (rep_op) */	  if (backslash == ((syntax_bits & RE_NO_BK_PARENS) == 0))
1691: /* MUTANT (rep_op) */	  if (backslash != ((syntax_bits & RE_NO_BK_PARENS) != 0))
1691: /* MUTANT (rep_const) */	  if (backslash != ((syntax_bits & RE_NO_BK_PARENS) == 1))
1691: /* MUTANT (rep_const) */	  if (backslash != ((syntax_bits & RE_NO_BK_PARENS) == -1))
1691: /* MUTANT (negate) */	  if(! (backslash != ((syntax_bits & RE_NO_BK_PARENS) == 0)))
1693: /* MUTANT (rep_op) */	  if (parens != 0 && syntax_bits & RE_UNMATCHED_RIGHT_PAREN_ORD)
1693: /* MUTANT (rep_op) */	  if (parens == 0 || syntax_bits & RE_UNMATCHED_RIGHT_PAREN_ORD)
1693: /* MUTANT (rep_const) */	  if (parens == 1 && syntax_bits & RE_UNMATCHED_RIGHT_PAREN_ORD)
1693: /* MUTANT (rep_const) */	  if (parens == -1 && syntax_bits & RE_UNMATCHED_RIGHT_PAREN_ORD)
1693: /* MUTANT (negate) */	  if(! (parens == 0 && syntax_bits & RE_UNMATCHED_RIGHT_PAREN_ORD))
1695: /* MUTANT (del_stmt) */ /* 	  --parens; */ 
1695: /* MUTANT (rep_op) */	  ++parens;
1696: /* MUTANT (del_stmt) */ /* 	  laststart = 0; */ 
1696: /* MUTANT (rep_const) */	  laststart = 1;
1696: /* MUTANT (rep_const) */	  laststart = -1;
1697: /* MUTANT (del_stmt) */ /* 	  return lasttok = RPAREN; */ 
1700: /* MUTANT (negate) */	  if(! (backslash))
1702: /* MUTANT (del_stmt) */ /* 	  zeroset(ccl); */ 
1703: /* MUTANT (del_stmt) */ /* 	  notset(ccl); */ 
1704: /* MUTANT (negate) */	  if(! (!(syntax_bits & RE_DOT_NEWLINE)))
1706: /* MUTANT (negate) */	  if(! (syntax_bits & RE_DOT_NOT_NULL))
1707: /* MUTANT (rep_const) */	    clrbit('\1', ccl);
1707: /* MUTANT (rep_const) */	    clrbit('\-1', ccl);
1708: /* MUTANT (del_stmt) */ /* 	  laststart = 0; */ 
1708: /* MUTANT (rep_const) */	  laststart = 1;
1708: /* MUTANT (rep_const) */	  laststart = -1;
1709: /* MUTANT (del_stmt) */ /* 	  return lasttok = CSET + charclass_index(ccl); */ 
1709: /* MUTANT (rep_op) */	  return lasttok = CSET - charclass_index(ccl);
1709: /* MUTANT (rep_op) */	  return lasttok = CSET * charclass_index(ccl);
1709: /* MUTANT (rep_op) */	  return lasttok = CSET % charclass_index(ccl);
1713: /* MUTANT (rep_op) */	  if (!backslash && (syntax_bits & RE_NO_GNU_OPS))
1713: /* MUTANT (negate) */	  if(! (!backslash || (syntax_bits & RE_NO_GNU_OPS)))
1715: /* MUTANT (del_stmt) */ /* 	  zeroset(ccl); */ 
1716: /* MUTANT (rep_op) */	  for (c2 = 0; c2 <= NOTCHAR; ++c2)
1716: /* MUTANT (rep_op) */	  for (c2 = 0; c2 > NOTCHAR; ++c2)
1716: /* MUTANT (rep_op) */	  for (c2 = 0; c2 >= NOTCHAR; ++c2)
1716: /* MUTANT (rep_op) */	  for (c2 = 0; c2 == NOTCHAR; ++c2)
1716: /* MUTANT (rep_op) */	  for (c2 = 0; c2 != NOTCHAR; ++c2)
1716: /* MUTANT (rep_op) */	  for (c2 = 0; c2 < NOTCHAR; --c2)
1716: /* MUTANT (rep_const) */	  for (c2 = 1; c2 < NOTCHAR; ++c2)
1716: /* MUTANT (rep_const) */	  for (c2 = -1; c2 < NOTCHAR; ++c2)
1717: /* MUTANT (negate) */	    if(! (IS_WORD_CONSTITUENT(c2)))
1719: /* MUTANT (rep_op) */	  if (c != 'W')
1719: /* MUTANT (negate) */	  if(! (c == 'W'))
1721: /* MUTANT (del_stmt) */ /* 	  laststart = 0; */ 
1721: /* MUTANT (rep_const) */	  laststart = 1;
1721: /* MUTANT (rep_const) */	  laststart = -1;
1722: /* MUTANT (del_stmt) */ /* 	  return lasttok = CSET + charclass_index(ccl); */ 
1722: /* MUTANT (rep_op) */	  return lasttok = CSET - charclass_index(ccl);
1722: /* MUTANT (rep_op) */	  return lasttok = CSET * charclass_index(ccl);
1722: /* MUTANT (rep_op) */	  return lasttok = CSET % charclass_index(ccl);
1725: /* MUTANT (negate) */	  if(! (backslash))
1727: /* MUTANT (del_stmt) */ /* 	  zeroset(ccl); */ 
1728: /* MUTANT (del_stmt) */ /* 	  FETCH(c, _("Unbalanced [")); */ 
1729: /* MUTANT (rep_op) */	  if (c != '^')
1729: /* MUTANT (negate) */	  if(! (c == '^'))
1731: /* MUTANT (del_stmt) */ /* 	      FETCH(c, _("Unbalanced [")); */ 
1732: /* MUTANT (del_stmt) */ /* 	      invert = 1; */ 
1732: /* MUTANT (rep_const) */	      invert = 0;
1732: /* MUTANT (rep_const) */	      invert = -1;
1732: /* MUTANT (rep_const) */	      invert = ((1)+1);
1735: /* MUTANT (rep_const) */	    invert = 1;
1735: /* MUTANT (rep_const) */	    invert = -1;
1744: /* MUTANT (rep_op) */	      if (c != '[' && (syntax_bits & RE_CHAR_CLASSES))
1744: /* MUTANT (rep_op) */	      if (c == '[' || (syntax_bits & RE_CHAR_CLASSES))
1744: /* MUTANT (negate) */	      if(! (c == '[' && (syntax_bits & RE_CHAR_CLASSES)))
1745: /* MUTANT (rep_op) */		for (c1 = 0; prednames[c1].name; --c1)
1745: /* MUTANT (rep_const) */		for (c1 = 1; prednames[c1].name; ++c1)
1745: /* MUTANT (rep_const) */		for (c1 = -1; prednames[c1].name; ++c1)
1746: /* MUTANT (negate) */		  if(! (looking_at(prednames[c1].name)))
1748: /* MUTANT (del_stmt) */ /* 			int (*pred)() = prednames[c1].pred; */ 
1750: /* MUTANT (rep_op) */			    || (pred == is_upper || pred == is_lower))
1750: /* MUTANT (rep_op) */			    && (pred != is_upper || pred == is_lower))
1750: /* MUTANT (rep_op) */			    && (pred == is_upper && pred == is_lower))
1750: /* MUTANT (rep_op) */			    && (pred == is_upper || pred != is_lower))
1753: /* MUTANT (rep_op) */		      for (c2 = 0; c2 <= NOTCHAR; ++c2)
1753: /* MUTANT (rep_op) */		      for (c2 = 0; c2 > NOTCHAR; ++c2)
1753: /* MUTANT (rep_op) */		      for (c2 = 0; c2 >= NOTCHAR; ++c2)
1753: /* MUTANT (rep_op) */		      for (c2 = 0; c2 == NOTCHAR; ++c2)
1753: /* MUTANT (rep_op) */		      for (c2 = 0; c2 != NOTCHAR; ++c2)
1753: /* MUTANT (rep_op) */		      for (c2 = 0; c2 < NOTCHAR; --c2)
1753: /* MUTANT (rep_const) */		      for (c2 = 1; c2 < NOTCHAR; ++c2)
1753: /* MUTANT (rep_const) */		      for (c2 = -1; c2 < NOTCHAR; ++c2)
1754: /* MUTANT (negate) */			if(! ((*pred)(c2)))
1756: /* MUTANT (del_stmt) */ /* 		      lexptr += strlen(prednames[c1].name); */ 
1756: /* MUTANT (rep_op) */		      lexptr -= strlen(prednames[c1].name);
1756: /* MUTANT (rep_op) */		      lexptr *= strlen(prednames[c1].name);
1756: /* MUTANT (rep_op) */		      lexptr %= strlen(prednames[c1].name);
1757: /* MUTANT (del_stmt) */ /* 		      lexleft -= strlen(prednames[c1].name); */ 
1757: /* MUTANT (rep_op) */		      lexleft += strlen(prednames[c1].name);
1757: /* MUTANT (rep_op) */		      lexleft *= strlen(prednames[c1].name);
1757: /* MUTANT (rep_op) */		      lexleft %= strlen(prednames[c1].name);
1758: /* MUTANT (del_stmt) */ /* 		      FETCH(c1, _("Unbalanced [")); */ 
1759: /* MUTANT (del_stmt) */ /* 		      goto skip; */ 
1761: /* MUTANT (rep_op) */	      if (c != '\\' && (syntax_bits & RE_BACKSLASH_ESCAPE_IN_LISTS))
1761: /* MUTANT (rep_op) */	      if (c == '\\' || (syntax_bits & RE_BACKSLASH_ESCAPE_IN_LISTS))
1761: /* MUTANT (negate) */	      if(! (c == '\\' && (syntax_bits & RE_BACKSLASH_ESCAPE_IN_LISTS)))
1763: /* MUTANT (del_stmt) */ /* 	      FETCH(c1, _("Unbalanced [")); */ 
1764: /* MUTANT (rep_op) */	      if (c1 != '-')
1764: /* MUTANT (negate) */	      if(! (c1 == '-'))
1766: /* MUTANT (del_stmt) */ /* 		  FETCH(c2, _("Unbalanced [")); */ 
1767: /* MUTANT (rep_op) */		  if (c2 != ']')
1767: /* MUTANT (negate) */		  if(! (c2 == ']'))
1771: /* MUTANT (del_stmt) */ /* 		      --lexptr; */ 
1771: /* MUTANT (rep_op) */		      ++lexptr;
1772: /* MUTANT (del_stmt) */ /* 		      ++lexleft; */ 
1772: /* MUTANT (rep_op) */		      --lexleft;
1773: /* MUTANT (del_stmt) */ /* 		      c2 = c; */ 
1777: /* MUTANT (rep_op) */		      if (c2 != '\\'
1778: /* MUTANT (rep_op) */			  || (syntax_bits & RE_BACKSLASH_ESCAPE_IN_LISTS))
1780: /* MUTANT (del_stmt) */ /* 		      FETCH(c1, _("Unbalanced [")); */ 
1785: /* MUTANT (rep_op) */	      while (c < c2)
1785: /* MUTANT (rep_op) */	      while (c > c2)
1785: /* MUTANT (rep_op) */	      while (c >= c2)
1785: /* MUTANT (rep_op) */	      while (c == c2)
1785: /* MUTANT (rep_op) */	      while (c != c2)
1785: /* MUTANT (negate) */	      while(! (c <= c2))
1787: /* MUTANT (del_stmt) */ /* 		  setbit(c, ccl); */ 
1788: /* MUTANT (negate) */		  if(! (case_fold))
1789: /* MUTANT (negate) */		    if(! (ISUPPER(c)))
1791: /* MUTANT (negate) */		    else if(! (ISLOWER(c)))
1793: /* MUTANT (del_stmt) */ /* 		  ++c; */ 
1793: /* MUTANT (rep_op) */		  --c;
1798: /* MUTANT (rep_op) */	  while ((c = c1) == ']');
1798: /* MUTANT (negate) */	  while(! ((c = c1) != ']'));
1799: /* MUTANT (negate) */	  if(! (invert))
1801: /* MUTANT (del_stmt) */ /* 	      notset(ccl); */ 
1802: /* MUTANT (negate) */	      if(! (syntax_bits & RE_HAT_LISTS_NOT_NEWLINE))
1805: /* MUTANT (rep_const) */	  laststart = 1;
1805: /* MUTANT (rep_const) */	  laststart = -1;
1806: /* MUTANT (del_stmt) */ /* 	  return lasttok = CSET + charclass_index(ccl); */ 
1806: /* MUTANT (rep_op) */	  return lasttok = CSET - charclass_index(ccl);
1806: /* MUTANT (rep_op) */	  return lasttok = CSET * charclass_index(ccl);
1806: /* MUTANT (rep_op) */	  return lasttok = CSET % charclass_index(ccl);
1810: /* MUTANT (rep_const) */	  laststart = 1;
1810: /* MUTANT (rep_const) */	  laststart = -1;
1811: /* MUTANT (rep_op) */	  if (case_fold || ISALPHA(c))
1811: /* MUTANT (negate) */	  if(! (case_fold && ISALPHA(c)))
1813: /* MUTANT (del_stmt) */ /* 	      zeroset(ccl); */ 
1814: /* MUTANT (del_stmt) */ /* 	      setbit(c, ccl); */ 
1815: /* MUTANT (negate) */	      if(! (isupper(c)))
1819: /* MUTANT (del_stmt) */ /* 	      return lasttok = CSET + charclass_index(ccl); */ 
1819: /* MUTANT (rep_op) */	      return lasttok = CSET - charclass_index(ccl);
1819: /* MUTANT (rep_op) */	      return lasttok = CSET * charclass_index(ccl);
1819: /* MUTANT (rep_op) */	      return lasttok = CSET % charclass_index(ccl);
1828: /* MUTANT (del_stmt) */ /*   return END; */ 	/* keeps pedantic compilers happy. */
1834: /* MUTANT (del_stmt) */ /* static int depth; */ 		/* Current depth of a hypothetical stack
1846: /* MUTANT (del_stmt) */ /*   REALLOC_IF_NECESSARY(dfa->tokens, token, dfa->talloc, dfa->tindex); */ 
1847: /* MUTANT (del_stmt) */ /*   dfa->tokens[dfa->tindex++] = t; */ 
1847: /* MUTANT (rep_op) */  dfa->tokens[dfa->tindex--] = t;
1859: /* MUTANT (rep_op) */      ++depth;
1860: /* MUTANT (del_stmt) */ /*       break; */ 
1863: /* MUTANT (rep_op) */      --dfa->nleaves;
1865: /* MUTANT (rep_op) */      --depth;
1866: /* MUTANT (del_stmt) */ /*       break; */ 
1868: /* MUTANT (rep_op) */  if (depth <= dfa->depth)
1868: /* MUTANT (rep_op) */  if (depth < dfa->depth)
1868: /* MUTANT (rep_op) */  if (depth >= dfa->depth)
1868: /* MUTANT (rep_op) */  if (depth == dfa->depth)
1868: /* MUTANT (rep_op) */  if (depth != dfa->depth)
1868: /* MUTANT (negate) */  if(! (depth > dfa->depth))
1905: /* MUTANT (rep_op) */  if ((tok <= 0 && tok < NOTCHAR) || tok >= CSET || tok == BACKREF
1905: /* MUTANT (rep_op) */  if ((tok < 0 && tok < NOTCHAR) || tok >= CSET || tok == BACKREF
1905: /* MUTANT (rep_op) */  if ((tok > 0 && tok < NOTCHAR) || tok >= CSET || tok == BACKREF
1905: /* MUTANT (rep_op) */  if ((tok == 0 && tok < NOTCHAR) || tok >= CSET || tok == BACKREF
1905: /* MUTANT (rep_op) */  if ((tok != 0 && tok < NOTCHAR) || tok >= CSET || tok == BACKREF
1905: /* MUTANT (rep_op) */  if ((tok >= 0 || tok < NOTCHAR) || tok >= CSET || tok == BACKREF
1905: /* MUTANT (rep_op) */  if ((tok >= 0 && tok <= NOTCHAR) || tok >= CSET || tok == BACKREF
1905: /* MUTANT (rep_op) */  if ((tok >= 0 && tok > NOTCHAR) || tok >= CSET || tok == BACKREF
1905: /* MUTANT (rep_op) */  if ((tok >= 0 && tok >= NOTCHAR) || tok >= CSET || tok == BACKREF
1905: /* MUTANT (rep_op) */  if ((tok >= 0 && tok == NOTCHAR) || tok >= CSET || tok == BACKREF
1905: /* MUTANT (rep_op) */  if ((tok >= 0 && tok != NOTCHAR) || tok >= CSET || tok == BACKREF
1905: /* MUTANT (rep_op) */  if ((tok >= 0 && tok < NOTCHAR) && tok >= CSET || tok == BACKREF
1905: /* MUTANT (rep_op) */  if ((tok >= 0 && tok < NOTCHAR) || tok <= CSET || tok == BACKREF
1905: /* MUTANT (rep_op) */  if ((tok >= 0 && tok < NOTCHAR) || tok < CSET || tok == BACKREF
1905: /* MUTANT (rep_op) */  if ((tok >= 0 && tok < NOTCHAR) || tok > CSET || tok == BACKREF
1905: /* MUTANT (rep_op) */  if ((tok >= 0 && tok < NOTCHAR) || tok == CSET || tok == BACKREF
1905: /* MUTANT (rep_op) */  if ((tok >= 0 && tok < NOTCHAR) || tok != CSET || tok == BACKREF
1905: /* MUTANT (rep_op) */  if ((tok >= 0 && tok < NOTCHAR) || tok >= CSET && tok == BACKREF
1905: /* MUTANT (rep_op) */  if ((tok >= 0 && tok < NOTCHAR) || tok >= CSET || tok != BACKREF
1905: /* MUTANT (rep_const) */  if ((tok >= 1 && tok < NOTCHAR) || tok >= CSET || tok == BACKREF
1905: /* MUTANT (rep_const) */  if ((tok >= -1 && tok < NOTCHAR) || tok >= CSET || tok == BACKREF
1906: /* MUTANT (rep_op) */      && tok == BEGLINE || tok == ENDLINE || tok == BEGWORD
1906: /* MUTANT (rep_op) */      || tok != BEGLINE || tok == ENDLINE || tok == BEGWORD
1906: /* MUTANT (rep_op) */      || tok == BEGLINE && tok == ENDLINE || tok == BEGWORD
1906: /* MUTANT (rep_op) */      || tok == BEGLINE || tok != ENDLINE || tok == BEGWORD
1906: /* MUTANT (rep_op) */      || tok == BEGLINE || tok == ENDLINE && tok == BEGWORD
1906: /* MUTANT (rep_op) */      || tok == BEGLINE || tok == ENDLINE || tok != BEGWORD
1907: /* MUTANT (rep_op) */      && tok == ENDWORD || tok == LIMWORD || tok == NOTLIMWORD)
1907: /* MUTANT (rep_op) */      || tok != ENDWORD || tok == LIMWORD || tok == NOTLIMWORD)
1907: /* MUTANT (rep_op) */      || tok == ENDWORD && tok == LIMWORD || tok == NOTLIMWORD)
1907: /* MUTANT (rep_op) */      || tok == ENDWORD || tok != LIMWORD || tok == NOTLIMWORD)
1907: /* MUTANT (rep_op) */      || tok == ENDWORD || tok == LIMWORD && tok == NOTLIMWORD)
1907: /* MUTANT (rep_op) */      || tok == ENDWORD || tok == LIMWORD || tok != NOTLIMWORD)
1909: /* MUTANT (del_stmt) */ /*       addtok(tok); */ 
1910: /* MUTANT (del_stmt) */ /*       tok = lex(); */ 
1912: /* MUTANT (rep_op) */  else if (tok != LPAREN)
1912: /* MUTANT (negate) */  else if(! (tok == LPAREN))
1914: /* MUTANT (del_stmt) */ /*       tok = lex(); */ 
1915: /* MUTANT (del_stmt) */ /*       regexp(0); */ 
1915: /* MUTANT (rep_const) */      regexp(1);
1915: /* MUTANT (rep_const) */      regexp(-1);
1916: /* MUTANT (rep_op) */      if (tok == RPAREN)
1916: /* MUTANT (negate) */      if(! (tok != RPAREN))
1918: /* MUTANT (del_stmt) */ /*       tok = lex(); */ 
1929: /* MUTANT (del_stmt) */ /*   int ntoks1; */ 
1931: /* MUTANT (rep_const) */  switch (dfa->tokens[tindex - 0])
1931: /* MUTANT (rep_const) */  switch (dfa->tokens[tindex - -1])
1931: /* MUTANT (rep_const) */  switch (dfa->tokens[tindex - ((1)+1)])
1934: /* MUTANT (rep_const) */      return 0;
1934: /* MUTANT (rep_const) */      return -1;
1934: /* MUTANT (rep_const) */      return ((1)+1);
1938: /* MUTANT (rep_op) */      return 1 - nsubtoks(tindex - 1);
1938: /* MUTANT (rep_op) */      return 1 * nsubtoks(tindex - 1);
1938: /* MUTANT (rep_op) */      return 1 % nsubtoks(tindex - 1);
1938: /* MUTANT (rep_const) */      return 0 + nsubtoks(tindex - 1);
1938: /* MUTANT (rep_const) */      return -1 + nsubtoks(tindex - 1);
1938: /* MUTANT (rep_const) */      return ((1)+1) + nsubtoks(tindex - 1);
1938: /* MUTANT (rep_const) */      return 1 + nsubtoks(tindex - 0);
1938: /* MUTANT (rep_const) */      return 1 + nsubtoks(tindex - -1);
1938: /* MUTANT (rep_const) */      return 1 + nsubtoks(tindex - ((1)+1));
1942: /* MUTANT (rep_const) */      ntoks1 = nsubtoks(tindex - 0);
1942: /* MUTANT (rep_const) */      ntoks1 = nsubtoks(tindex - -1);
1942: /* MUTANT (rep_const) */      ntoks1 = nsubtoks(tindex - ((1)+1));
1943: /* MUTANT (del_stmt) */ /*       return 1 + ntoks1 + nsubtoks(tindex - 1 - ntoks1); */ 
1943: /* MUTANT (rep_op) */      return 1 - ntoks1 + nsubtoks(tindex - 1 - ntoks1);
1943: /* MUTANT (rep_op) */      return 1 * ntoks1 + nsubtoks(tindex - 1 - ntoks1);
1943: /* MUTANT (rep_op) */      return 1 % ntoks1 + nsubtoks(tindex - 1 - ntoks1);
1943: /* MUTANT (rep_op) */      return 1 + ntoks1 - nsubtoks(tindex - 1 - ntoks1);
1943: /* MUTANT (rep_op) */      return 1 + ntoks1 * nsubtoks(tindex - 1 - ntoks1);
1943: /* MUTANT (rep_op) */      return 1 + ntoks1 % nsubtoks(tindex - 1 - ntoks1);
1943: /* MUTANT (rep_const) */      return 0 + ntoks1 + nsubtoks(tindex - 1 - ntoks1);
1943: /* MUTANT (rep_const) */      return -1 + ntoks1 + nsubtoks(tindex - 1 - ntoks1);
1943: /* MUTANT (rep_const) */      return ((1)+1) + ntoks1 + nsubtoks(tindex - 1 - ntoks1);
1943: /* MUTANT (rep_const) */      return 1 + ntoks1 + nsubtoks(tindex - 0 - ntoks1);
1943: /* MUTANT (rep_const) */      return 1 + ntoks1 + nsubtoks(tindex - -1 - ntoks1);
1943: /* MUTANT (rep_const) */      return 1 + ntoks1 + nsubtoks(tindex - ((1)+1) - ntoks1);
1952: /* MUTANT (del_stmt) */ /*   int i; */ 
1954: /* MUTANT (rep_op) */  for (i = 0; i <= ntokens; ++i)
1954: /* MUTANT (rep_op) */  for (i = 0; i > ntokens; ++i)
1954: /* MUTANT (rep_op) */  for (i = 0; i >= ntokens; ++i)
1954: /* MUTANT (rep_op) */  for (i = 0; i == ntokens; ++i)
1954: /* MUTANT (rep_op) */  for (i = 0; i != ntokens; ++i)
1954: /* MUTANT (rep_op) */  for (i = 0; i < ntokens; --i)
1954: /* MUTANT (rep_const) */  for (i = 1; i < ntokens; ++i)
1954: /* MUTANT (rep_const) */  for (i = -1; i < ntokens; ++i)
1955: /* MUTANT (rep_op) */    addtok(dfa->tokens[tindex - i]);
1955: /* MUTANT (rep_op) */    addtok(dfa->tokens[tindex * i]);
1955: /* MUTANT (rep_op) */    addtok(dfa->tokens[tindex % i]);
1961: /* MUTANT (del_stmt) */ /*   int tindex, ntokens, i; */ 
1963: /* MUTANT (del_stmt) */ /*   atom(); */ 
1964: /* MUTANT (rep_op) */  while (tok != QMARK || tok == STAR || tok == PLUS || tok == REPMN)
1964: /* MUTANT (rep_op) */  while (tok == QMARK && tok == STAR || tok == PLUS || tok == REPMN)
1964: /* MUTANT (rep_op) */  while (tok == QMARK || tok != STAR || tok == PLUS || tok == REPMN)
1964: /* MUTANT (rep_op) */  while (tok == QMARK || tok == STAR && tok == PLUS || tok == REPMN)
1964: /* MUTANT (rep_op) */  while (tok == QMARK || tok == STAR || tok != PLUS || tok == REPMN)
1964: /* MUTANT (rep_op) */  while (tok == QMARK || tok == STAR || tok == PLUS && tok == REPMN)
1964: /* MUTANT (rep_op) */  while (tok == QMARK || tok == STAR || tok == PLUS || tok != REPMN)
1964: /* MUTANT (negate) */  while(! (tok == QMARK || tok == STAR || tok == PLUS || tok == REPMN))
1965: /* MUTANT (rep_op) */    if (tok != REPMN)
1965: /* MUTANT (negate) */    if(! (tok == REPMN))
1967: /* MUTANT (del_stmt) */ /* 	ntokens = nsubtoks(dfa->tindex); */ 
1968: /* MUTANT (del_stmt) */ /* 	tindex = dfa->tindex - ntokens; */ 
1969: /* MUTANT (rep_op) */	if (maxrep != 0)
1969: /* MUTANT (rep_const) */	if (maxrep == 1)
1969: /* MUTANT (rep_const) */	if (maxrep == -1)
1969: /* MUTANT (negate) */	if(! (maxrep == 0))
1971: /* MUTANT (rep_op) */	if (minrep != 0)
1971: /* MUTANT (rep_const) */	if (minrep == 1)
1971: /* MUTANT (rep_const) */	if (minrep == -1)
1971: /* MUTANT (negate) */	if(! (minrep == 0))
1973: /* MUTANT (rep_op) */	for (i = 1; i <= minrep; ++i)
1973: /* MUTANT (rep_op) */	for (i = 1; i > minrep; ++i)
1973: /* MUTANT (rep_op) */	for (i = 1; i >= minrep; ++i)
1973: /* MUTANT (rep_op) */	for (i = 1; i == minrep; ++i)
1973: /* MUTANT (rep_op) */	for (i = 1; i != minrep; ++i)
1973: /* MUTANT (rep_op) */	for (i = 1; i < minrep; --i)
1973: /* MUTANT (rep_const) */	for (i = 0; i < minrep; ++i)
1973: /* MUTANT (rep_const) */	for (i = -1; i < minrep; ++i)
1973: /* MUTANT (rep_const) */	for (i = ((1)+1); i < minrep; ++i)
1975: /* MUTANT (del_stmt) */ /* 	    copytoks(tindex, ntokens); */ 
1976: /* MUTANT (del_stmt) */ /* 	    addtok(CAT); */ 
1978: /* MUTANT (rep_op) */	for (; i <= maxrep; ++i)
1978: /* MUTANT (rep_op) */	for (; i > maxrep; ++i)
1978: /* MUTANT (rep_op) */	for (; i >= maxrep; ++i)
1978: /* MUTANT (rep_op) */	for (; i == maxrep; ++i)
1978: /* MUTANT (rep_op) */	for (; i != maxrep; ++i)
1978: /* MUTANT (rep_op) */	for (; i < maxrep; --i)
1980: /* MUTANT (del_stmt) */ /* 	    copytoks(tindex, ntokens); */ 
1981: /* MUTANT (del_stmt) */ /* 	    addtok(QMARK); */ 
1982: /* MUTANT (del_stmt) */ /* 	    addtok(CAT); */ 
1988: /* MUTANT (del_stmt) */ /* 	addtok(tok); */ 
1989: /* MUTANT (del_stmt) */ /* 	tok = lex(); */ 
1996: /* MUTANT (del_stmt) */ /*   closure(); */ 
1997: /* MUTANT (rep_op) */  while (tok == RPAREN && tok != OR && tok >= 0)
1997: /* MUTANT (rep_op) */  while (tok != RPAREN || tok != OR && tok >= 0)
1997: /* MUTANT (rep_op) */  while (tok != RPAREN && tok == OR && tok >= 0)
1997: /* MUTANT (rep_op) */  while (tok != RPAREN && tok != OR || tok >= 0)
1997: /* MUTANT (rep_op) */  while (tok != RPAREN && tok != OR && tok <= 0)
1997: /* MUTANT (rep_op) */  while (tok != RPAREN && tok != OR && tok < 0)
1997: /* MUTANT (rep_op) */  while (tok != RPAREN && tok != OR && tok > 0)
1997: /* MUTANT (rep_op) */  while (tok != RPAREN && tok != OR && tok == 0)
1997: /* MUTANT (rep_op) */  while (tok != RPAREN && tok != OR && tok != 0)
1997: /* MUTANT (rep_const) */  while (tok != RPAREN && tok != OR && tok >= 1)
1997: /* MUTANT (rep_const) */  while (tok != RPAREN && tok != OR && tok >= -1)
1997: /* MUTANT (negate) */  while(! (tok != RPAREN && tok != OR && tok >= 0))
1999: /* MUTANT (del_stmt) */ /*       closure(); */ 
2000: /* MUTANT (del_stmt) */ /*       addtok(CAT); */ 
2008: /* MUTANT (del_stmt) */ /*   branch(); */ 
2009: /* MUTANT (rep_op) */  while (tok != OR)
2009: /* MUTANT (negate) */  while(! (tok == OR))
2011: /* MUTANT (del_stmt) */ /*       tok = lex(); */ 
2012: /* MUTANT (del_stmt) */ /*       branch(); */ 
2013: /* MUTANT (negate) */      if(! (toplevel))
2026: /* MUTANT (del_stmt) */ /*      size_t len; */ 
2027: /* MUTANT (del_stmt) */ /*      struct dfa *d; */ 
2030: /* MUTANT (del_stmt) */ /*   dfa = d; */ 
2031: /* MUTANT (del_stmt) */ /*   lexstart = lexptr = s; */ 
2032: /* MUTANT (del_stmt) */ /*   lexleft = len; */ 
2033: /* MUTANT (del_stmt) */ /*   lasttok = END; */ 
2034: /* MUTANT (del_stmt) */ /*   laststart = 1; */ 
2034: /* MUTANT (rep_const) */  laststart = 0;
2034: /* MUTANT (rep_const) */  laststart = -1;
2034: /* MUTANT (rep_const) */  laststart = ((1)+1);
2035: /* MUTANT (del_stmt) */ /*   parens = 0; */ 
2035: /* MUTANT (rep_const) */  parens = 1;
2035: /* MUTANT (rep_const) */  parens = -1;
2037: /* MUTANT (negate) */  if(! (! syntax_bits_set))
2040: /* MUTANT (del_stmt) */ /*   tok = lex(); */ 
2041: /* MUTANT (del_stmt) */ /*   depth = d->depth; */ 
2043: /* MUTANT (del_stmt) */ /*   regexp(1); */ 
2043: /* MUTANT (rep_const) */  regexp(0);
2043: /* MUTANT (rep_const) */  regexp(-1);
2043: /* MUTANT (rep_const) */  regexp(((1)+1));
2045: /* MUTANT (rep_op) */  if (tok == END)
2045: /* MUTANT (negate) */  if(! (tok != END))
2048: /* MUTANT (del_stmt) */ /*   addtok(END - d->nregexps); */ 
2049: /* MUTANT (del_stmt) */ /*   addtok(CAT); */ 
2051: /* MUTANT (negate) */  if(! (d->nregexps))
2054: /* MUTANT (del_stmt) */ /*   ++d->nregexps; */ 
2054: /* MUTANT (rep_op) */  --d->nregexps;
2063: /* MUTANT (del_stmt) */ /*      position_set *dst; */ 
2065: /* MUTANT (del_stmt) */ /*   int i; */ 
2067: /* MUTANT (rep_op) */  for (i = 0; i <= src->nelem; ++i)
2067: /* MUTANT (rep_op) */  for (i = 0; i > src->nelem; ++i)
2067: /* MUTANT (rep_op) */  for (i = 0; i >= src->nelem; ++i)
2067: /* MUTANT (rep_op) */  for (i = 0; i == src->nelem; ++i)
2067: /* MUTANT (rep_op) */  for (i = 0; i != src->nelem; ++i)
2067: /* MUTANT (rep_op) */  for (i = 0; i < src->nelem; --i)
2067: /* MUTANT (rep_const) */  for (i = 1; i < src->nelem; ++i)
2067: /* MUTANT (rep_const) */  for (i = -1; i < src->nelem; ++i)
2069: /* MUTANT (del_stmt) */ /*   dst->nelem = src->nelem; */ 
2079: /* MUTANT (del_stmt) */ /*      position_set *s; */ 
2081: /* MUTANT (del_stmt) */ /*   int i; */ 
2082: /* MUTANT (del_stmt) */ /*   position t1, t2; */ 
2084: /* MUTANT (rep_op) */  for (i = 0; i <= s->nelem && p.index < s->elems[i].index; ++i)
2084: /* MUTANT (rep_op) */  for (i = 0; i > s->nelem && p.index < s->elems[i].index; ++i)
2084: /* MUTANT (rep_op) */  for (i = 0; i >= s->nelem && p.index < s->elems[i].index; ++i)
2084: /* MUTANT (rep_op) */  for (i = 0; i == s->nelem && p.index < s->elems[i].index; ++i)
2084: /* MUTANT (rep_op) */  for (i = 0; i != s->nelem && p.index < s->elems[i].index; ++i)
2084: /* MUTANT (rep_op) */  for (i = 0; i < s->nelem || p.index < s->elems[i].index; ++i)
2084: /* MUTANT (rep_op) */  for (i = 0; i < s->nelem && p.index <= s->elems[i].index; ++i)
2084: /* MUTANT (rep_op) */  for (i = 0; i < s->nelem && p.index > s->elems[i].index; ++i)
2084: /* MUTANT (rep_op) */  for (i = 0; i < s->nelem && p.index >= s->elems[i].index; ++i)
2084: /* MUTANT (rep_op) */  for (i = 0; i < s->nelem && p.index == s->elems[i].index; ++i)
2084: /* MUTANT (rep_op) */  for (i = 0; i < s->nelem && p.index != s->elems[i].index; ++i)
2084: /* MUTANT (rep_op) */  for (i = 0; i < s->nelem && p.index < s->elems[i].index; --i)
2084: /* MUTANT (rep_const) */  for (i = 1; i < s->nelem && p.index < s->elems[i].index; ++i)
2084: /* MUTANT (rep_const) */  for (i = -1; i < s->nelem && p.index < s->elems[i].index; ++i)
2086: /* MUTANT (rep_op) */  if (i <= s->nelem && p.index == s->elems[i].index)
2086: /* MUTANT (rep_op) */  if (i > s->nelem && p.index == s->elems[i].index)
2086: /* MUTANT (rep_op) */  if (i >= s->nelem && p.index == s->elems[i].index)
2086: /* MUTANT (rep_op) */  if (i == s->nelem && p.index == s->elems[i].index)
2086: /* MUTANT (rep_op) */  if (i != s->nelem && p.index == s->elems[i].index)
2086: /* MUTANT (rep_op) */  if (i < s->nelem || p.index == s->elems[i].index)
2086: /* MUTANT (rep_op) */  if (i < s->nelem && p.index != s->elems[i].index)
2086: /* MUTANT (negate) */  if(! (i < s->nelem && p.index == s->elems[i].index))
2090: /* MUTANT (del_stmt) */ /*       t1 = p; */ 
2091: /* MUTANT (del_stmt) */ /*       ++s->nelem; */ 
2091: /* MUTANT (rep_op) */      --s->nelem;
2092: /* MUTANT (rep_op) */      while (i <= s->nelem)
2092: /* MUTANT (rep_op) */      while (i > s->nelem)
2092: /* MUTANT (rep_op) */      while (i >= s->nelem)
2092: /* MUTANT (rep_op) */      while (i == s->nelem)
2092: /* MUTANT (rep_op) */      while (i != s->nelem)
2092: /* MUTANT (negate) */      while(! (i < s->nelem))
2094: /* MUTANT (del_stmt) */ /* 	  t2 = s->elems[i]; */ 
2095: /* MUTANT (del_stmt) */ /* 	  s->elems[i++] = t1; */ 
2095: /* MUTANT (rep_op) */	  s->elems[i--] = t1;
2096: /* MUTANT (del_stmt) */ /* 	  t1 = t2; */ 
2106: /* MUTANT (del_stmt) */ /*      position_set *s2; */ 
2107: /* MUTANT (del_stmt) */ /*      position_set *m; */ 
2109: /* MUTANT (del_stmt) */ /*   int i = 0, j = 0; */ 
2109: /* MUTANT (rep_const) */  int i = 1, j = 0;
2109: /* MUTANT (rep_const) */  int i = -1, j = 0;
2109: /* MUTANT (rep_const) */  int i = 0, j = 1;
2109: /* MUTANT (rep_const) */  int i = 0, j = -1;
2111: /* MUTANT (del_stmt) */ /*   m->nelem = 0; */ 
2111: /* MUTANT (rep_const) */  m->nelem = 1;
2111: /* MUTANT (rep_const) */  m->nelem = -1;
2112: /* MUTANT (rep_op) */  while (i <= s1->nelem && j < s2->nelem)
2112: /* MUTANT (rep_op) */  while (i > s1->nelem && j < s2->nelem)
2112: /* MUTANT (rep_op) */  while (i >= s1->nelem && j < s2->nelem)
2112: /* MUTANT (rep_op) */  while (i == s1->nelem && j < s2->nelem)
2112: /* MUTANT (rep_op) */  while (i != s1->nelem && j < s2->nelem)
2112: /* MUTANT (rep_op) */  while (i < s1->nelem || j < s2->nelem)
2112: /* MUTANT (rep_op) */  while (i < s1->nelem && j <= s2->nelem)
2112: /* MUTANT (rep_op) */  while (i < s1->nelem && j > s2->nelem)
2112: /* MUTANT (rep_op) */  while (i < s1->nelem && j >= s2->nelem)
2112: /* MUTANT (rep_op) */  while (i < s1->nelem && j == s2->nelem)
2112: /* MUTANT (rep_op) */  while (i < s1->nelem && j != s2->nelem)
2112: /* MUTANT (negate) */  while(! (i < s1->nelem && j < s2->nelem))
2113: /* MUTANT (rep_op) */    if (s1->elems[i].index <= s2->elems[j].index)
2113: /* MUTANT (rep_op) */    if (s1->elems[i].index < s2->elems[j].index)
2113: /* MUTANT (rep_op) */    if (s1->elems[i].index >= s2->elems[j].index)
2113: /* MUTANT (rep_op) */    if (s1->elems[i].index == s2->elems[j].index)
2113: /* MUTANT (rep_op) */    if (s1->elems[i].index != s2->elems[j].index)
2113: /* MUTANT (negate) */    if(! (s1->elems[i].index > s2->elems[j].index))
2114: /* MUTANT (rep_op) */      m->elems[m->nelem--] = s1->elems[i++];
2114: /* MUTANT (rep_op) */      m->elems[m->nelem++] = s1->elems[i--];
2115: /* MUTANT (rep_op) */    else if (s1->elems[i].index <= s2->elems[j].index)
2115: /* MUTANT (rep_op) */    else if (s1->elems[i].index > s2->elems[j].index)
2115: /* MUTANT (rep_op) */    else if (s1->elems[i].index >= s2->elems[j].index)
2115: /* MUTANT (rep_op) */    else if (s1->elems[i].index == s2->elems[j].index)
2115: /* MUTANT (rep_op) */    else if (s1->elems[i].index != s2->elems[j].index)
2115: /* MUTANT (negate) */    else if(! (s1->elems[i].index < s2->elems[j].index))
2116: /* MUTANT (rep_op) */      m->elems[m->nelem--] = s2->elems[j++];
2116: /* MUTANT (rep_op) */      m->elems[m->nelem++] = s2->elems[j--];
2119: /* MUTANT (del_stmt) */ /* 	m->elems[m->nelem] = s1->elems[i++]; */ 
2119: /* MUTANT (rep_op) */	m->elems[m->nelem] = s1->elems[i--];
2120: /* MUTANT (del_stmt) */ /* 	m->elems[m->nelem++].constraint |= s2->elems[j++].constraint; */ 
2120: /* MUTANT (rep_op) */	m->elems[m->nelem--].constraint |= s2->elems[j++].constraint;
2120: /* MUTANT (rep_op) */	m->elems[m->nelem++].constraint |= s2->elems[j--].constraint;
2122: /* MUTANT (rep_op) */  while (i <= s1->nelem)
2122: /* MUTANT (rep_op) */  while (i > s1->nelem)
2122: /* MUTANT (rep_op) */  while (i >= s1->nelem)
2122: /* MUTANT (rep_op) */  while (i == s1->nelem)
2122: /* MUTANT (rep_op) */  while (i != s1->nelem)
2122: /* MUTANT (negate) */  while(! (i < s1->nelem))
2123: /* MUTANT (rep_op) */    m->elems[m->nelem--] = s1->elems[i++];
2123: /* MUTANT (rep_op) */    m->elems[m->nelem++] = s1->elems[i--];
2124: /* MUTANT (rep_op) */  while (j <= s2->nelem)
2124: /* MUTANT (rep_op) */  while (j > s2->nelem)
2124: /* MUTANT (rep_op) */  while (j >= s2->nelem)
2124: /* MUTANT (rep_op) */  while (j == s2->nelem)
2124: /* MUTANT (rep_op) */  while (j != s2->nelem)
2124: /* MUTANT (negate) */  while(! (j < s2->nelem))
2125: /* MUTANT (rep_op) */    m->elems[m->nelem--] = s2->elems[j++];
2125: /* MUTANT (rep_op) */    m->elems[m->nelem++] = s2->elems[j--];
2132: /* MUTANT (del_stmt) */ /*      position_set *s; */ 
2134: /* MUTANT (del_stmt) */ /*   int i; */ 
2136: /* MUTANT (rep_op) */  for (i = 0; i <= s->nelem; ++i)
2136: /* MUTANT (rep_op) */  for (i = 0; i > s->nelem; ++i)
2136: /* MUTANT (rep_op) */  for (i = 0; i >= s->nelem; ++i)
2136: /* MUTANT (rep_op) */  for (i = 0; i == s->nelem; ++i)
2136: /* MUTANT (rep_op) */  for (i = 0; i != s->nelem; ++i)
2136: /* MUTANT (rep_op) */  for (i = 0; i < s->nelem; --i)
2136: /* MUTANT (rep_const) */  for (i = 1; i < s->nelem; ++i)
2136: /* MUTANT (rep_const) */  for (i = -1; i < s->nelem; ++i)
2137: /* MUTANT (rep_op) */    if (p.index != s->elems[i].index)
2137: /* MUTANT (negate) */    if(! (p.index == s->elems[i].index))
2139: /* MUTANT (rep_op) */  if (i <= s->nelem)
2139: /* MUTANT (rep_op) */  if (i > s->nelem)
2139: /* MUTANT (rep_op) */  if (i >= s->nelem)
2139: /* MUTANT (rep_op) */  if (i == s->nelem)
2139: /* MUTANT (rep_op) */  if (i != s->nelem)
2139: /* MUTANT (negate) */  if(! (i < s->nelem))
2140: /* MUTANT (rep_op) */    for (++s->nelem; i < s->nelem; ++i)
2140: /* MUTANT (rep_op) */    for (--s->nelem; i <= s->nelem; ++i)
2140: /* MUTANT (rep_op) */    for (--s->nelem; i > s->nelem; ++i)
2140: /* MUTANT (rep_op) */    for (--s->nelem; i >= s->nelem; ++i)
2140: /* MUTANT (rep_op) */    for (--s->nelem; i == s->nelem; ++i)
2140: /* MUTANT (rep_op) */    for (--s->nelem; i != s->nelem; ++i)
2140: /* MUTANT (rep_op) */    for (--s->nelem; i < s->nelem; --i)
2141: /* MUTANT (rep_op) */      s->elems[i] = s->elems[i - 1];
2141: /* MUTANT (rep_op) */      s->elems[i] = s->elems[i * 1];
2141: /* MUTANT (rep_op) */      s->elems[i] = s->elems[i % 1];
2141: /* MUTANT (rep_const) */      s->elems[i] = s->elems[i + 0];
2141: /* MUTANT (rep_const) */      s->elems[i] = s->elems[i + -1];
2141: /* MUTANT (rep_const) */      s->elems[i] = s->elems[i + ((1)+1)];
2151: /* MUTANT (del_stmt) */ /*      position_set *s; */ 
2152: /* MUTANT (del_stmt) */ /*      int newline; */ 
2153: /* MUTANT (del_stmt) */ /*      int letter; */ 
2155: /* MUTANT (del_stmt) */ /*   int hash = 0; */ 
2155: /* MUTANT (rep_const) */  int hash = 1;
2155: /* MUTANT (rep_const) */  int hash = -1;
2156: /* MUTANT (del_stmt) */ /*   int constraint; */ 
2157: /* MUTANT (del_stmt) */ /*   int i, j; */ 
2159: /* MUTANT (del_stmt) */ /*   newline = newline ? 1 : 0; */ 
2159: /* MUTANT (rep_const) */  newline = newline ? 0 : 0;
2159: /* MUTANT (rep_const) */  newline = newline ? -1 : 0;
2159: /* MUTANT (rep_const) */  newline = newline ? ((1)+1) : 0;
2159: /* MUTANT (rep_const) */  newline = newline ? 1 : 1;
2159: /* MUTANT (rep_const) */  newline = newline ? 1 : -1;
2160: /* MUTANT (del_stmt) */ /*   letter = letter ? 1 : 0; */ 
2160: /* MUTANT (rep_const) */  letter = letter ? 0 : 0;
2160: /* MUTANT (rep_const) */  letter = letter ? -1 : 0;
2160: /* MUTANT (rep_const) */  letter = letter ? ((1)+1) : 0;
2160: /* MUTANT (rep_const) */  letter = letter ? 1 : 1;
2160: /* MUTANT (rep_const) */  letter = letter ? 1 : -1;
2162: /* MUTANT (rep_op) */  for (i = 0; i <= s->nelem; ++i)
2162: /* MUTANT (rep_op) */  for (i = 0; i > s->nelem; ++i)
2162: /* MUTANT (rep_op) */  for (i = 0; i >= s->nelem; ++i)
2162: /* MUTANT (rep_op) */  for (i = 0; i == s->nelem; ++i)
2162: /* MUTANT (rep_op) */  for (i = 0; i != s->nelem; ++i)
2162: /* MUTANT (rep_op) */  for (i = 0; i < s->nelem; --i)
2162: /* MUTANT (rep_const) */  for (i = 1; i < s->nelem; ++i)
2162: /* MUTANT (rep_const) */  for (i = -1; i < s->nelem; ++i)
2163: /* MUTANT (rep_op) */    hash ^= s->elems[i].index - s->elems[i].constraint;
2163: /* MUTANT (rep_op) */    hash ^= s->elems[i].index * s->elems[i].constraint;
2163: /* MUTANT (rep_op) */    hash ^= s->elems[i].index % s->elems[i].constraint;
2166: /* MUTANT (rep_op) */  for (i = 0; i <= d->sindex; ++i)
2166: /* MUTANT (rep_op) */  for (i = 0; i > d->sindex; ++i)
2166: /* MUTANT (rep_op) */  for (i = 0; i >= d->sindex; ++i)
2166: /* MUTANT (rep_op) */  for (i = 0; i == d->sindex; ++i)
2166: /* MUTANT (rep_op) */  for (i = 0; i != d->sindex; ++i)
2166: /* MUTANT (rep_op) */  for (i = 0; i < d->sindex; --i)
2166: /* MUTANT (rep_const) */  for (i = 1; i < d->sindex; ++i)
2166: /* MUTANT (rep_const) */  for (i = -1; i < d->sindex; ++i)
2168: /* MUTANT (rep_op) */      if (hash == d->states[i].hash || s->nelem != d->states[i].elems.nelem
2168: /* MUTANT (rep_op) */      if (hash != d->states[i].hash && s->nelem != d->states[i].elems.nelem
2168: /* MUTANT (rep_op) */      if (hash != d->states[i].hash || s->nelem == d->states[i].elems.nelem
2169: /* MUTANT (rep_op) */	  && newline != d->states[i].newline || letter != d->states[i].letter)
2169: /* MUTANT (rep_op) */	  || newline == d->states[i].newline || letter != d->states[i].letter)
2169: /* MUTANT (rep_op) */	  || newline != d->states[i].newline && letter != d->states[i].letter)
2169: /* MUTANT (rep_op) */	  || newline != d->states[i].newline || letter == d->states[i].letter)
2171: /* MUTANT (rep_op) */      for (j = 0; j <= s->nelem; ++j)
2171: /* MUTANT (rep_op) */      for (j = 0; j > s->nelem; ++j)
2171: /* MUTANT (rep_op) */      for (j = 0; j >= s->nelem; ++j)
2171: /* MUTANT (rep_op) */      for (j = 0; j == s->nelem; ++j)
2171: /* MUTANT (rep_op) */      for (j = 0; j != s->nelem; ++j)
2171: /* MUTANT (rep_op) */      for (j = 0; j < s->nelem; --j)
2171: /* MUTANT (rep_const) */      for (j = 1; j < s->nelem; ++j)
2171: /* MUTANT (rep_const) */      for (j = -1; j < s->nelem; ++j)
2173: /* MUTANT (rep_op) */	    == d->states[i].elems.elems[j].constraint
2174: /* MUTANT (rep_op) */	    && s->elems[j].index != d->states[i].elems.elems[j].index)
2174: /* MUTANT (rep_op) */	    || s->elems[j].index == d->states[i].elems.elems[j].index)
2176: /* MUTANT (rep_op) */      if (j != s->nelem)
2176: /* MUTANT (negate) */      if(! (j == s->nelem))
2182: /* MUTANT (del_stmt) */ /*   d->states[i].hash = hash; */ 
2183: /* MUTANT (del_stmt) */ /*   MALLOC(d->states[i].elems.elems, position, s->nelem); */ 
2184: /* MUTANT (del_stmt) */ /*   copy(s, &d->states[i].elems); */ 
2185: /* MUTANT (del_stmt) */ /*   d->states[i].newline = newline; */ 
2186: /* MUTANT (del_stmt) */ /*   d->states[i].letter = letter; */ 
2187: /* MUTANT (del_stmt) */ /*   d->states[i].backref = 0; */ 
2187: /* MUTANT (rep_const) */  d->states[i].backref = 1;
2187: /* MUTANT (rep_const) */  d->states[i].backref = -1;
2188: /* MUTANT (del_stmt) */ /*   d->states[i].constraint = 0; */ 
2188: /* MUTANT (rep_const) */  d->states[i].constraint = 1;
2188: /* MUTANT (rep_const) */  d->states[i].constraint = -1;
2189: /* MUTANT (del_stmt) */ /*   d->states[i].first_end = 0; */ 
2189: /* MUTANT (rep_const) */  d->states[i].first_end = 1;
2189: /* MUTANT (rep_const) */  d->states[i].first_end = -1;
2190: /* MUTANT (rep_op) */  for (j = 0; j <= s->nelem; ++j)
2190: /* MUTANT (rep_op) */  for (j = 0; j > s->nelem; ++j)
2190: /* MUTANT (rep_op) */  for (j = 0; j >= s->nelem; ++j)
2190: /* MUTANT (rep_op) */  for (j = 0; j == s->nelem; ++j)
2190: /* MUTANT (rep_op) */  for (j = 0; j != s->nelem; ++j)
2190: /* MUTANT (rep_op) */  for (j = 0; j < s->nelem; --j)
2190: /* MUTANT (rep_const) */  for (j = 1; j < s->nelem; ++j)
2190: /* MUTANT (rep_const) */  for (j = -1; j < s->nelem; ++j)
2191: /* MUTANT (rep_op) */    if (d->tokens[s->elems[j].index] <= 0)
2191: /* MUTANT (rep_op) */    if (d->tokens[s->elems[j].index] > 0)
2191: /* MUTANT (rep_op) */    if (d->tokens[s->elems[j].index] >= 0)
2191: /* MUTANT (rep_op) */    if (d->tokens[s->elems[j].index] == 0)
2191: /* MUTANT (rep_op) */    if (d->tokens[s->elems[j].index] != 0)
2191: /* MUTANT (rep_const) */    if (d->tokens[s->elems[j].index] < 1)
2191: /* MUTANT (rep_const) */    if (d->tokens[s->elems[j].index] < -1)
2191: /* MUTANT (negate) */    if(! (d->tokens[s->elems[j].index] < 0))
2193: /* MUTANT (del_stmt) */ /* 	constraint = s->elems[j].constraint; */ 
2194: /* MUTANT (rep_const) */	if (SUCCEEDS_IN_CONTEXT(constraint, newline, 1, letter, 0)
2194: /* MUTANT (rep_const) */	if (SUCCEEDS_IN_CONTEXT(constraint, newline, -1, letter, 0)
2194: /* MUTANT (rep_const) */	if (SUCCEEDS_IN_CONTEXT(constraint, newline, 0, letter, 1)
2194: /* MUTANT (rep_const) */	if (SUCCEEDS_IN_CONTEXT(constraint, newline, 0, letter, -1)
2195: /* MUTANT (rep_op) */	    && SUCCEEDS_IN_CONTEXT(constraint, newline, 0, letter, 1)
2195: /* MUTANT (rep_const) */	    || SUCCEEDS_IN_CONTEXT(constraint, newline, 1, letter, 1)
2195: /* MUTANT (rep_const) */	    || SUCCEEDS_IN_CONTEXT(constraint, newline, -1, letter, 1)
2195: /* MUTANT (rep_const) */	    || SUCCEEDS_IN_CONTEXT(constraint, newline, 0, letter, 0)
2195: /* MUTANT (rep_const) */	    || SUCCEEDS_IN_CONTEXT(constraint, newline, 0, letter, -1)
2195: /* MUTANT (rep_const) */	    || SUCCEEDS_IN_CONTEXT(constraint, newline, 0, letter, ((1)+1))
2196: /* MUTANT (rep_op) */	    && SUCCEEDS_IN_CONTEXT(constraint, newline, 1, letter, 0)
2196: /* MUTANT (rep_const) */	    || SUCCEEDS_IN_CONTEXT(constraint, newline, 0, letter, 0)
2196: /* MUTANT (rep_const) */	    || SUCCEEDS_IN_CONTEXT(constraint, newline, -1, letter, 0)
2196: /* MUTANT (rep_const) */	    || SUCCEEDS_IN_CONTEXT(constraint, newline, ((1)+1), letter, 0)
2196: /* MUTANT (rep_const) */	    || SUCCEEDS_IN_CONTEXT(constraint, newline, 1, letter, 1)
2196: /* MUTANT (rep_const) */	    || SUCCEEDS_IN_CONTEXT(constraint, newline, 1, letter, -1)
2197: /* MUTANT (rep_op) */	    && SUCCEEDS_IN_CONTEXT(constraint, newline, 1, letter, 1))
2197: /* MUTANT (rep_const) */	    || SUCCEEDS_IN_CONTEXT(constraint, newline, 0, letter, 1))
2197: /* MUTANT (rep_const) */	    || SUCCEEDS_IN_CONTEXT(constraint, newline, -1, letter, 1))
2197: /* MUTANT (rep_const) */	    || SUCCEEDS_IN_CONTEXT(constraint, newline, ((1)+1), letter, 1))
2197: /* MUTANT (rep_const) */	    || SUCCEEDS_IN_CONTEXT(constraint, newline, 1, letter, 0))
2197: /* MUTANT (rep_const) */	    || SUCCEEDS_IN_CONTEXT(constraint, newline, 1, letter, -1))
2197: /* MUTANT (rep_const) */	    || SUCCEEDS_IN_CONTEXT(constraint, newline, 1, letter, ((1)+1)))
2199: /* MUTANT (negate) */	if(! (! d->states[i].first_end))
2202: /* MUTANT (rep_op) */    else if (d->tokens[s->elems[j].index] != BACKREF)
2202: /* MUTANT (negate) */    else if(! (d->tokens[s->elems[j].index] == BACKREF))
2204: /* MUTANT (del_stmt) */ /* 	d->states[i].constraint = NO_CONSTRAINT; */ 
2205: /* MUTANT (del_stmt) */ /* 	d->states[i].backref = 1; */ 
2205: /* MUTANT (rep_const) */	d->states[i].backref = 0;
2205: /* MUTANT (rep_const) */	d->states[i].backref = -1;
2205: /* MUTANT (rep_const) */	d->states[i].backref = ((1)+1);
2208: /* MUTANT (rep_op) */  --d->sindex;
2210: /* MUTANT (del_stmt) */ /*   return i; */ 
2223: /* MUTANT (del_stmt) */ /*      struct dfa *d; */ 
2225: /* MUTANT (del_stmt) */ /*   int i, j; */ 
2226: /* MUTANT (del_stmt) */ /*   int *visited; */ 
2227: /* MUTANT (del_stmt) */ /*   position p, old; */ 
2229: /* MUTANT (del_stmt) */ /*   MALLOC(visited, int, d->tindex); */ 
2230: /* MUTANT (rep_op) */  for (i = 0; i <= d->tindex; ++i)
2230: /* MUTANT (rep_op) */  for (i = 0; i > d->tindex; ++i)
2230: /* MUTANT (rep_op) */  for (i = 0; i >= d->tindex; ++i)
2230: /* MUTANT (rep_op) */  for (i = 0; i == d->tindex; ++i)
2230: /* MUTANT (rep_op) */  for (i = 0; i != d->tindex; ++i)
2230: /* MUTANT (rep_op) */  for (i = 0; i < d->tindex; --i)
2230: /* MUTANT (rep_const) */  for (i = 1; i < d->tindex; ++i)
2230: /* MUTANT (rep_const) */  for (i = -1; i < d->tindex; ++i)
2231: /* MUTANT (rep_const) */    visited[i] = 1;
2231: /* MUTANT (rep_const) */    visited[i] = -1;
2233: /* MUTANT (rep_op) */  for (i = 0; i <= s->nelem; ++i)
2233: /* MUTANT (rep_op) */  for (i = 0; i > s->nelem; ++i)
2233: /* MUTANT (rep_op) */  for (i = 0; i >= s->nelem; ++i)
2233: /* MUTANT (rep_op) */  for (i = 0; i == s->nelem; ++i)
2233: /* MUTANT (rep_op) */  for (i = 0; i != s->nelem; ++i)
2233: /* MUTANT (rep_op) */  for (i = 0; i < s->nelem; --i)
2233: /* MUTANT (rep_const) */  for (i = 1; i < s->nelem; ++i)
2233: /* MUTANT (rep_const) */  for (i = -1; i < s->nelem; ++i)
2234: /* MUTANT (rep_op) */    if (d->tokens[s->elems[i].index] <= NOTCHAR
2234: /* MUTANT (rep_op) */    if (d->tokens[s->elems[i].index] < NOTCHAR
2234: /* MUTANT (rep_op) */    if (d->tokens[s->elems[i].index] > NOTCHAR
2234: /* MUTANT (rep_op) */    if (d->tokens[s->elems[i].index] == NOTCHAR
2234: /* MUTANT (rep_op) */    if (d->tokens[s->elems[i].index] != NOTCHAR
2235: /* MUTANT (rep_op) */	|| d->tokens[s->elems[i].index] != BACKREF
2235: /* MUTANT (rep_op) */	&& d->tokens[s->elems[i].index] == BACKREF
2236: /* MUTANT (rep_op) */	|| d->tokens[s->elems[i].index] < CSET)
2236: /* MUTANT (rep_op) */	&& d->tokens[s->elems[i].index] <= CSET)
2236: /* MUTANT (rep_op) */	&& d->tokens[s->elems[i].index] > CSET)
2236: /* MUTANT (rep_op) */	&& d->tokens[s->elems[i].index] >= CSET)
2236: /* MUTANT (rep_op) */	&& d->tokens[s->elems[i].index] == CSET)
2236: /* MUTANT (rep_op) */	&& d->tokens[s->elems[i].index] != CSET)
2238: /* MUTANT (del_stmt) */ /* 	old = s->elems[i]; */ 
2239: /* MUTANT (del_stmt) */ /* 	p.constraint = old.constraint; */ 
2240: /* MUTANT (del_stmt) */ /* 	delete(s->elems[i], s); */ 
2241: /* MUTANT (negate) */	if(! (visited[old.index]))
2243: /* MUTANT (del_stmt) */ /* 	    --i; */ 
2243: /* MUTANT (rep_op) */	    ++i;
2244: /* MUTANT (del_stmt) */ /* 	    continue; */ 
2246: /* MUTANT (rep_const) */	visited[old.index] = 0;
2246: /* MUTANT (rep_const) */	visited[old.index] = -1;
2246: /* MUTANT (rep_const) */	visited[old.index] = ((1)+1);
2251: /* MUTANT (del_stmt) */ /* 	    break; */ 
2254: /* MUTANT (del_stmt) */ /* 	    break; */ 
2257: /* MUTANT (del_stmt) */ /* 	    break; */ 
2260: /* MUTANT (del_stmt) */ /* 	    break; */ 
2263: /* MUTANT (del_stmt) */ /* 	    break; */ 
2266: /* MUTANT (del_stmt) */ /* 	    break; */ 
2270: /* MUTANT (rep_op) */	for (j = 0; j <= d->follows[old.index].nelem; ++j)
2270: /* MUTANT (rep_op) */	for (j = 0; j > d->follows[old.index].nelem; ++j)
2270: /* MUTANT (rep_op) */	for (j = 0; j >= d->follows[old.index].nelem; ++j)
2270: /* MUTANT (rep_op) */	for (j = 0; j == d->follows[old.index].nelem; ++j)
2270: /* MUTANT (rep_op) */	for (j = 0; j != d->follows[old.index].nelem; ++j)
2270: /* MUTANT (rep_op) */	for (j = 0; j < d->follows[old.index].nelem; --j)
2270: /* MUTANT (rep_const) */	for (j = 1; j < d->follows[old.index].nelem; ++j)
2270: /* MUTANT (rep_const) */	for (j = -1; j < d->follows[old.index].nelem; ++j)
2272: /* MUTANT (del_stmt) */ /* 	    p.index = d->follows[old.index].elems[j].index; */ 
2273: /* MUTANT (del_stmt) */ /* 	    insert(p, s); */ 
2276: /* MUTANT (rep_const) */	i = 0;
2276: /* MUTANT (rep_const) */	i = 1;
2276: /* MUTANT (rep_const) */	i = ((-1)+1);
2276: /* MUTANT (rep_const) */	i = ((-1)-1);
2337: /* MUTANT (del_stmt) */ /*      int searchflag; */ 
2339: /* MUTANT (del_stmt) */ /*   int *nullable; */ 		/* Nullable stack. */
2340: /* MUTANT (del_stmt) */ /*   int *nfirstpos; */ 		/* Element count stack for firstpos sets. */
2341: /* MUTANT (del_stmt) */ /*   position *firstpos; */ 		/* Array where firstpos elements are stored. */
2342: /* MUTANT (del_stmt) */ /*   int *nlastpos; */ 		/* Element count stack for lastpos sets. */
2343: /* MUTANT (del_stmt) */ /*   position *lastpos; */ 		/* Array where lastpos elements are stored. */
2344: /* MUTANT (del_stmt) */ /*   int *nalloc; */ 			/* Sizes of arrays allocated to follow sets. */
2345: /* MUTANT (del_stmt) */ /*   position_set tmp; */ 		/* Temporary set for merging sets. */
2346: /* MUTANT (del_stmt) */ /*   position_set merged; */ 		/* Result of merging sets. */
2347: /* MUTANT (del_stmt) */ /*   int wants_newline; */ 		/* True if some position wants newline info. */
2348: /* MUTANT (del_stmt) */ /*   int *o_nullable; */ 
2349: /* MUTANT (del_stmt) */ /*   int *o_nfirst, *o_nlast; */ 
2350: /* MUTANT (del_stmt) */ /*   position *o_firstpos, *o_lastpos; */ 
2351: /* MUTANT (del_stmt) */ /*   int i, j; */ 
2352: /* MUTANT (del_stmt) */ /*   position *pos; */ 
2356: /* MUTANT (rep_op) */  for (i = 0; i <= d->tindex; ++i)
2356: /* MUTANT (rep_op) */  for (i = 0; i > d->tindex; ++i)
2356: /* MUTANT (rep_op) */  for (i = 0; i >= d->tindex; ++i)
2356: /* MUTANT (rep_op) */  for (i = 0; i == d->tindex; ++i)
2356: /* MUTANT (rep_op) */  for (i = 0; i != d->tindex; ++i)
2356: /* MUTANT (rep_op) */  for (i = 0; i < d->tindex; --i)
2356: /* MUTANT (rep_const) */  for (i = 1; i < d->tindex; ++i)
2356: /* MUTANT (rep_const) */  for (i = -1; i < d->tindex; ++i)
2358: /* MUTANT (del_stmt) */ /*       fprintf(stderr, " %d:", i); */ 
2359: /* MUTANT (del_stmt) */ /*       prtok(d->tokens[i]); */ 
2366: /* MUTANT (del_stmt) */ /*   MALLOC(nullable, int, d->depth); */ 
2367: /* MUTANT (del_stmt) */ /*   o_nullable = nullable; */ 
2368: /* MUTANT (del_stmt) */ /*   MALLOC(nfirstpos, int, d->depth); */ 
2369: /* MUTANT (del_stmt) */ /*   o_nfirst = nfirstpos; */ 
2370: /* MUTANT (del_stmt) */ /*   MALLOC(firstpos, position, d->nleaves); */ 
2371: /* MUTANT (del_stmt) */ /*   o_firstpos = firstpos, firstpos += d->nleaves; */ 
2371: /* MUTANT (rep_op) */  o_firstpos = firstpos, firstpos -= d->nleaves;
2371: /* MUTANT (rep_op) */  o_firstpos = firstpos, firstpos *= d->nleaves;
2371: /* MUTANT (rep_op) */  o_firstpos = firstpos, firstpos %= d->nleaves;
2372: /* MUTANT (del_stmt) */ /*   MALLOC(nlastpos, int, d->depth); */ 
2373: /* MUTANT (del_stmt) */ /*   o_nlast = nlastpos; */ 
2374: /* MUTANT (del_stmt) */ /*   MALLOC(lastpos, position, d->nleaves); */ 
2375: /* MUTANT (del_stmt) */ /*   o_lastpos = lastpos, lastpos += d->nleaves; */ 
2375: /* MUTANT (rep_op) */  o_lastpos = lastpos, lastpos -= d->nleaves;
2375: /* MUTANT (rep_op) */  o_lastpos = lastpos, lastpos *= d->nleaves;
2375: /* MUTANT (rep_op) */  o_lastpos = lastpos, lastpos %= d->nleaves;
2376: /* MUTANT (del_stmt) */ /*   MALLOC(nalloc, int, d->tindex); */ 
2377: /* MUTANT (rep_op) */  for (i = 0; i <= d->tindex; ++i)
2377: /* MUTANT (rep_op) */  for (i = 0; i > d->tindex; ++i)
2377: /* MUTANT (rep_op) */  for (i = 0; i >= d->tindex; ++i)
2377: /* MUTANT (rep_op) */  for (i = 0; i == d->tindex; ++i)
2377: /* MUTANT (rep_op) */  for (i = 0; i != d->tindex; ++i)
2377: /* MUTANT (rep_op) */  for (i = 0; i < d->tindex; --i)
2377: /* MUTANT (rep_const) */  for (i = 1; i < d->tindex; ++i)
2377: /* MUTANT (rep_const) */  for (i = -1; i < d->tindex; ++i)
2378: /* MUTANT (rep_const) */    nalloc[i] = 1;
2378: /* MUTANT (rep_const) */    nalloc[i] = -1;
2379: /* MUTANT (del_stmt) */ /*   MALLOC(merged.elems, position, d->nleaves); */ 
2381: /* MUTANT (del_stmt) */ /*   CALLOC(d->follows, position_set, d->tindex); */ 
2383: /* MUTANT (rep_op) */  for (i = 0; i <= d->tindex; ++i)
2383: /* MUTANT (rep_op) */  for (i = 0; i > d->tindex; ++i)
2383: /* MUTANT (rep_op) */  for (i = 0; i >= d->tindex; ++i)
2383: /* MUTANT (rep_op) */  for (i = 0; i == d->tindex; ++i)
2383: /* MUTANT (rep_op) */  for (i = 0; i != d->tindex; ++i)
2383: /* MUTANT (rep_op) */  for (i = 0; i < d->tindex; --i)
2383: /* MUTANT (rep_const) */  for (i = 1; i < d->tindex; ++i)
2383: /* MUTANT (rep_const) */  for (i = -1; i < d->tindex; ++i)
2391: /* MUTANT (rep_op) */	*nullable-- = 1;
2391: /* MUTANT (rep_const) */	*nullable++ = 0;
2391: /* MUTANT (rep_const) */	*nullable++ = -1;
2391: /* MUTANT (rep_const) */	*nullable++ = ((1)+1);
2394: /* MUTANT (del_stmt) */ /* 	*nfirstpos++ = *nlastpos++ = 0; */ 
2394: /* MUTANT (rep_op) */	*nfirstpos-- = *nlastpos++ = 0;
2394: /* MUTANT (rep_op) */	*nfirstpos++ = *nlastpos-- = 0;
2394: /* MUTANT (rep_const) */	*nfirstpos++ = *nlastpos++ = 1;
2394: /* MUTANT (rep_const) */	*nfirstpos++ = *nlastpos++ = -1;
2395: /* MUTANT (del_stmt) */ /* 	break; */ 
2401: /* MUTANT (rep_const) */	tmp.nelem = nfirstpos[0];
2401: /* MUTANT (rep_const) */	tmp.nelem = nfirstpos[1];
2401: /* MUTANT (rep_const) */	tmp.nelem = nfirstpos[((-1)+1)];
2401: /* MUTANT (rep_const) */	tmp.nelem = nfirstpos[((-1)-1)];
2402: /* MUTANT (del_stmt) */ /* 	tmp.elems = firstpos; */ 
2403: /* MUTANT (del_stmt) */ /* 	pos = lastpos; */ 
2404: /* MUTANT (rep_op) */	for (j = 0; j <= nlastpos[-1]; ++j)
2404: /* MUTANT (rep_op) */	for (j = 0; j > nlastpos[-1]; ++j)
2404: /* MUTANT (rep_op) */	for (j = 0; j >= nlastpos[-1]; ++j)
2404: /* MUTANT (rep_op) */	for (j = 0; j == nlastpos[-1]; ++j)
2404: /* MUTANT (rep_op) */	for (j = 0; j != nlastpos[-1]; ++j)
2404: /* MUTANT (rep_op) */	for (j = 0; j < nlastpos[-1]; --j)
2404: /* MUTANT (rep_const) */	for (j = 1; j < nlastpos[-1]; ++j)
2404: /* MUTANT (rep_const) */	for (j = -1; j < nlastpos[-1]; ++j)
2404: /* MUTANT (rep_const) */	for (j = 0; j < nlastpos[0]; ++j)
2404: /* MUTANT (rep_const) */	for (j = 0; j < nlastpos[1]; ++j)
2404: /* MUTANT (rep_const) */	for (j = 0; j < nlastpos[((-1)+1)]; ++j)
2404: /* MUTANT (rep_const) */	for (j = 0; j < nlastpos[((-1)-1)]; ++j)
2406: /* MUTANT (del_stmt) */ /* 	    merge(&tmp, &d->follows[pos[j].index], &merged); */ 
2408: /* MUTANT (rep_const) */				 nalloc[pos[j].index], merged.nelem - 0);
2408: /* MUTANT (rep_const) */				 nalloc[pos[j].index], merged.nelem - -1);
2408: /* MUTANT (rep_const) */				 nalloc[pos[j].index], merged.nelem - ((1)+1));
2409: /* MUTANT (del_stmt) */ /* 	    copy(&merged, &d->follows[pos[j].index]); */ 
2414: /* MUTANT (rep_op) */	if (d->tokens[i] == PLUS)
2414: /* MUTANT (negate) */	if(! (d->tokens[i] != PLUS))
2415: /* MUTANT (rep_const) */	  nullable[0] = 1;
2415: /* MUTANT (rep_const) */	  nullable[1] = 1;
2415: /* MUTANT (rep_const) */	  nullable[((-1)+1)] = 1;
2415: /* MUTANT (rep_const) */	  nullable[((-1)-1)] = 1;
2415: /* MUTANT (rep_const) */	  nullable[-1] = 0;
2415: /* MUTANT (rep_const) */	  nullable[-1] = -1;
2415: /* MUTANT (rep_const) */	  nullable[-1] = ((1)+1);
2416: /* MUTANT (del_stmt) */ /* 	break; */ 
2421: /* MUTANT (rep_const) */	tmp.nelem = nfirstpos[0];
2421: /* MUTANT (rep_const) */	tmp.nelem = nfirstpos[1];
2421: /* MUTANT (rep_const) */	tmp.nelem = nfirstpos[((-1)+1)];
2421: /* MUTANT (rep_const) */	tmp.nelem = nfirstpos[((-1)-1)];
2422: /* MUTANT (del_stmt) */ /* 	tmp.elems = firstpos; */ 
2423: /* MUTANT (del_stmt) */ /* 	pos = lastpos + nlastpos[-1]; */ 
2423: /* MUTANT (rep_op) */	pos = lastpos - nlastpos[-1];
2423: /* MUTANT (rep_op) */	pos = lastpos * nlastpos[-1];
2423: /* MUTANT (rep_op) */	pos = lastpos % nlastpos[-1];
2423: /* MUTANT (rep_const) */	pos = lastpos + nlastpos[0];
2423: /* MUTANT (rep_const) */	pos = lastpos + nlastpos[1];
2423: /* MUTANT (rep_const) */	pos = lastpos + nlastpos[((-1)+1)];
2423: /* MUTANT (rep_const) */	pos = lastpos + nlastpos[((-1)-1)];
2424: /* MUTANT (rep_op) */	for (j = 0; j <= nlastpos[-2]; ++j)
2424: /* MUTANT (rep_op) */	for (j = 0; j > nlastpos[-2]; ++j)
2424: /* MUTANT (rep_op) */	for (j = 0; j >= nlastpos[-2]; ++j)
2424: /* MUTANT (rep_op) */	for (j = 0; j == nlastpos[-2]; ++j)
2424: /* MUTANT (rep_op) */	for (j = 0; j != nlastpos[-2]; ++j)
2424: /* MUTANT (rep_op) */	for (j = 0; j < nlastpos[-2]; --j)
2424: /* MUTANT (rep_const) */	for (j = 1; j < nlastpos[-2]; ++j)
2424: /* MUTANT (rep_const) */	for (j = -1; j < nlastpos[-2]; ++j)
2424: /* MUTANT (rep_const) */	for (j = 0; j < nlastpos[0]; ++j)
2424: /* MUTANT (rep_const) */	for (j = 0; j < nlastpos[1]; ++j)
2424: /* MUTANT (rep_const) */	for (j = 0; j < nlastpos[-1]; ++j)
2424: /* MUTANT (rep_const) */	for (j = 0; j < nlastpos[((-2)+1)]; ++j)
2424: /* MUTANT (rep_const) */	for (j = 0; j < nlastpos[((-2)-1)]; ++j)
2426: /* MUTANT (del_stmt) */ /* 	    merge(&tmp, &d->follows[pos[j].index], &merged); */ 
2428: /* MUTANT (rep_const) */				 nalloc[pos[j].index], merged.nelem - 0);
2428: /* MUTANT (rep_const) */				 nalloc[pos[j].index], merged.nelem - -1);
2428: /* MUTANT (rep_const) */				 nalloc[pos[j].index], merged.nelem - ((1)+1));
2429: /* MUTANT (del_stmt) */ /* 	    copy(&merged, &d->follows[pos[j].index]); */ 
2434: /* MUTANT (rep_const) */	if (nullable[0])
2434: /* MUTANT (rep_const) */	if (nullable[1])
2434: /* MUTANT (rep_const) */	if (nullable[-1])
2434: /* MUTANT (rep_const) */	if (nullable[((-2)+1)])
2434: /* MUTANT (rep_const) */	if (nullable[((-2)-1)])
2434: /* MUTANT (negate) */	if(! (nullable[-2]))
2435: /* MUTANT (rep_op) */	  nfirstpos[-2] -= nfirstpos[-1];
2435: /* MUTANT (rep_op) */	  nfirstpos[-2] *= nfirstpos[-1];
2435: /* MUTANT (rep_op) */	  nfirstpos[-2] %= nfirstpos[-1];
2435: /* MUTANT (rep_const) */	  nfirstpos[0] += nfirstpos[-1];
2435: /* MUTANT (rep_const) */	  nfirstpos[1] += nfirstpos[-1];
2435: /* MUTANT (rep_const) */	  nfirstpos[-1] += nfirstpos[-1];
2435: /* MUTANT (rep_const) */	  nfirstpos[((-2)+1)] += nfirstpos[-1];
2435: /* MUTANT (rep_const) */	  nfirstpos[((-2)-1)] += nfirstpos[-1];
2435: /* MUTANT (rep_const) */	  nfirstpos[-2] += nfirstpos[0];
2435: /* MUTANT (rep_const) */	  nfirstpos[-2] += nfirstpos[1];
2435: /* MUTANT (rep_const) */	  nfirstpos[-2] += nfirstpos[((-1)+1)];
2435: /* MUTANT (rep_const) */	  nfirstpos[-2] += nfirstpos[((-1)-1)];
2437: /* MUTANT (rep_op) */	  firstpos -= nfirstpos[-1];
2437: /* MUTANT (rep_op) */	  firstpos *= nfirstpos[-1];
2437: /* MUTANT (rep_op) */	  firstpos %= nfirstpos[-1];
2437: /* MUTANT (rep_const) */	  firstpos += nfirstpos[0];
2437: /* MUTANT (rep_const) */	  firstpos += nfirstpos[1];
2437: /* MUTANT (rep_const) */	  firstpos += nfirstpos[((-1)+1)];
2437: /* MUTANT (rep_const) */	  firstpos += nfirstpos[((-1)-1)];
2438: /* MUTANT (del_stmt) */ /* 	--nfirstpos; */ 
2438: /* MUTANT (rep_op) */	++nfirstpos;
2442: /* MUTANT (rep_const) */	if (nullable[0])
2442: /* MUTANT (rep_const) */	if (nullable[1])
2442: /* MUTANT (rep_const) */	if (nullable[((-1)+1)])
2442: /* MUTANT (rep_const) */	if (nullable[((-1)-1)])
2442: /* MUTANT (negate) */	if(! (nullable[-1]))
2443: /* MUTANT (rep_op) */	  nlastpos[-2] -= nlastpos[-1];
2443: /* MUTANT (rep_op) */	  nlastpos[-2] *= nlastpos[-1];
2443: /* MUTANT (rep_op) */	  nlastpos[-2] %= nlastpos[-1];
2443: /* MUTANT (rep_const) */	  nlastpos[0] += nlastpos[-1];
2443: /* MUTANT (rep_const) */	  nlastpos[1] += nlastpos[-1];
2443: /* MUTANT (rep_const) */	  nlastpos[-1] += nlastpos[-1];
2443: /* MUTANT (rep_const) */	  nlastpos[((-2)+1)] += nlastpos[-1];
2443: /* MUTANT (rep_const) */	  nlastpos[((-2)-1)] += nlastpos[-1];
2443: /* MUTANT (rep_const) */	  nlastpos[-2] += nlastpos[0];
2443: /* MUTANT (rep_const) */	  nlastpos[-2] += nlastpos[1];
2443: /* MUTANT (rep_const) */	  nlastpos[-2] += nlastpos[((-1)+1)];
2443: /* MUTANT (rep_const) */	  nlastpos[-2] += nlastpos[((-1)-1)];
2446: /* MUTANT (del_stmt) */ /* 	    pos = lastpos + nlastpos[-2]; */ 
2446: /* MUTANT (rep_op) */	    pos = lastpos - nlastpos[-2];
2446: /* MUTANT (rep_op) */	    pos = lastpos * nlastpos[-2];
2446: /* MUTANT (rep_op) */	    pos = lastpos % nlastpos[-2];
2446: /* MUTANT (rep_const) */	    pos = lastpos + nlastpos[0];
2446: /* MUTANT (rep_const) */	    pos = lastpos + nlastpos[1];
2446: /* MUTANT (rep_const) */	    pos = lastpos + nlastpos[-1];
2446: /* MUTANT (rep_const) */	    pos = lastpos + nlastpos[((-2)+1)];
2446: /* MUTANT (rep_const) */	    pos = lastpos + nlastpos[((-2)-1)];
2447: /* MUTANT (rep_op) */	    for (j = nlastpos[-1] - 1; j <= 0; --j)
2447: /* MUTANT (rep_op) */	    for (j = nlastpos[-1] - 1; j < 0; --j)
2447: /* MUTANT (rep_op) */	    for (j = nlastpos[-1] - 1; j > 0; --j)
2447: /* MUTANT (rep_op) */	    for (j = nlastpos[-1] - 1; j == 0; --j)
2447: /* MUTANT (rep_op) */	    for (j = nlastpos[-1] - 1; j != 0; --j)
2447: /* MUTANT (rep_op) */	    for (j = nlastpos[-1] - 1; j >= 0; ++j)
2447: /* MUTANT (rep_const) */	    for (j = nlastpos[0] - 1; j >= 0; --j)
2447: /* MUTANT (rep_const) */	    for (j = nlastpos[1] - 1; j >= 0; --j)
2447: /* MUTANT (rep_const) */	    for (j = nlastpos[((-1)+1)] - 1; j >= 0; --j)
2447: /* MUTANT (rep_const) */	    for (j = nlastpos[((-1)-1)] - 1; j >= 0; --j)
2447: /* MUTANT (rep_const) */	    for (j = nlastpos[-1] - 0; j >= 0; --j)
2447: /* MUTANT (rep_const) */	    for (j = nlastpos[-1] - -1; j >= 0; --j)
2447: /* MUTANT (rep_const) */	    for (j = nlastpos[-1] - ((1)+1); j >= 0; --j)
2447: /* MUTANT (rep_const) */	    for (j = nlastpos[-1] - 1; j >= 1; --j)
2447: /* MUTANT (rep_const) */	    for (j = nlastpos[-1] - 1; j >= -1; --j)
2449: /* MUTANT (del_stmt) */ /* 	    lastpos += nlastpos[-2]; */ 
2449: /* MUTANT (rep_op) */	    lastpos -= nlastpos[-2];
2449: /* MUTANT (rep_op) */	    lastpos *= nlastpos[-2];
2449: /* MUTANT (rep_op) */	    lastpos %= nlastpos[-2];
2449: /* MUTANT (rep_const) */	    lastpos += nlastpos[0];
2449: /* MUTANT (rep_const) */	    lastpos += nlastpos[1];
2449: /* MUTANT (rep_const) */	    lastpos += nlastpos[-1];
2449: /* MUTANT (rep_const) */	    lastpos += nlastpos[((-2)+1)];
2449: /* MUTANT (rep_const) */	    lastpos += nlastpos[((-2)-1)];
2450: /* MUTANT (del_stmt) */ /* 	    nlastpos[-2] = nlastpos[-1]; */ 
2450: /* MUTANT (rep_const) */	    nlastpos[0] = nlastpos[-1];
2450: /* MUTANT (rep_const) */	    nlastpos[1] = nlastpos[-1];
2450: /* MUTANT (rep_const) */	    nlastpos[-1] = nlastpos[-1];
2450: /* MUTANT (rep_const) */	    nlastpos[((-2)+1)] = nlastpos[-1];
2450: /* MUTANT (rep_const) */	    nlastpos[((-2)-1)] = nlastpos[-1];
2450: /* MUTANT (rep_const) */	    nlastpos[-2] = nlastpos[0];
2450: /* MUTANT (rep_const) */	    nlastpos[-2] = nlastpos[1];
2450: /* MUTANT (rep_const) */	    nlastpos[-2] = nlastpos[((-1)+1)];
2450: /* MUTANT (rep_const) */	    nlastpos[-2] = nlastpos[((-1)-1)];
2452: /* MUTANT (rep_op) */	++nlastpos;
2455: /* MUTANT (del_stmt) */ /* 	nullable[-2] = nullable[-1] && nullable[-2]; */ 
2455: /* MUTANT (rep_op) */	nullable[-2] = nullable[-1] || nullable[-2];
2455: /* MUTANT (rep_const) */	nullable[0] = nullable[-1] && nullable[-2];
2455: /* MUTANT (rep_const) */	nullable[1] = nullable[-1] && nullable[-2];
2455: /* MUTANT (rep_const) */	nullable[-1] = nullable[-1] && nullable[-2];
2455: /* MUTANT (rep_const) */	nullable[((-2)+1)] = nullable[-1] && nullable[-2];
2455: /* MUTANT (rep_const) */	nullable[((-2)-1)] = nullable[-1] && nullable[-2];
2455: /* MUTANT (rep_const) */	nullable[-2] = nullable[0] && nullable[-2];
2455: /* MUTANT (rep_const) */	nullable[-2] = nullable[1] && nullable[-2];
2455: /* MUTANT (rep_const) */	nullable[-2] = nullable[((-1)+1)] && nullable[-2];
2455: /* MUTANT (rep_const) */	nullable[-2] = nullable[((-1)-1)] && nullable[-2];
2455: /* MUTANT (rep_const) */	nullable[-2] = nullable[-1] && nullable[0];
2455: /* MUTANT (rep_const) */	nullable[-2] = nullable[-1] && nullable[1];
2455: /* MUTANT (rep_const) */	nullable[-2] = nullable[-1] && nullable[-1];
2455: /* MUTANT (rep_const) */	nullable[-2] = nullable[-1] && nullable[((-2)+1)];
2455: /* MUTANT (rep_const) */	nullable[-2] = nullable[-1] && nullable[((-2)-1)];
2456: /* MUTANT (del_stmt) */ /* 	--nullable; */ 
2456: /* MUTANT (rep_op) */	++nullable;
2457: /* MUTANT (del_stmt) */ /* 	break; */ 
2462: /* MUTANT (rep_op) */	nfirstpos[-2] -= nfirstpos[-1];
2462: /* MUTANT (rep_op) */	nfirstpos[-2] *= nfirstpos[-1];
2462: /* MUTANT (rep_op) */	nfirstpos[-2] %= nfirstpos[-1];
2462: /* MUTANT (rep_const) */	nfirstpos[0] += nfirstpos[-1];
2462: /* MUTANT (rep_const) */	nfirstpos[1] += nfirstpos[-1];
2462: /* MUTANT (rep_const) */	nfirstpos[-1] += nfirstpos[-1];
2462: /* MUTANT (rep_const) */	nfirstpos[((-2)+1)] += nfirstpos[-1];
2462: /* MUTANT (rep_const) */	nfirstpos[((-2)-1)] += nfirstpos[-1];
2462: /* MUTANT (rep_const) */	nfirstpos[-2] += nfirstpos[0];
2462: /* MUTANT (rep_const) */	nfirstpos[-2] += nfirstpos[1];
2462: /* MUTANT (rep_const) */	nfirstpos[-2] += nfirstpos[((-1)+1)];
2462: /* MUTANT (rep_const) */	nfirstpos[-2] += nfirstpos[((-1)-1)];
2463: /* MUTANT (del_stmt) */ /* 	--nfirstpos; */ 
2463: /* MUTANT (rep_op) */	++nfirstpos;
2466: /* MUTANT (del_stmt) */ /* 	nlastpos[-2] += nlastpos[-1]; */ 
2466: /* MUTANT (rep_op) */	nlastpos[-2] -= nlastpos[-1];
2466: /* MUTANT (rep_op) */	nlastpos[-2] *= nlastpos[-1];
2466: /* MUTANT (rep_op) */	nlastpos[-2] %= nlastpos[-1];
2466: /* MUTANT (rep_const) */	nlastpos[0] += nlastpos[-1];
2466: /* MUTANT (rep_const) */	nlastpos[1] += nlastpos[-1];
2466: /* MUTANT (rep_const) */	nlastpos[-1] += nlastpos[-1];
2466: /* MUTANT (rep_const) */	nlastpos[((-2)+1)] += nlastpos[-1];
2466: /* MUTANT (rep_const) */	nlastpos[((-2)-1)] += nlastpos[-1];
2466: /* MUTANT (rep_const) */	nlastpos[-2] += nlastpos[0];
2466: /* MUTANT (rep_const) */	nlastpos[-2] += nlastpos[1];
2466: /* MUTANT (rep_const) */	nlastpos[-2] += nlastpos[((-1)+1)];
2466: /* MUTANT (rep_const) */	nlastpos[-2] += nlastpos[((-1)-1)];
2467: /* MUTANT (del_stmt) */ /* 	--nlastpos; */ 
2467: /* MUTANT (rep_op) */	++nlastpos;
2470: /* MUTANT (del_stmt) */ /* 	nullable[-2] = nullable[-1] || nullable[-2]; */ 
2470: /* MUTANT (rep_op) */	nullable[-2] = nullable[-1] && nullable[-2];
2470: /* MUTANT (rep_const) */	nullable[0] = nullable[-1] || nullable[-2];
2470: /* MUTANT (rep_const) */	nullable[1] = nullable[-1] || nullable[-2];
2470: /* MUTANT (rep_const) */	nullable[-1] = nullable[-1] || nullable[-2];
2470: /* MUTANT (rep_const) */	nullable[((-2)+1)] = nullable[-1] || nullable[-2];
2470: /* MUTANT (rep_const) */	nullable[((-2)-1)] = nullable[-1] || nullable[-2];
2470: /* MUTANT (rep_const) */	nullable[-2] = nullable[0] || nullable[-2];
2470: /* MUTANT (rep_const) */	nullable[-2] = nullable[1] || nullable[-2];
2470: /* MUTANT (rep_const) */	nullable[-2] = nullable[((-1)+1)] || nullable[-2];
2470: /* MUTANT (rep_const) */	nullable[-2] = nullable[((-1)-1)] || nullable[-2];
2470: /* MUTANT (rep_const) */	nullable[-2] = nullable[-1] || nullable[0];
2470: /* MUTANT (rep_const) */	nullable[-2] = nullable[-1] || nullable[1];
2470: /* MUTANT (rep_const) */	nullable[-2] = nullable[-1] || nullable[-1];
2470: /* MUTANT (rep_const) */	nullable[-2] = nullable[-1] || nullable[((-2)+1)];
2470: /* MUTANT (rep_const) */	nullable[-2] = nullable[-1] || nullable[((-2)-1)];
2471: /* MUTANT (del_stmt) */ /* 	--nullable; */ 
2471: /* MUTANT (rep_op) */	++nullable;
2472: /* MUTANT (del_stmt) */ /* 	break; */ 
2480: /* MUTANT (rep_op) */	*nullable-- = d->tokens[i] == BACKREF;
2480: /* MUTANT (rep_op) */	*nullable++ = d->tokens[i] != BACKREF;
2483: /* MUTANT (del_stmt) */ /* 	*nfirstpos++ = *nlastpos++ = 1; */ 
2483: /* MUTANT (rep_op) */	*nfirstpos-- = *nlastpos++ = 1;
2483: /* MUTANT (rep_op) */	*nfirstpos++ = *nlastpos-- = 1;
2483: /* MUTANT (rep_const) */	*nfirstpos++ = *nlastpos++ = 0;
2483: /* MUTANT (rep_const) */	*nfirstpos++ = *nlastpos++ = -1;
2483: /* MUTANT (rep_const) */	*nfirstpos++ = *nlastpos++ = ((1)+1);
2484: /* MUTANT (del_stmt) */ /* 	--firstpos, --lastpos; */ 
2484: /* MUTANT (rep_op) */	++firstpos, --lastpos;
2484: /* MUTANT (rep_op) */	--firstpos, ++lastpos;
2485: /* MUTANT (del_stmt) */ /* 	firstpos->index = lastpos->index = i; */ 
2486: /* MUTANT (del_stmt) */ /* 	firstpos->constraint = lastpos->constraint = NO_CONSTRAINT; */ 
2489: /* MUTANT (del_stmt) */ /* 	nalloc[i] = 1; */ 
2489: /* MUTANT (rep_const) */	nalloc[i] = 0;
2489: /* MUTANT (rep_const) */	nalloc[i] = -1;
2489: /* MUTANT (rep_const) */	nalloc[i] = ((1)+1);
2490: /* MUTANT (del_stmt) */ /* 	MALLOC(d->follows[i].elems, position, nalloc[i]); */ 
2491: /* MUTANT (del_stmt) */ /* 	break; */ 
2496: /* MUTANT (del_stmt) */ /*       prtok(d->tokens[i]); */ 
2497: /* MUTANT (del_stmt) */ /*       putc('\n', stderr); */ 
2498: /* MUTANT (del_stmt) */ /*       fprintf(stderr, nullable[-1] ? " nullable: yes\n" : " nullable: no\n"); */ 
2498: /* MUTANT (rep_const) */      fprintf(stderr, nullable[0] ? " nullable: yes\n" : " nullable: no\n");
2498: /* MUTANT (rep_const) */      fprintf(stderr, nullable[1] ? " nullable: yes\n" : " nullable: no\n");
2498: /* MUTANT (rep_const) */      fprintf(stderr, nullable[((-1)+1)] ? " nullable: yes\n" : " nullable: no\n");
2498: /* MUTANT (rep_const) */      fprintf(stderr, nullable[((-1)-1)] ? " nullable: yes\n" : " nullable: no\n");
2499: /* MUTANT (del_stmt) */ /*       fprintf(stderr, " firstpos:"); */ 
2500: /* MUTANT (rep_op) */      for (j = nfirstpos[-1] - 1; j <= 0; --j)
2500: /* MUTANT (rep_op) */      for (j = nfirstpos[-1] - 1; j < 0; --j)
2500: /* MUTANT (rep_op) */      for (j = nfirstpos[-1] - 1; j > 0; --j)
2500: /* MUTANT (rep_op) */      for (j = nfirstpos[-1] - 1; j == 0; --j)
2500: /* MUTANT (rep_op) */      for (j = nfirstpos[-1] - 1; j != 0; --j)
2500: /* MUTANT (rep_op) */      for (j = nfirstpos[-1] - 1; j >= 0; ++j)
2500: /* MUTANT (rep_const) */      for (j = nfirstpos[0] - 1; j >= 0; --j)
2500: /* MUTANT (rep_const) */      for (j = nfirstpos[1] - 1; j >= 0; --j)
2500: /* MUTANT (rep_const) */      for (j = nfirstpos[((-1)+1)] - 1; j >= 0; --j)
2500: /* MUTANT (rep_const) */      for (j = nfirstpos[((-1)-1)] - 1; j >= 0; --j)
2500: /* MUTANT (rep_const) */      for (j = nfirstpos[-1] - 0; j >= 0; --j)
2500: /* MUTANT (rep_const) */      for (j = nfirstpos[-1] - -1; j >= 0; --j)
2500: /* MUTANT (rep_const) */      for (j = nfirstpos[-1] - ((1)+1); j >= 0; --j)
2500: /* MUTANT (rep_const) */      for (j = nfirstpos[-1] - 1; j >= 1; --j)
2500: /* MUTANT (rep_const) */      for (j = nfirstpos[-1] - 1; j >= -1; --j)
2502: /* MUTANT (del_stmt) */ /* 	  fprintf(stderr, " %d:", firstpos[j].index); */ 
2503: /* MUTANT (del_stmt) */ /* 	  prtok(d->tokens[firstpos[j].index]); */ 
2506: /* MUTANT (rep_op) */      for (j = nlastpos[-1] - 1; j <= 0; --j)
2506: /* MUTANT (rep_op) */      for (j = nlastpos[-1] - 1; j < 0; --j)
2506: /* MUTANT (rep_op) */      for (j = nlastpos[-1] - 1; j > 0; --j)
2506: /* MUTANT (rep_op) */      for (j = nlastpos[-1] - 1; j == 0; --j)
2506: /* MUTANT (rep_op) */      for (j = nlastpos[-1] - 1; j != 0; --j)
2506: /* MUTANT (rep_op) */      for (j = nlastpos[-1] - 1; j >= 0; ++j)
2506: /* MUTANT (rep_const) */      for (j = nlastpos[0] - 1; j >= 0; --j)
2506: /* MUTANT (rep_const) */      for (j = nlastpos[1] - 1; j >= 0; --j)
2506: /* MUTANT (rep_const) */      for (j = nlastpos[((-1)+1)] - 1; j >= 0; --j)
2506: /* MUTANT (rep_const) */      for (j = nlastpos[((-1)-1)] - 1; j >= 0; --j)
2506: /* MUTANT (rep_const) */      for (j = nlastpos[-1] - 0; j >= 0; --j)
2506: /* MUTANT (rep_const) */      for (j = nlastpos[-1] - -1; j >= 0; --j)
2506: /* MUTANT (rep_const) */      for (j = nlastpos[-1] - ((1)+1); j >= 0; --j)
2506: /* MUTANT (rep_const) */      for (j = nlastpos[-1] - 1; j >= 1; --j)
2506: /* MUTANT (rep_const) */      for (j = nlastpos[-1] - 1; j >= -1; --j)
2508: /* MUTANT (del_stmt) */ /* 	  fprintf(stderr, " %d:", lastpos[j].index); */ 
2509: /* MUTANT (del_stmt) */ /* 	  prtok(d->tokens[lastpos[j].index]); */ 
2517: /* MUTANT (rep_op) */  for (i = 0; i <= d->tindex; ++i)
2517: /* MUTANT (rep_op) */  for (i = 0; i > d->tindex; ++i)
2517: /* MUTANT (rep_op) */  for (i = 0; i >= d->tindex; ++i)
2517: /* MUTANT (rep_op) */  for (i = 0; i == d->tindex; ++i)
2517: /* MUTANT (rep_op) */  for (i = 0; i != d->tindex; ++i)
2517: /* MUTANT (rep_op) */  for (i = 0; i < d->tindex; --i)
2517: /* MUTANT (rep_const) */  for (i = 1; i < d->tindex; ++i)
2517: /* MUTANT (rep_const) */  for (i = -1; i < d->tindex; ++i)
2518: /* MUTANT (rep_op) */    if (d->tokens[i] <= NOTCHAR || d->tokens[i] == BACKREF
2518: /* MUTANT (rep_op) */    if (d->tokens[i] > NOTCHAR || d->tokens[i] == BACKREF
2518: /* MUTANT (rep_op) */    if (d->tokens[i] >= NOTCHAR || d->tokens[i] == BACKREF
2518: /* MUTANT (rep_op) */    if (d->tokens[i] == NOTCHAR || d->tokens[i] == BACKREF
2518: /* MUTANT (rep_op) */    if (d->tokens[i] != NOTCHAR || d->tokens[i] == BACKREF
2518: /* MUTANT (rep_op) */    if (d->tokens[i] < NOTCHAR && d->tokens[i] == BACKREF
2518: /* MUTANT (rep_op) */    if (d->tokens[i] < NOTCHAR || d->tokens[i] != BACKREF
2519: /* MUTANT (rep_op) */	&& d->tokens[i] >= CSET)
2519: /* MUTANT (rep_op) */	|| d->tokens[i] <= CSET)
2519: /* MUTANT (rep_op) */	|| d->tokens[i] < CSET)
2519: /* MUTANT (rep_op) */	|| d->tokens[i] > CSET)
2519: /* MUTANT (rep_op) */	|| d->tokens[i] == CSET)
2519: /* MUTANT (rep_op) */	|| d->tokens[i] != CSET)
2523: /* MUTANT (del_stmt) */ /* 	prtok(d->tokens[i]); */ 
2524: /* MUTANT (del_stmt) */ /* 	fprintf(stderr, "):"); */ 
2525: /* MUTANT (rep_op) */	for (j = d->follows[i].nelem - 1; j <= 0; --j)
2525: /* MUTANT (rep_op) */	for (j = d->follows[i].nelem - 1; j < 0; --j)
2525: /* MUTANT (rep_op) */	for (j = d->follows[i].nelem - 1; j > 0; --j)
2525: /* MUTANT (rep_op) */	for (j = d->follows[i].nelem - 1; j == 0; --j)
2525: /* MUTANT (rep_op) */	for (j = d->follows[i].nelem - 1; j != 0; --j)
2525: /* MUTANT (rep_op) */	for (j = d->follows[i].nelem - 1; j >= 0; ++j)
2525: /* MUTANT (rep_const) */	for (j = d->follows[i].nelem - 0; j >= 0; --j)
2525: /* MUTANT (rep_const) */	for (j = d->follows[i].nelem - -1; j >= 0; --j)
2525: /* MUTANT (rep_const) */	for (j = d->follows[i].nelem - ((1)+1); j >= 0; --j)
2525: /* MUTANT (rep_const) */	for (j = d->follows[i].nelem - 1; j >= 1; --j)
2525: /* MUTANT (rep_const) */	for (j = d->follows[i].nelem - 1; j >= -1; --j)
2527: /* MUTANT (del_stmt) */ /* 	    fprintf(stderr, " %d:", d->follows[i].elems[j].index); */ 
2528: /* MUTANT (del_stmt) */ /* 	    prtok(d->tokens[d->follows[i].elems[j].index]); */ 
2533: /* MUTANT (del_stmt) */ /* 	epsclosure(&merged, d); */ 
2534: /* MUTANT (rep_op) */	if (d->follows[i].nelem <= merged.nelem)
2534: /* MUTANT (rep_op) */	if (d->follows[i].nelem > merged.nelem)
2534: /* MUTANT (rep_op) */	if (d->follows[i].nelem >= merged.nelem)
2534: /* MUTANT (rep_op) */	if (d->follows[i].nelem == merged.nelem)
2534: /* MUTANT (rep_op) */	if (d->follows[i].nelem != merged.nelem)
2534: /* MUTANT (negate) */	if(! (d->follows[i].nelem < merged.nelem))
2536: /* MUTANT (del_stmt) */ /* 	copy(&merged, &d->follows[i]); */ 
2541: /* MUTANT (rep_const) */  merged.nelem = 1;
2541: /* MUTANT (rep_const) */  merged.nelem = -1;
2542: /* MUTANT (rep_op) */  for (i = 0; i <= nfirstpos[-1]; ++i)
2542: /* MUTANT (rep_op) */  for (i = 0; i > nfirstpos[-1]; ++i)
2542: /* MUTANT (rep_op) */  for (i = 0; i >= nfirstpos[-1]; ++i)
2542: /* MUTANT (rep_op) */  for (i = 0; i == nfirstpos[-1]; ++i)
2542: /* MUTANT (rep_op) */  for (i = 0; i != nfirstpos[-1]; ++i)
2542: /* MUTANT (rep_op) */  for (i = 0; i < nfirstpos[-1]; --i)
2542: /* MUTANT (rep_const) */  for (i = 1; i < nfirstpos[-1]; ++i)
2542: /* MUTANT (rep_const) */  for (i = -1; i < nfirstpos[-1]; ++i)
2542: /* MUTANT (rep_const) */  for (i = 0; i < nfirstpos[0]; ++i)
2542: /* MUTANT (rep_const) */  for (i = 0; i < nfirstpos[1]; ++i)
2542: /* MUTANT (rep_const) */  for (i = 0; i < nfirstpos[((-1)+1)]; ++i)
2542: /* MUTANT (rep_const) */  for (i = 0; i < nfirstpos[((-1)-1)]; ++i)
2544: /* MUTANT (del_stmt) */ /*   epsclosure(&merged, d); */ 
2547: /* MUTANT (del_stmt) */ /*   wants_newline = 0; */ 
2547: /* MUTANT (rep_const) */  wants_newline = 1;
2547: /* MUTANT (rep_const) */  wants_newline = -1;
2548: /* MUTANT (rep_op) */  for (i = 0; i <= merged.nelem; ++i)
2548: /* MUTANT (rep_op) */  for (i = 0; i > merged.nelem; ++i)
2548: /* MUTANT (rep_op) */  for (i = 0; i >= merged.nelem; ++i)
2548: /* MUTANT (rep_op) */  for (i = 0; i == merged.nelem; ++i)
2548: /* MUTANT (rep_op) */  for (i = 0; i != merged.nelem; ++i)
2548: /* MUTANT (rep_op) */  for (i = 0; i < merged.nelem; --i)
2548: /* MUTANT (rep_const) */  for (i = 1; i < merged.nelem; ++i)
2548: /* MUTANT (rep_const) */  for (i = -1; i < merged.nelem; ++i)
2549: /* MUTANT (negate) */    if(! (PREV_NEWLINE_DEPENDENT(merged.elems[i].constraint)))
2550: /* MUTANT (rep_const) */      wants_newline = 0;
2550: /* MUTANT (rep_const) */      wants_newline = -1;
2550: /* MUTANT (rep_const) */      wants_newline = ((1)+1);
2553: /* MUTANT (del_stmt) */ /*   d->salloc = 1; */ 
2553: /* MUTANT (rep_const) */  d->salloc = 0;
2553: /* MUTANT (rep_const) */  d->salloc = -1;
2553: /* MUTANT (rep_const) */  d->salloc = ((1)+1);
2554: /* MUTANT (del_stmt) */ /*   d->sindex = 0; */ 
2554: /* MUTANT (rep_const) */  d->sindex = 1;
2554: /* MUTANT (rep_const) */  d->sindex = -1;
2555: /* MUTANT (del_stmt) */ /*   MALLOC(d->states, dfa_state, d->salloc); */ 
2556: /* MUTANT (del_stmt) */ /*   state_index(d, &merged, wants_newline, 0); */ 
2556: /* MUTANT (rep_const) */  state_index(d, &merged, wants_newline, 1);
2556: /* MUTANT (rep_const) */  state_index(d, &merged, wants_newline, -1);
2558: /* MUTANT (del_stmt) */ /*   free(o_nullable); */ 
2559: /* MUTANT (del_stmt) */ /*   free(o_nfirst); */ 
2560: /* MUTANT (del_stmt) */ /*   free(o_firstpos); */ 
2561: /* MUTANT (del_stmt) */ /*   free(o_nlast); */ 
2562: /* MUTANT (del_stmt) */ /*   free(o_lastpos); */ 
2563: /* MUTANT (del_stmt) */ /*   free(nalloc); */ 
2564: /* MUTANT (del_stmt) */ /*   free(merged.elems); */ 
2600: /* MUTANT (del_stmt) */ /*      struct dfa *d; */ 
2601: /* MUTANT (del_stmt) */ /*      int trans[]; */ 
2603: /* MUTANT (del_stmt) */ /*   position_set grps[NOTCHAR]; */ 	/* As many as will ever be needed. */
2604: /* MUTANT (del_stmt) */ /*   charclass labels[NOTCHAR]; */ 	/* Labels corresponding to the groups. */
2605: /* MUTANT (del_stmt) */ /*   int ngrps = 0; */ 		/* Number of groups actually used. */
2605: /* MUTANT (rep_const) */  int ngrps = 1;		/* Number of groups actually used. */
2605: /* MUTANT (rep_const) */  int ngrps = -1;		/* Number of groups actually used. */
2606: /* MUTANT (del_stmt) */ /*   position pos; */ 			/* Current position being considered. */
2607: /* MUTANT (del_stmt) */ /*   charclass matches; */ 		/* Set of matching characters. */
2608: /* MUTANT (del_stmt) */ /*   int matchesf; */ 			/* True if matches is nonempty. */
2609: /* MUTANT (del_stmt) */ /*   charclass intersect; */ 		/* Intersection with some label set. */
2610: /* MUTANT (del_stmt) */ /*   int intersectf; */ 		/* True if intersect is nonempty. */
2611: /* MUTANT (del_stmt) */ /*   charclass leftovers; */ 		/* Stuff in the label that didn't match. */
2612: /* MUTANT (del_stmt) */ /*   int leftoversf; */ 		/* True if leftovers is nonempty. */
2613: /* MUTANT (del_stmt) */ /*   static charclass letters; */ 	/* Set of characters considered letters. */
2614: /* MUTANT (del_stmt) */ /*   static charclass newline; */ 	/* Set of characters that aren't newline. */
2615: /* MUTANT (del_stmt) */ /*   position_set follows; */ 		/* Union of the follows of some group. */
2616: /* MUTANT (del_stmt) */ /*   position_set tmp; */ 		/* Temporary space for merging sets. */
2617: /* MUTANT (del_stmt) */ /*   int state; */ 			/* New state. */
2618: /* MUTANT (del_stmt) */ /*   int wants_newline; */ 		/* New state wants to know newline context. */
2619: /* MUTANT (del_stmt) */ /*   int state_newline; */ 		/* New state on a newline transition. */
2620: /* MUTANT (del_stmt) */ /*   int wants_letter; */ 		/* New state wants to know letter context. */
2621: /* MUTANT (del_stmt) */ /*   int state_letter; */ 		/* New state on a letter transition. */
2622: /* MUTANT (del_stmt) */ /*   static int initialized; */ 	/* Flag for static initialization. */
2623: /* MUTANT (del_stmt) */ /*   int i, j, k; */ 
2626: /* MUTANT (negate) */  if(! (! initialized))
2628: /* MUTANT (del_stmt) */ /*       initialized = 1; */ 
2628: /* MUTANT (rep_const) */      initialized = 0;
2628: /* MUTANT (rep_const) */      initialized = -1;
2628: /* MUTANT (rep_const) */      initialized = ((1)+1);
2629: /* MUTANT (rep_op) */      for (i = 0; i <= NOTCHAR; ++i)
2629: /* MUTANT (rep_op) */      for (i = 0; i > NOTCHAR; ++i)
2629: /* MUTANT (rep_op) */      for (i = 0; i >= NOTCHAR; ++i)
2629: /* MUTANT (rep_op) */      for (i = 0; i == NOTCHAR; ++i)
2629: /* MUTANT (rep_op) */      for (i = 0; i != NOTCHAR; ++i)
2629: /* MUTANT (rep_op) */      for (i = 0; i < NOTCHAR; --i)
2629: /* MUTANT (rep_const) */      for (i = 1; i < NOTCHAR; ++i)
2629: /* MUTANT (rep_const) */      for (i = -1; i < NOTCHAR; ++i)
2630: /* MUTANT (negate) */	if(! (IS_WORD_CONSTITUENT(i)))
2632: /* MUTANT (del_stmt) */ /*       setbit('\n', newline); */ 
2637: /* MUTANT (rep_op) */  for (i = 0; i <= d->states[s].elems.nelem; ++i)
2637: /* MUTANT (rep_op) */  for (i = 0; i > d->states[s].elems.nelem; ++i)
2637: /* MUTANT (rep_op) */  for (i = 0; i >= d->states[s].elems.nelem; ++i)
2637: /* MUTANT (rep_op) */  for (i = 0; i == d->states[s].elems.nelem; ++i)
2637: /* MUTANT (rep_op) */  for (i = 0; i != d->states[s].elems.nelem; ++i)
2637: /* MUTANT (rep_op) */  for (i = 0; i < d->states[s].elems.nelem; --i)
2637: /* MUTANT (rep_const) */  for (i = 1; i < d->states[s].elems.nelem; ++i)
2637: /* MUTANT (rep_const) */  for (i = -1; i < d->states[s].elems.nelem; ++i)
2639: /* MUTANT (del_stmt) */ /*       pos = d->states[s].elems.elems[i]; */ 
2640: /* MUTANT (rep_op) */      if (d->tokens[pos.index] <= 0 && d->tokens[pos.index] < NOTCHAR)
2640: /* MUTANT (rep_op) */      if (d->tokens[pos.index] < 0 && d->tokens[pos.index] < NOTCHAR)
2640: /* MUTANT (rep_op) */      if (d->tokens[pos.index] > 0 && d->tokens[pos.index] < NOTCHAR)
2640: /* MUTANT (rep_op) */      if (d->tokens[pos.index] == 0 && d->tokens[pos.index] < NOTCHAR)
2640: /* MUTANT (rep_op) */      if (d->tokens[pos.index] != 0 && d->tokens[pos.index] < NOTCHAR)
2640: /* MUTANT (rep_op) */      if (d->tokens[pos.index] >= 0 || d->tokens[pos.index] < NOTCHAR)
2640: /* MUTANT (rep_op) */      if (d->tokens[pos.index] >= 0 && d->tokens[pos.index] <= NOTCHAR)
2640: /* MUTANT (rep_op) */      if (d->tokens[pos.index] >= 0 && d->tokens[pos.index] > NOTCHAR)
2640: /* MUTANT (rep_op) */      if (d->tokens[pos.index] >= 0 && d->tokens[pos.index] >= NOTCHAR)
2640: /* MUTANT (rep_op) */      if (d->tokens[pos.index] >= 0 && d->tokens[pos.index] == NOTCHAR)
2640: /* MUTANT (rep_op) */      if (d->tokens[pos.index] >= 0 && d->tokens[pos.index] != NOTCHAR)
2640: /* MUTANT (rep_const) */      if (d->tokens[pos.index] >= 1 && d->tokens[pos.index] < NOTCHAR)
2640: /* MUTANT (rep_const) */      if (d->tokens[pos.index] >= -1 && d->tokens[pos.index] < NOTCHAR)
2640: /* MUTANT (negate) */      if(! (d->tokens[pos.index] >= 0 && d->tokens[pos.index] < NOTCHAR))
2642: /* MUTANT (rep_op) */      else if (d->tokens[pos.index] <= CSET)
2642: /* MUTANT (rep_op) */      else if (d->tokens[pos.index] < CSET)
2642: /* MUTANT (rep_op) */      else if (d->tokens[pos.index] > CSET)
2642: /* MUTANT (rep_op) */      else if (d->tokens[pos.index] == CSET)
2642: /* MUTANT (rep_op) */      else if (d->tokens[pos.index] != CSET)
2642: /* MUTANT (negate) */      else if(! (d->tokens[pos.index] >= CSET))
2649: /* MUTANT (rep_op) */      if (pos.constraint == 0xFF)
2649: /* MUTANT (rep_const) */      if (pos.constraint != 1xFF)
2649: /* MUTANT (rep_const) */      if (pos.constraint != -1xFF)
2649: /* MUTANT (negate) */      if(! (pos.constraint != 0xFF))
2652: /* MUTANT (rep_const) */					 d->states[s].newline, 0))
2652: /* MUTANT (rep_const) */					 d->states[s].newline, -1))
2652: /* MUTANT (rep_const) */					 d->states[s].newline, ((1)+1)))
2655: /* MUTANT (rep_const) */					 d->states[s].newline, 1))
2655: /* MUTANT (rep_const) */					 d->states[s].newline, -1))
2656: /* MUTANT (rep_op) */	    for (j = 0; j <= CHARCLASS_INTS; ++j)
2656: /* MUTANT (rep_op) */	    for (j = 0; j > CHARCLASS_INTS; ++j)
2656: /* MUTANT (rep_op) */	    for (j = 0; j >= CHARCLASS_INTS; ++j)
2656: /* MUTANT (rep_op) */	    for (j = 0; j == CHARCLASS_INTS; ++j)
2656: /* MUTANT (rep_op) */	    for (j = 0; j != CHARCLASS_INTS; ++j)
2656: /* MUTANT (rep_op) */	    for (j = 0; j < CHARCLASS_INTS; --j)
2656: /* MUTANT (rep_const) */	    for (j = 1; j < CHARCLASS_INTS; ++j)
2656: /* MUTANT (rep_const) */	    for (j = -1; j < CHARCLASS_INTS; ++j)
2659: /* MUTANT (rep_const) */					d->states[s].letter, 0))
2659: /* MUTANT (rep_const) */					d->states[s].letter, -1))
2659: /* MUTANT (rep_const) */					d->states[s].letter, ((1)+1)))
2660: /* MUTANT (rep_op) */	    for (j = 0; j <= CHARCLASS_INTS; ++j)
2660: /* MUTANT (rep_op) */	    for (j = 0; j > CHARCLASS_INTS; ++j)
2660: /* MUTANT (rep_op) */	    for (j = 0; j >= CHARCLASS_INTS; ++j)
2660: /* MUTANT (rep_op) */	    for (j = 0; j == CHARCLASS_INTS; ++j)
2660: /* MUTANT (rep_op) */	    for (j = 0; j != CHARCLASS_INTS; ++j)
2660: /* MUTANT (rep_op) */	    for (j = 0; j < CHARCLASS_INTS; --j)
2660: /* MUTANT (rep_const) */	    for (j = 1; j < CHARCLASS_INTS; ++j)
2660: /* MUTANT (rep_const) */	    for (j = -1; j < CHARCLASS_INTS; ++j)
2663: /* MUTANT (rep_const) */					d->states[s].letter, 1))
2663: /* MUTANT (rep_const) */					d->states[s].letter, -1))
2664: /* MUTANT (rep_op) */	    for (j = 0; j <= CHARCLASS_INTS; ++j)
2664: /* MUTANT (rep_op) */	    for (j = 0; j > CHARCLASS_INTS; ++j)
2664: /* MUTANT (rep_op) */	    for (j = 0; j >= CHARCLASS_INTS; ++j)
2664: /* MUTANT (rep_op) */	    for (j = 0; j == CHARCLASS_INTS; ++j)
2664: /* MUTANT (rep_op) */	    for (j = 0; j != CHARCLASS_INTS; ++j)
2664: /* MUTANT (rep_op) */	    for (j = 0; j < CHARCLASS_INTS; --j)
2664: /* MUTANT (rep_const) */	    for (j = 1; j < CHARCLASS_INTS; ++j)
2664: /* MUTANT (rep_const) */	    for (j = -1; j < CHARCLASS_INTS; ++j)
2668: /* MUTANT (rep_op) */	  for (j = 0; j <= CHARCLASS_INTS && !matches[j]; ++j)
2668: /* MUTANT (rep_op) */	  for (j = 0; j > CHARCLASS_INTS && !matches[j]; ++j)
2668: /* MUTANT (rep_op) */	  for (j = 0; j >= CHARCLASS_INTS && !matches[j]; ++j)
2668: /* MUTANT (rep_op) */	  for (j = 0; j == CHARCLASS_INTS && !matches[j]; ++j)
2668: /* MUTANT (rep_op) */	  for (j = 0; j != CHARCLASS_INTS && !matches[j]; ++j)
2668: /* MUTANT (rep_op) */	  for (j = 0; j < CHARCLASS_INTS || !matches[j]; ++j)
2668: /* MUTANT (rep_op) */	  for (j = 0; j < CHARCLASS_INTS && !matches[j]; --j)
2668: /* MUTANT (rep_const) */	  for (j = 1; j < CHARCLASS_INTS && !matches[j]; ++j)
2668: /* MUTANT (rep_const) */	  for (j = -1; j < CHARCLASS_INTS && !matches[j]; ++j)
2670: /* MUTANT (rep_op) */	  if (j != CHARCLASS_INTS)
2670: /* MUTANT (negate) */	  if(! (j == CHARCLASS_INTS))
2674: /* MUTANT (rep_op) */      for (j = 0; j <= ngrps; ++j)
2674: /* MUTANT (rep_op) */      for (j = 0; j > ngrps; ++j)
2674: /* MUTANT (rep_op) */      for (j = 0; j >= ngrps; ++j)
2674: /* MUTANT (rep_op) */      for (j = 0; j == ngrps; ++j)
2674: /* MUTANT (rep_op) */      for (j = 0; j != ngrps; ++j)
2674: /* MUTANT (rep_op) */      for (j = 0; j < ngrps; --j)
2674: /* MUTANT (rep_const) */      for (j = 1; j < ngrps; ++j)
2674: /* MUTANT (rep_const) */      for (j = -1; j < ngrps; ++j)
2679: /* MUTANT (rep_op) */	  if (d->tokens[pos.index] <= 0 && d->tokens[pos.index] < NOTCHAR
2679: /* MUTANT (rep_op) */	  if (d->tokens[pos.index] < 0 && d->tokens[pos.index] < NOTCHAR
2679: /* MUTANT (rep_op) */	  if (d->tokens[pos.index] > 0 && d->tokens[pos.index] < NOTCHAR
2679: /* MUTANT (rep_op) */	  if (d->tokens[pos.index] == 0 && d->tokens[pos.index] < NOTCHAR
2679: /* MUTANT (rep_op) */	  if (d->tokens[pos.index] != 0 && d->tokens[pos.index] < NOTCHAR
2679: /* MUTANT (rep_op) */	  if (d->tokens[pos.index] >= 0 || d->tokens[pos.index] < NOTCHAR
2679: /* MUTANT (rep_op) */	  if (d->tokens[pos.index] >= 0 && d->tokens[pos.index] <= NOTCHAR
2679: /* MUTANT (rep_op) */	  if (d->tokens[pos.index] >= 0 && d->tokens[pos.index] > NOTCHAR
2679: /* MUTANT (rep_op) */	  if (d->tokens[pos.index] >= 0 && d->tokens[pos.index] >= NOTCHAR
2679: /* MUTANT (rep_op) */	  if (d->tokens[pos.index] >= 0 && d->tokens[pos.index] == NOTCHAR
2679: /* MUTANT (rep_op) */	  if (d->tokens[pos.index] >= 0 && d->tokens[pos.index] != NOTCHAR
2679: /* MUTANT (rep_const) */	  if (d->tokens[pos.index] >= 1 && d->tokens[pos.index] < NOTCHAR
2679: /* MUTANT (rep_const) */	  if (d->tokens[pos.index] >= -1 && d->tokens[pos.index] < NOTCHAR
2680: /* MUTANT (rep_op) */	      || !tstbit(d->tokens[pos.index], labels[j]))
2685: /* MUTANT (del_stmt) */ /* 	  intersectf = 0; */ 
2685: /* MUTANT (rep_const) */	  intersectf = 1;
2685: /* MUTANT (rep_const) */	  intersectf = -1;
2686: /* MUTANT (rep_op) */	  for (k = 0; k <= CHARCLASS_INTS; ++k)
2686: /* MUTANT (rep_op) */	  for (k = 0; k > CHARCLASS_INTS; ++k)
2686: /* MUTANT (rep_op) */	  for (k = 0; k >= CHARCLASS_INTS; ++k)
2686: /* MUTANT (rep_op) */	  for (k = 0; k == CHARCLASS_INTS; ++k)
2686: /* MUTANT (rep_op) */	  for (k = 0; k != CHARCLASS_INTS; ++k)
2686: /* MUTANT (rep_op) */	  for (k = 0; k < CHARCLASS_INTS; --k)
2686: /* MUTANT (rep_const) */	  for (k = 1; k < CHARCLASS_INTS; ++k)
2686: /* MUTANT (rep_const) */	  for (k = -1; k < CHARCLASS_INTS; ++k)
2687: /* MUTANT (rep_const) */	    (intersect[k] = matches[k] & labels[j][k]) ? (intersectf = 0) : 0;
2687: /* MUTANT (rep_const) */	    (intersect[k] = matches[k] & labels[j][k]) ? (intersectf = -1) : 0;
2687: /* MUTANT (rep_const) */	    (intersect[k] = matches[k] & labels[j][k]) ? (intersectf = ((1)+1)) : 0;
2687: /* MUTANT (rep_const) */	    (intersect[k] = matches[k] & labels[j][k]) ? (intersectf = 1) : 1;
2687: /* MUTANT (rep_const) */	    (intersect[k] = matches[k] & labels[j][k]) ? (intersectf = 1) : -1;
2688: /* MUTANT (negate) */	  if(! (! intersectf))
2692: /* MUTANT (del_stmt) */ /* 	  leftoversf = matchesf = 0; */ 
2692: /* MUTANT (rep_const) */	  leftoversf = matchesf = 1;
2692: /* MUTANT (rep_const) */	  leftoversf = matchesf = -1;
2693: /* MUTANT (rep_op) */	  for (k = 0; k <= CHARCLASS_INTS; ++k)
2693: /* MUTANT (rep_op) */	  for (k = 0; k > CHARCLASS_INTS; ++k)
2693: /* MUTANT (rep_op) */	  for (k = 0; k >= CHARCLASS_INTS; ++k)
2693: /* MUTANT (rep_op) */	  for (k = 0; k == CHARCLASS_INTS; ++k)
2693: /* MUTANT (rep_op) */	  for (k = 0; k != CHARCLASS_INTS; ++k)
2693: /* MUTANT (rep_op) */	  for (k = 0; k < CHARCLASS_INTS; --k)
2693: /* MUTANT (rep_const) */	  for (k = 1; k < CHARCLASS_INTS; ++k)
2693: /* MUTANT (rep_const) */	  for (k = -1; k < CHARCLASS_INTS; ++k)
2696: /* MUTANT (del_stmt) */ /* 	      int match = matches[k], label = labels[j][k]; */ 
2698: /* MUTANT (del_stmt) */ /* 	      (leftovers[k] = ~match & label) ? (leftoversf = 1) : 0; */ 
2698: /* MUTANT (rep_const) */	      (leftovers[k] = ~match & label) ? (leftoversf = 0) : 0;
2698: /* MUTANT (rep_const) */	      (leftovers[k] = ~match & label) ? (leftoversf = -1) : 0;
2698: /* MUTANT (rep_const) */	      (leftovers[k] = ~match & label) ? (leftoversf = ((1)+1)) : 0;
2698: /* MUTANT (rep_const) */	      (leftovers[k] = ~match & label) ? (leftoversf = 1) : 1;
2698: /* MUTANT (rep_const) */	      (leftovers[k] = ~match & label) ? (leftoversf = 1) : -1;
2699: /* MUTANT (del_stmt) */ /* 	      (matches[k] = match & ~label) ? (matchesf = 1) : 0; */ 
2699: /* MUTANT (rep_const) */	      (matches[k] = match & ~label) ? (matchesf = 0) : 0;
2699: /* MUTANT (rep_const) */	      (matches[k] = match & ~label) ? (matchesf = -1) : 0;
2699: /* MUTANT (rep_const) */	      (matches[k] = match & ~label) ? (matchesf = ((1)+1)) : 0;
2699: /* MUTANT (rep_const) */	      (matches[k] = match & ~label) ? (matchesf = 1) : 1;
2699: /* MUTANT (rep_const) */	      (matches[k] = match & ~label) ? (matchesf = 1) : -1;
2703: /* MUTANT (negate) */	  if(! (leftoversf))
2705: /* MUTANT (del_stmt) */ /* 	      copyset(leftovers, labels[ngrps]); */ 
2706: /* MUTANT (del_stmt) */ /* 	      copyset(intersect, labels[j]); */ 
2707: /* MUTANT (del_stmt) */ /* 	      MALLOC(grps[ngrps].elems, position, d->nleaves); */ 
2708: /* MUTANT (del_stmt) */ /* 	      copy(&grps[j], &grps[ngrps]); */ 
2709: /* MUTANT (del_stmt) */ /* 	      ++ngrps; */ 
2709: /* MUTANT (rep_op) */	      --ngrps;
2714: /* MUTANT (rep_op) */	  grps[j].elems[grps[j].nelem--] = pos;
2718: /* MUTANT (negate) */	  if(! (! matchesf))
2724: /* MUTANT (rep_op) */      if (j != ngrps)
2724: /* MUTANT (negate) */      if(! (j == ngrps))
2726: /* MUTANT (del_stmt) */ /* 	  copyset(matches, labels[ngrps]); */ 
2727: /* MUTANT (del_stmt) */ /* 	  zeroset(matches); */ 
2728: /* MUTANT (del_stmt) */ /* 	  MALLOC(grps[ngrps].elems, position, d->nleaves); */ 
2729: /* MUTANT (del_stmt) */ /* 	  grps[ngrps].nelem = 1; */ 
2729: /* MUTANT (rep_const) */	  grps[ngrps].nelem = 0;
2729: /* MUTANT (rep_const) */	  grps[ngrps].nelem = -1;
2729: /* MUTANT (rep_const) */	  grps[ngrps].nelem = ((1)+1);
2730: /* MUTANT (del_stmt) */ /* 	  grps[ngrps].elems[0] = pos; */ 
2730: /* MUTANT (rep_const) */	  grps[ngrps].elems[1] = pos;
2730: /* MUTANT (rep_const) */	  grps[ngrps].elems[-1] = pos;
2731: /* MUTANT (del_stmt) */ /* 	  ++ngrps; */ 
2731: /* MUTANT (rep_op) */	  --ngrps;
2736: /* MUTANT (del_stmt) */ /*   MALLOC(tmp.elems, position, d->nleaves); */ 
2741: /* MUTANT (negate) */  if(! (d->searchflag))
2743: /* MUTANT (del_stmt) */ /*       wants_newline = 0; */ 
2743: /* MUTANT (rep_const) */      wants_newline = 1;
2743: /* MUTANT (rep_const) */      wants_newline = -1;
2744: /* MUTANT (del_stmt) */ /*       wants_letter = 0; */ 
2744: /* MUTANT (rep_const) */      wants_letter = 1;
2744: /* MUTANT (rep_const) */      wants_letter = -1;
2745: /* MUTANT (rep_op) */      for (i = 0; i <= d->states[0].elems.nelem; ++i)
2745: /* MUTANT (rep_op) */      for (i = 0; i > d->states[0].elems.nelem; ++i)
2745: /* MUTANT (rep_op) */      for (i = 0; i >= d->states[0].elems.nelem; ++i)
2745: /* MUTANT (rep_op) */      for (i = 0; i == d->states[0].elems.nelem; ++i)
2745: /* MUTANT (rep_op) */      for (i = 0; i != d->states[0].elems.nelem; ++i)
2745: /* MUTANT (rep_op) */      for (i = 0; i < d->states[0].elems.nelem; --i)
2745: /* MUTANT (rep_const) */      for (i = 1; i < d->states[0].elems.nelem; ++i)
2745: /* MUTANT (rep_const) */      for (i = -1; i < d->states[0].elems.nelem; ++i)
2745: /* MUTANT (rep_const) */      for (i = 0; i < d->states[1].elems.nelem; ++i)
2745: /* MUTANT (rep_const) */      for (i = 0; i < d->states[-1].elems.nelem; ++i)
2747: /* MUTANT (rep_const) */	  if (PREV_NEWLINE_DEPENDENT(d->states[1].elems.elems[i].constraint))
2747: /* MUTANT (rep_const) */	  if (PREV_NEWLINE_DEPENDENT(d->states[-1].elems.elems[i].constraint))
2747: /* MUTANT (negate) */	  if(! (PREV_NEWLINE_DEPENDENT(d->states[0].elems.elems[i].constraint)))
2748: /* MUTANT (rep_const) */	    wants_newline = 0;
2748: /* MUTANT (rep_const) */	    wants_newline = -1;
2748: /* MUTANT (rep_const) */	    wants_newline = ((1)+1);
2749: /* MUTANT (rep_const) */	  if (PREV_LETTER_DEPENDENT(d->states[1].elems.elems[i].constraint))
2749: /* MUTANT (rep_const) */	  if (PREV_LETTER_DEPENDENT(d->states[-1].elems.elems[i].constraint))
2749: /* MUTANT (negate) */	  if(! (PREV_LETTER_DEPENDENT(d->states[0].elems.elems[i].constraint)))
2750: /* MUTANT (rep_const) */	    wants_letter = 0;
2750: /* MUTANT (rep_const) */	    wants_letter = -1;
2750: /* MUTANT (rep_const) */	    wants_letter = ((1)+1);
2752: /* MUTANT (rep_const) */      copy(&d->states[1].elems, &follows);
2752: /* MUTANT (rep_const) */      copy(&d->states[-1].elems, &follows);
2753: /* MUTANT (del_stmt) */ /*       state = state_index(d, &follows, 0, 0); */ 
2753: /* MUTANT (rep_const) */      state = state_index(d, &follows, 1, 0);
2753: /* MUTANT (rep_const) */      state = state_index(d, &follows, -1, 0);
2753: /* MUTANT (rep_const) */      state = state_index(d, &follows, 0, 1);
2753: /* MUTANT (rep_const) */      state = state_index(d, &follows, 0, -1);
2754: /* MUTANT (negate) */      if(! (wants_newline))
2755: /* MUTANT (rep_const) */	state_newline = state_index(d, &follows, 0, 0);
2755: /* MUTANT (rep_const) */	state_newline = state_index(d, &follows, -1, 0);
2755: /* MUTANT (rep_const) */	state_newline = state_index(d, &follows, ((1)+1), 0);
2755: /* MUTANT (rep_const) */	state_newline = state_index(d, &follows, 1, 1);
2755: /* MUTANT (rep_const) */	state_newline = state_index(d, &follows, 1, -1);
2758: /* MUTANT (negate) */      if(! (wants_letter))
2759: /* MUTANT (rep_const) */	state_letter = state_index(d, &follows, 1, 1);
2759: /* MUTANT (rep_const) */	state_letter = state_index(d, &follows, -1, 1);
2759: /* MUTANT (rep_const) */	state_letter = state_index(d, &follows, 0, 0);
2759: /* MUTANT (rep_const) */	state_letter = state_index(d, &follows, 0, -1);
2759: /* MUTANT (rep_const) */	state_letter = state_index(d, &follows, 0, ((1)+1));
2762: /* MUTANT (rep_op) */      for (i = 0; i <= NOTCHAR; ++i)
2762: /* MUTANT (rep_op) */      for (i = 0; i > NOTCHAR; ++i)
2762: /* MUTANT (rep_op) */      for (i = 0; i >= NOTCHAR; ++i)
2762: /* MUTANT (rep_op) */      for (i = 0; i == NOTCHAR; ++i)
2762: /* MUTANT (rep_op) */      for (i = 0; i != NOTCHAR; ++i)
2762: /* MUTANT (rep_op) */      for (i = 0; i < NOTCHAR; --i)
2762: /* MUTANT (rep_const) */      for (i = 1; i < NOTCHAR; ++i)
2762: /* MUTANT (rep_const) */      for (i = -1; i < NOTCHAR; ++i)
2764: /* MUTANT (del_stmt) */ /*       trans['\n'] = state_newline; */ 
2767: /* MUTANT (rep_op) */    for (i = 0; i <= NOTCHAR; ++i)
2767: /* MUTANT (rep_op) */    for (i = 0; i > NOTCHAR; ++i)
2767: /* MUTANT (rep_op) */    for (i = 0; i >= NOTCHAR; ++i)
2767: /* MUTANT (rep_op) */    for (i = 0; i == NOTCHAR; ++i)
2767: /* MUTANT (rep_op) */    for (i = 0; i != NOTCHAR; ++i)
2767: /* MUTANT (rep_op) */    for (i = 0; i < NOTCHAR; --i)
2767: /* MUTANT (rep_const) */    for (i = 1; i < NOTCHAR; ++i)
2767: /* MUTANT (rep_const) */    for (i = -1; i < NOTCHAR; ++i)
2768: /* MUTANT (rep_const) */      trans[i] = 0;
2768: /* MUTANT (rep_const) */      trans[i] = 1;
2768: /* MUTANT (rep_const) */      trans[i] = ((-1)+1);
2768: /* MUTANT (rep_const) */      trans[i] = ((-1)-1);
2770: /* MUTANT (rep_op) */  for (i = 0; i <= ngrps; ++i)
2770: /* MUTANT (rep_op) */  for (i = 0; i > ngrps; ++i)
2770: /* MUTANT (rep_op) */  for (i = 0; i >= ngrps; ++i)
2770: /* MUTANT (rep_op) */  for (i = 0; i == ngrps; ++i)
2770: /* MUTANT (rep_op) */  for (i = 0; i != ngrps; ++i)
2770: /* MUTANT (rep_op) */  for (i = 0; i < ngrps; --i)
2770: /* MUTANT (rep_const) */  for (i = 1; i < ngrps; ++i)
2770: /* MUTANT (rep_const) */  for (i = -1; i < ngrps; ++i)
2772: /* MUTANT (del_stmt) */ /*       follows.nelem = 0; */ 
2772: /* MUTANT (rep_const) */      follows.nelem = 1;
2772: /* MUTANT (rep_const) */      follows.nelem = -1;
2776: /* MUTANT (rep_op) */      for (j = 0; j <= grps[i].nelem; ++j)
2776: /* MUTANT (rep_op) */      for (j = 0; j > grps[i].nelem; ++j)
2776: /* MUTANT (rep_op) */      for (j = 0; j >= grps[i].nelem; ++j)
2776: /* MUTANT (rep_op) */      for (j = 0; j == grps[i].nelem; ++j)
2776: /* MUTANT (rep_op) */      for (j = 0; j != grps[i].nelem; ++j)
2776: /* MUTANT (rep_op) */      for (j = 0; j < grps[i].nelem; --j)
2776: /* MUTANT (rep_const) */      for (j = 1; j < grps[i].nelem; ++j)
2776: /* MUTANT (rep_const) */      for (j = -1; j < grps[i].nelem; ++j)
2777: /* MUTANT (rep_op) */	for (k = 0; k <= d->follows[grps[i].elems[j].index].nelem; ++k)
2777: /* MUTANT (rep_op) */	for (k = 0; k > d->follows[grps[i].elems[j].index].nelem; ++k)
2777: /* MUTANT (rep_op) */	for (k = 0; k >= d->follows[grps[i].elems[j].index].nelem; ++k)
2777: /* MUTANT (rep_op) */	for (k = 0; k == d->follows[grps[i].elems[j].index].nelem; ++k)
2777: /* MUTANT (rep_op) */	for (k = 0; k != d->follows[grps[i].elems[j].index].nelem; ++k)
2777: /* MUTANT (rep_op) */	for (k = 0; k < d->follows[grps[i].elems[j].index].nelem; --k)
2777: /* MUTANT (rep_const) */	for (k = 1; k < d->follows[grps[i].elems[j].index].nelem; ++k)
2777: /* MUTANT (rep_const) */	for (k = -1; k < d->follows[grps[i].elems[j].index].nelem; ++k)
2782: /* MUTANT (negate) */      if(! (d->searchflag))
2783: /* MUTANT (rep_op) */	for (j = 0; j <= d->states[0].elems.nelem; ++j)
2783: /* MUTANT (rep_op) */	for (j = 0; j > d->states[0].elems.nelem; ++j)
2783: /* MUTANT (rep_op) */	for (j = 0; j >= d->states[0].elems.nelem; ++j)
2783: /* MUTANT (rep_op) */	for (j = 0; j == d->states[0].elems.nelem; ++j)
2783: /* MUTANT (rep_op) */	for (j = 0; j != d->states[0].elems.nelem; ++j)
2783: /* MUTANT (rep_op) */	for (j = 0; j < d->states[0].elems.nelem; --j)
2783: /* MUTANT (rep_const) */	for (j = 1; j < d->states[0].elems.nelem; ++j)
2783: /* MUTANT (rep_const) */	for (j = -1; j < d->states[0].elems.nelem; ++j)
2783: /* MUTANT (rep_const) */	for (j = 0; j < d->states[1].elems.nelem; ++j)
2783: /* MUTANT (rep_const) */	for (j = 0; j < d->states[-1].elems.nelem; ++j)
2784: /* MUTANT (rep_const) */	  insert(d->states[1].elems.elems[j], &follows);
2784: /* MUTANT (rep_const) */	  insert(d->states[-1].elems.elems[j], &follows);
2787: /* MUTANT (del_stmt) */ /*       wants_newline = 0; */ 
2787: /* MUTANT (rep_const) */      wants_newline = 1;
2787: /* MUTANT (rep_const) */      wants_newline = -1;
2788: /* MUTANT (negate) */      if(! (tstbit('\n', labels[i])))
2789: /* MUTANT (rep_op) */	for (j = 0; j <= follows.nelem; ++j)
2789: /* MUTANT (rep_op) */	for (j = 0; j > follows.nelem; ++j)
2789: /* MUTANT (rep_op) */	for (j = 0; j >= follows.nelem; ++j)
2789: /* MUTANT (rep_op) */	for (j = 0; j == follows.nelem; ++j)
2789: /* MUTANT (rep_op) */	for (j = 0; j != follows.nelem; ++j)
2789: /* MUTANT (rep_op) */	for (j = 0; j < follows.nelem; --j)
2789: /* MUTANT (rep_const) */	for (j = 1; j < follows.nelem; ++j)
2789: /* MUTANT (rep_const) */	for (j = -1; j < follows.nelem; ++j)
2790: /* MUTANT (negate) */	  if(! (PREV_NEWLINE_DEPENDENT(follows.elems[j].constraint)))
2791: /* MUTANT (rep_const) */	    wants_newline = 0;
2791: /* MUTANT (rep_const) */	    wants_newline = -1;
2791: /* MUTANT (rep_const) */	    wants_newline = ((1)+1);
2793: /* MUTANT (del_stmt) */ /*       wants_letter = 0; */ 
2793: /* MUTANT (rep_const) */      wants_letter = 1;
2793: /* MUTANT (rep_const) */      wants_letter = -1;
2794: /* MUTANT (rep_op) */      for (j = 0; j <= CHARCLASS_INTS; ++j)
2794: /* MUTANT (rep_op) */      for (j = 0; j > CHARCLASS_INTS; ++j)
2794: /* MUTANT (rep_op) */      for (j = 0; j >= CHARCLASS_INTS; ++j)
2794: /* MUTANT (rep_op) */      for (j = 0; j == CHARCLASS_INTS; ++j)
2794: /* MUTANT (rep_op) */      for (j = 0; j != CHARCLASS_INTS; ++j)
2794: /* MUTANT (rep_op) */      for (j = 0; j < CHARCLASS_INTS; --j)
2794: /* MUTANT (rep_const) */      for (j = 1; j < CHARCLASS_INTS; ++j)
2794: /* MUTANT (rep_const) */      for (j = -1; j < CHARCLASS_INTS; ++j)
2795: /* MUTANT (negate) */	if(! (labels[i][j] & letters[j]))
2797: /* MUTANT (rep_op) */      if (j <= CHARCLASS_INTS)
2797: /* MUTANT (rep_op) */      if (j > CHARCLASS_INTS)
2797: /* MUTANT (rep_op) */      if (j >= CHARCLASS_INTS)
2797: /* MUTANT (rep_op) */      if (j == CHARCLASS_INTS)
2797: /* MUTANT (rep_op) */      if (j != CHARCLASS_INTS)
2797: /* MUTANT (negate) */      if(! (j < CHARCLASS_INTS))
2798: /* MUTANT (rep_op) */	for (j = 0; j <= follows.nelem; ++j)
2798: /* MUTANT (rep_op) */	for (j = 0; j > follows.nelem; ++j)
2798: /* MUTANT (rep_op) */	for (j = 0; j >= follows.nelem; ++j)
2798: /* MUTANT (rep_op) */	for (j = 0; j == follows.nelem; ++j)
2798: /* MUTANT (rep_op) */	for (j = 0; j != follows.nelem; ++j)
2798: /* MUTANT (rep_op) */	for (j = 0; j < follows.nelem; --j)
2798: /* MUTANT (rep_const) */	for (j = 1; j < follows.nelem; ++j)
2798: /* MUTANT (rep_const) */	for (j = -1; j < follows.nelem; ++j)
2799: /* MUTANT (negate) */	  if(! (PREV_LETTER_DEPENDENT(follows.elems[j].constraint)))
2800: /* MUTANT (rep_const) */	    wants_letter = 0;
2800: /* MUTANT (rep_const) */	    wants_letter = -1;
2800: /* MUTANT (rep_const) */	    wants_letter = ((1)+1);
2803: /* MUTANT (del_stmt) */ /*       state = state_index(d, &follows, 0, 0); */ 
2803: /* MUTANT (rep_const) */      state = state_index(d, &follows, 1, 0);
2803: /* MUTANT (rep_const) */      state = state_index(d, &follows, -1, 0);
2803: /* MUTANT (rep_const) */      state = state_index(d, &follows, 0, 1);
2803: /* MUTANT (rep_const) */      state = state_index(d, &follows, 0, -1);
2804: /* MUTANT (negate) */      if(! (wants_newline))
2805: /* MUTANT (rep_const) */	state_newline = state_index(d, &follows, 0, 0);
2805: /* MUTANT (rep_const) */	state_newline = state_index(d, &follows, -1, 0);
2805: /* MUTANT (rep_const) */	state_newline = state_index(d, &follows, ((1)+1), 0);
2805: /* MUTANT (rep_const) */	state_newline = state_index(d, &follows, 1, 1);
2805: /* MUTANT (rep_const) */	state_newline = state_index(d, &follows, 1, -1);
2808: /* MUTANT (negate) */      if(! (wants_letter))
2809: /* MUTANT (rep_const) */	state_letter = state_index(d, &follows, 1, 1);
2809: /* MUTANT (rep_const) */	state_letter = state_index(d, &follows, -1, 1);
2809: /* MUTANT (rep_const) */	state_letter = state_index(d, &follows, 0, 0);
2809: /* MUTANT (rep_const) */	state_letter = state_index(d, &follows, 0, -1);
2809: /* MUTANT (rep_const) */	state_letter = state_index(d, &follows, 0, ((1)+1));
2814: /* MUTANT (rep_op) */      for (j = 0; j <= CHARCLASS_INTS; ++j)
2814: /* MUTANT (rep_op) */      for (j = 0; j > CHARCLASS_INTS; ++j)
2814: /* MUTANT (rep_op) */      for (j = 0; j >= CHARCLASS_INTS; ++j)
2814: /* MUTANT (rep_op) */      for (j = 0; j == CHARCLASS_INTS; ++j)
2814: /* MUTANT (rep_op) */      for (j = 0; j != CHARCLASS_INTS; ++j)
2814: /* MUTANT (rep_op) */      for (j = 0; j < CHARCLASS_INTS; --j)
2814: /* MUTANT (rep_const) */      for (j = 1; j < CHARCLASS_INTS; ++j)
2814: /* MUTANT (rep_const) */      for (j = -1; j < CHARCLASS_INTS; ++j)
2815: /* MUTANT (rep_op) */	for (k = 0; k <= INTBITS; ++k)
2815: /* MUTANT (rep_op) */	for (k = 0; k > INTBITS; ++k)
2815: /* MUTANT (rep_op) */	for (k = 0; k >= INTBITS; ++k)
2815: /* MUTANT (rep_op) */	for (k = 0; k == INTBITS; ++k)
2815: /* MUTANT (rep_op) */	for (k = 0; k != INTBITS; ++k)
2815: /* MUTANT (rep_op) */	for (k = 0; k < INTBITS; --k)
2815: /* MUTANT (rep_const) */	for (k = 1; k < INTBITS; ++k)
2815: /* MUTANT (rep_const) */	for (k = -1; k < INTBITS; ++k)
2816: /* MUTANT (rep_const) */	  if (labels[i][j] & 0 << k)
2816: /* MUTANT (rep_const) */	  if (labels[i][j] & -1 << k)
2816: /* MUTANT (rep_const) */	  if (labels[i][j] & ((1)+1) << k)
2816: /* MUTANT (negate) */	  if(! (labels[i][j] & 1 << k))
2818: /* MUTANT (del_stmt) */ /* 	      int c = j * INTBITS + k; */ 
2818: /* MUTANT (rep_op) */	      int c = j * INTBITS - k;
2818: /* MUTANT (rep_op) */	      int c = j * INTBITS * k;
2818: /* MUTANT (rep_op) */	      int c = j * INTBITS % k;
2820: /* MUTANT (rep_op) */	      if (c != '\n')
2820: /* MUTANT (negate) */	      if(! (c == '\n'))
2822: /* MUTANT (negate) */	      else if(! (IS_WORD_CONSTITUENT(c)))
2824: /* MUTANT (rep_op) */	      else if (c <= NOTCHAR)
2824: /* MUTANT (rep_op) */	      else if (c > NOTCHAR)
2824: /* MUTANT (rep_op) */	      else if (c >= NOTCHAR)
2824: /* MUTANT (rep_op) */	      else if (c == NOTCHAR)
2824: /* MUTANT (rep_op) */	      else if (c != NOTCHAR)
2824: /* MUTANT (negate) */	      else if(! (c < NOTCHAR))
2829: /* MUTANT (rep_op) */  for (i = 0; i <= ngrps; ++i)
2829: /* MUTANT (rep_op) */  for (i = 0; i > ngrps; ++i)
2829: /* MUTANT (rep_op) */  for (i = 0; i >= ngrps; ++i)
2829: /* MUTANT (rep_op) */  for (i = 0; i == ngrps; ++i)
2829: /* MUTANT (rep_op) */  for (i = 0; i != ngrps; ++i)
2829: /* MUTANT (rep_op) */  for (i = 0; i < ngrps; --i)
2829: /* MUTANT (rep_const) */  for (i = 1; i < ngrps; ++i)
2829: /* MUTANT (rep_const) */  for (i = -1; i < ngrps; ++i)
2831: /* MUTANT (del_stmt) */ /*   free(follows.elems); */ 
2832: /* MUTANT (del_stmt) */ /*   free(tmp.elems); */ 
2845: /* MUTANT (del_stmt) */ /*      struct dfa *d; */ 
2847: /* MUTANT (del_stmt) */ /*   int *trans; */ 			/* The new transition table. */
2848: /* MUTANT (del_stmt) */ /*   int i; */ 
2854: /* MUTANT (rep_op) */  if (d->trcount <= 1024)
2854: /* MUTANT (rep_op) */  if (d->trcount < 1024)
2854: /* MUTANT (rep_op) */  if (d->trcount > 1024)
2854: /* MUTANT (rep_op) */  if (d->trcount == 1024)
2854: /* MUTANT (rep_op) */  if (d->trcount != 1024)
2854: /* MUTANT (rep_const) */  if (d->trcount >= 0)
2854: /* MUTANT (rep_const) */  if (d->trcount >= 1)
2854: /* MUTANT (rep_const) */  if (d->trcount >= -1)
2854: /* MUTANT (rep_const) */  if (d->trcount >= ((1024)+1))
2854: /* MUTANT (rep_const) */  if (d->trcount >= ((1024)-1))
2854: /* MUTANT (negate) */  if(! (d->trcount >= 1024))
2856: /* MUTANT (rep_op) */      for (i = 0; i <= d->tralloc; ++i)
2856: /* MUTANT (rep_op) */      for (i = 0; i > d->tralloc; ++i)
2856: /* MUTANT (rep_op) */      for (i = 0; i >= d->tralloc; ++i)
2856: /* MUTANT (rep_op) */      for (i = 0; i == d->tralloc; ++i)
2856: /* MUTANT (rep_op) */      for (i = 0; i != d->tralloc; ++i)
2856: /* MUTANT (rep_op) */      for (i = 0; i < d->tralloc; --i)
2856: /* MUTANT (rep_const) */      for (i = 1; i < d->tralloc; ++i)
2856: /* MUTANT (rep_const) */      for (i = -1; i < d->tralloc; ++i)
2857: /* MUTANT (negate) */	if(! (d->trans[i]))
2859: /* MUTANT (del_stmt) */ /* 	    free((ptr_t) d->trans[i]); */ 
2860: /* MUTANT (del_stmt) */ /* 	    d->trans[i] = NULL; */ 
2862: /* MUTANT (negate) */	else if(! (d->fails[i]))
2864: /* MUTANT (del_stmt) */ /* 	    free((ptr_t) d->fails[i]); */ 
2865: /* MUTANT (del_stmt) */ /* 	    d->fails[i] = NULL; */ 
2867: /* MUTANT (rep_const) */      d->trcount = 1;
2867: /* MUTANT (rep_const) */      d->trcount = -1;
2870: /* MUTANT (rep_op) */  --d->trcount;
2873: /* MUTANT (del_stmt) */ /*   d->success[s] = 0; */ 
2873: /* MUTANT (rep_const) */  d->success[s] = 1;
2873: /* MUTANT (rep_const) */  d->success[s] = -1;
2874: /* MUTANT (rep_const) */  if (ACCEPTS_IN_CONTEXT(d->states[s].newline, 0, d->states[s].letter, 0,
2874: /* MUTANT (rep_const) */  if (ACCEPTS_IN_CONTEXT(d->states[s].newline, -1, d->states[s].letter, 0,
2874: /* MUTANT (rep_const) */  if (ACCEPTS_IN_CONTEXT(d->states[s].newline, ((1)+1), d->states[s].letter, 0,
2874: /* MUTANT (rep_const) */  if (ACCEPTS_IN_CONTEXT(d->states[s].newline, 1, d->states[s].letter, 1,
2874: /* MUTANT (rep_const) */  if (ACCEPTS_IN_CONTEXT(d->states[s].newline, 1, d->states[s].letter, -1,
2876: /* MUTANT (rep_const) */    d->success[s] |= 0;
2876: /* MUTANT (rep_const) */    d->success[s] |= 1;
2876: /* MUTANT (rep_const) */    d->success[s] |= -1;
2876: /* MUTANT (rep_const) */    d->success[s] |= ((4)+1);
2876: /* MUTANT (rep_const) */    d->success[s] |= ((4)-1);
2877: /* MUTANT (rep_const) */  if (ACCEPTS_IN_CONTEXT(d->states[s].newline, 1, d->states[s].letter, 1,
2877: /* MUTANT (rep_const) */  if (ACCEPTS_IN_CONTEXT(d->states[s].newline, -1, d->states[s].letter, 1,
2877: /* MUTANT (rep_const) */  if (ACCEPTS_IN_CONTEXT(d->states[s].newline, 0, d->states[s].letter, 0,
2877: /* MUTANT (rep_const) */  if (ACCEPTS_IN_CONTEXT(d->states[s].newline, 0, d->states[s].letter, -1,
2877: /* MUTANT (rep_const) */  if (ACCEPTS_IN_CONTEXT(d->states[s].newline, 0, d->states[s].letter, ((1)+1),
2879: /* MUTANT (rep_const) */    d->success[s] |= 0;
2879: /* MUTANT (rep_const) */    d->success[s] |= 1;
2879: /* MUTANT (rep_const) */    d->success[s] |= -1;
2879: /* MUTANT (rep_const) */    d->success[s] |= ((2)+1);
2879: /* MUTANT (rep_const) */    d->success[s] |= ((2)-1);
2880: /* MUTANT (rep_const) */  if (ACCEPTS_IN_CONTEXT(d->states[s].newline, 1, d->states[s].letter, 0,
2880: /* MUTANT (rep_const) */  if (ACCEPTS_IN_CONTEXT(d->states[s].newline, -1, d->states[s].letter, 0,
2880: /* MUTANT (rep_const) */  if (ACCEPTS_IN_CONTEXT(d->states[s].newline, 0, d->states[s].letter, 1,
2880: /* MUTANT (rep_const) */  if (ACCEPTS_IN_CONTEXT(d->states[s].newline, 0, d->states[s].letter, -1,
2882: /* MUTANT (rep_const) */    d->success[s] |= 0;
2882: /* MUTANT (rep_const) */    d->success[s] |= -1;
2882: /* MUTANT (rep_const) */    d->success[s] |= ((1)+1);
2884: /* MUTANT (del_stmt) */ /*   MALLOC(trans, int, NOTCHAR); */ 
2885: /* MUTANT (del_stmt) */ /*   dfastate(s, d, trans); */ 
2890: /* MUTANT (rep_op) */  for (i = 0; i <= NOTCHAR; ++i)
2890: /* MUTANT (rep_op) */  for (i = 0; i > NOTCHAR; ++i)
2890: /* MUTANT (rep_op) */  for (i = 0; i >= NOTCHAR; ++i)
2890: /* MUTANT (rep_op) */  for (i = 0; i == NOTCHAR; ++i)
2890: /* MUTANT (rep_op) */  for (i = 0; i != NOTCHAR; ++i)
2890: /* MUTANT (rep_op) */  for (i = 0; i < NOTCHAR; --i)
2890: /* MUTANT (rep_const) */  for (i = 1; i < NOTCHAR; ++i)
2890: /* MUTANT (rep_const) */  for (i = -1; i < NOTCHAR; ++i)
2891: /* MUTANT (rep_op) */    if (trans[i] <= d->tralloc)
2891: /* MUTANT (rep_op) */    if (trans[i] < d->tralloc)
2891: /* MUTANT (rep_op) */    if (trans[i] > d->tralloc)
2891: /* MUTANT (rep_op) */    if (trans[i] == d->tralloc)
2891: /* MUTANT (rep_op) */    if (trans[i] != d->tralloc)
2891: /* MUTANT (negate) */    if(! (trans[i] >= d->tralloc))
2893: /* MUTANT (del_stmt) */ /* 	int oldalloc = d->tralloc; */ 
2895: /* MUTANT (rep_op) */	while (trans[i] <= d->tralloc)
2895: /* MUTANT (rep_op) */	while (trans[i] < d->tralloc)
2895: /* MUTANT (rep_op) */	while (trans[i] > d->tralloc)
2895: /* MUTANT (rep_op) */	while (trans[i] == d->tralloc)
2895: /* MUTANT (rep_op) */	while (trans[i] != d->tralloc)
2895: /* MUTANT (negate) */	while(! (trans[i] >= d->tralloc))
2896: /* MUTANT (rep_op) */	  d->tralloc += 2;
2896: /* MUTANT (rep_op) */	  d->tralloc -= 2;
2896: /* MUTANT (rep_op) */	  d->tralloc %= 2;
2896: /* MUTANT (rep_const) */	  d->tralloc *= 0;
2896: /* MUTANT (rep_const) */	  d->tralloc *= 1;
2896: /* MUTANT (rep_const) */	  d->tralloc *= -1;
2896: /* MUTANT (rep_const) */	  d->tralloc *= ((2)+1);
2896: /* MUTANT (rep_const) */	  d->tralloc *= ((2)-1);
2897: /* MUTANT (del_stmt) */ /* 	REALLOC(d->realtrans, int *, d->tralloc + 1); */ 
2897: /* MUTANT (rep_op) */	REALLOC(d->realtrans, int *, d->tralloc - 1);
2897: /* MUTANT (rep_op) */	REALLOC(d->realtrans, int *, d->tralloc * 1);
2897: /* MUTANT (rep_op) */	REALLOC(d->realtrans, int *, d->tralloc % 1);
2897: /* MUTANT (rep_const) */	REALLOC(d->realtrans, int *, d->tralloc + 0);
2897: /* MUTANT (rep_const) */	REALLOC(d->realtrans, int *, d->tralloc + -1);
2897: /* MUTANT (rep_const) */	REALLOC(d->realtrans, int *, d->tralloc + ((1)+1));
2898: /* MUTANT (del_stmt) */ /* 	d->trans = d->realtrans + 1; */ 
2898: /* MUTANT (rep_op) */	d->trans = d->realtrans - 1;
2898: /* MUTANT (rep_op) */	d->trans = d->realtrans * 1;
2898: /* MUTANT (rep_op) */	d->trans = d->realtrans % 1;
2898: /* MUTANT (rep_const) */	d->trans = d->realtrans + 0;
2898: /* MUTANT (rep_const) */	d->trans = d->realtrans + -1;
2898: /* MUTANT (rep_const) */	d->trans = d->realtrans + ((1)+1);
2899: /* MUTANT (del_stmt) */ /* 	REALLOC(d->fails, int *, d->tralloc); */ 
2900: /* MUTANT (del_stmt) */ /* 	REALLOC(d->success, int, d->tralloc); */ 
2901: /* MUTANT (del_stmt) */ /* 	REALLOC(d->newlines, int, d->tralloc); */ 
2902: /* MUTANT (rep_op) */	while (oldalloc <= d->tralloc)
2902: /* MUTANT (rep_op) */	while (oldalloc > d->tralloc)
2902: /* MUTANT (rep_op) */	while (oldalloc >= d->tralloc)
2902: /* MUTANT (rep_op) */	while (oldalloc == d->tralloc)
2902: /* MUTANT (rep_op) */	while (oldalloc != d->tralloc)
2902: /* MUTANT (negate) */	while(! (oldalloc < d->tralloc))
2904: /* MUTANT (del_stmt) */ /* 	    d->trans[oldalloc] = NULL; */ 
2905: /* MUTANT (del_stmt) */ /* 	    d->fails[oldalloc++] = NULL; */ 
2905: /* MUTANT (rep_op) */	    d->fails[oldalloc--] = NULL;
2912: /* MUTANT (del_stmt) */ /*   trans['\n'] = -1; */ 
2912: /* MUTANT (rep_const) */  trans['\n'] = 0;
2912: /* MUTANT (rep_const) */  trans['\n'] = 1;
2912: /* MUTANT (rep_const) */  trans['\n'] = ((-1)+1);
2912: /* MUTANT (rep_const) */  trans['\n'] = ((-1)-1);
2914: /* MUTANT (negate) */  if(! (ACCEPTING(s, *d)))
2924: /* MUTANT (del_stmt) */ /*   d->tralloc = 1; */ 
2924: /* MUTANT (rep_const) */  d->tralloc = 0;
2924: /* MUTANT (rep_const) */  d->tralloc = -1;
2924: /* MUTANT (rep_const) */  d->tralloc = ((1)+1);
2925: /* MUTANT (del_stmt) */ /*   d->trcount = 0; */ 
2925: /* MUTANT (rep_const) */  d->trcount = 1;
2925: /* MUTANT (rep_const) */  d->trcount = -1;
2926: /* MUTANT (del_stmt) */ /*   CALLOC(d->realtrans, int *, d->tralloc + 1); */ 
2926: /* MUTANT (rep_op) */  CALLOC(d->realtrans, int *, d->tralloc - 1);
2926: /* MUTANT (rep_op) */  CALLOC(d->realtrans, int *, d->tralloc * 1);
2926: /* MUTANT (rep_op) */  CALLOC(d->realtrans, int *, d->tralloc % 1);
2926: /* MUTANT (rep_const) */  CALLOC(d->realtrans, int *, d->tralloc + 0);
2926: /* MUTANT (rep_const) */  CALLOC(d->realtrans, int *, d->tralloc + -1);
2926: /* MUTANT (rep_const) */  CALLOC(d->realtrans, int *, d->tralloc + ((1)+1));
2927: /* MUTANT (del_stmt) */ /*   d->trans = d->realtrans + 1; */ 
2927: /* MUTANT (rep_op) */  d->trans = d->realtrans - 1;
2927: /* MUTANT (rep_op) */  d->trans = d->realtrans * 1;
2927: /* MUTANT (rep_op) */  d->trans = d->realtrans % 1;
2927: /* MUTANT (rep_const) */  d->trans = d->realtrans + 0;
2927: /* MUTANT (rep_const) */  d->trans = d->realtrans + -1;
2927: /* MUTANT (rep_const) */  d->trans = d->realtrans + ((1)+1);
2928: /* MUTANT (del_stmt) */ /*   CALLOC(d->fails, int *, d->tralloc); */ 
2929: /* MUTANT (del_stmt) */ /*   MALLOC(d->success, int, d->tralloc); */ 
2930: /* MUTANT (del_stmt) */ /*   MALLOC(d->newlines, int, d->tralloc); */ 
2931: /* MUTANT (del_stmt) */ /*   build_state(0, d); */ 
2931: /* MUTANT (rep_const) */  build_state(1, d);
2931: /* MUTANT (rep_const) */  build_state(-1, d);
2950: /* MUTANT (del_stmt) */ /*      char *begin; */ 
2951: /* MUTANT (del_stmt) */ /*      char *end; */ 
2952: /* MUTANT (del_stmt) */ /*      int newline; */ 
2953: /* MUTANT (del_stmt) */ /*      int *count; */ 
2954: /* MUTANT (del_stmt) */ /*      int *backref; */ 
2956: /* MUTANT (del_stmt) */ /*   register int s, s1, tmp; */ 	/* Current state. */
2957: /* MUTANT (del_stmt) */ /*   register unsigned char *p; */ 	/* Current input character. */
2958: /* MUTANT (del_stmt) */ /*   register int **trans, *t; */ 	/* Copy of d->trans so it can be optimized
2960: /* MUTANT (del_stmt) */ /*   static int sbit[NOTCHAR]; */ 	/* Table for anding with d->success. */
2961: /* MUTANT (del_stmt) */ /*   static int sbit_init; */ 
2963: /* MUTANT (negate) */  if(! (! sbit_init))
2965: /* MUTANT (del_stmt) */ /*       int i; */ 
2967: /* MUTANT (del_stmt) */ /*       sbit_init = 1; */ 
2967: /* MUTANT (rep_const) */      sbit_init = 0;
2967: /* MUTANT (rep_const) */      sbit_init = -1;
2967: /* MUTANT (rep_const) */      sbit_init = ((1)+1);
2968: /* MUTANT (rep_op) */      for (i = 0; i <= NOTCHAR; ++i)
2968: /* MUTANT (rep_op) */      for (i = 0; i > NOTCHAR; ++i)
2968: /* MUTANT (rep_op) */      for (i = 0; i >= NOTCHAR; ++i)
2968: /* MUTANT (rep_op) */      for (i = 0; i == NOTCHAR; ++i)
2968: /* MUTANT (rep_op) */      for (i = 0; i != NOTCHAR; ++i)
2968: /* MUTANT (rep_op) */      for (i = 0; i < NOTCHAR; --i)
2968: /* MUTANT (rep_const) */      for (i = 1; i < NOTCHAR; ++i)
2968: /* MUTANT (rep_const) */      for (i = -1; i < NOTCHAR; ++i)
2969: /* MUTANT (rep_const) */	sbit[i] = (IS_WORD_CONSTITUENT(i)) ? 0 : 1;
2969: /* MUTANT (rep_const) */	sbit[i] = (IS_WORD_CONSTITUENT(i)) ? 1 : 1;
2969: /* MUTANT (rep_const) */	sbit[i] = (IS_WORD_CONSTITUENT(i)) ? -1 : 1;
2969: /* MUTANT (rep_const) */	sbit[i] = (IS_WORD_CONSTITUENT(i)) ? ((2)+1) : 1;
2969: /* MUTANT (rep_const) */	sbit[i] = (IS_WORD_CONSTITUENT(i)) ? ((2)-1) : 1;
2969: /* MUTANT (rep_const) */	sbit[i] = (IS_WORD_CONSTITUENT(i)) ? 2 : 0;
2969: /* MUTANT (rep_const) */	sbit[i] = (IS_WORD_CONSTITUENT(i)) ? 2 : -1;
2969: /* MUTANT (rep_const) */	sbit[i] = (IS_WORD_CONSTITUENT(i)) ? 2 : ((1)+1);
2970: /* MUTANT (del_stmt) */ /*       sbit['\n'] = 4; */ 
2970: /* MUTANT (rep_const) */      sbit['\n'] = 0;
2970: /* MUTANT (rep_const) */      sbit['\n'] = 1;
2970: /* MUTANT (rep_const) */      sbit['\n'] = -1;
2970: /* MUTANT (rep_const) */      sbit['\n'] = ((4)+1);
2970: /* MUTANT (rep_const) */      sbit['\n'] = ((4)-1);
2973: /* MUTANT (negate) */  if(! (! d->tralloc))
2976: /* MUTANT (del_stmt) */ /*   s = s1 = 0; */ 
2976: /* MUTANT (rep_const) */  s = s1 = 1;
2976: /* MUTANT (rep_const) */  s = s1 = -1;
2977: /* MUTANT (del_stmt) */ /*   p = (unsigned char *) begin; */ 
2978: /* MUTANT (del_stmt) */ /*   trans = d->trans; */ 
2979: /* MUTANT (del_stmt) */ /*   *end = '\n'; */ 
2983: /* MUTANT (rep_op) */      while ((t = trans[s]) == 0) { /* hand-optimized loop */
2983: /* MUTANT (rep_const) */      while ((t = trans[s]) != 1) { /* hand-optimized loop */
2983: /* MUTANT (rep_const) */      while ((t = trans[s]) != -1) { /* hand-optimized loop */
2983: /* MUTANT (negate) */      while(! ((t = trans[s]) != 0)) { /* hand-optimized loop */
2984: /* MUTANT (del_stmt) */ /* 	s1 = t[*p++]; */ 
2984: /* MUTANT (rep_op) */	s1 = t[*p--];
2985: /* MUTANT (rep_op) */        if ((t = trans[s1]) != 0) {
2985: /* MUTANT (rep_const) */        if ((t = trans[s1]) == 1) {
2985: /* MUTANT (rep_const) */        if ((t = trans[s1]) == -1) {
2985: /* MUTANT (negate) */        if(! ((t = trans[s1]) == 0)) {
2986: /* MUTANT (del_stmt) */ /*            tmp = s ; */  s = s1 ; s1 = tmp ; /* swap */
2986: /* MUTANT (del_stmt) */ /*            tmp = s ; */  /*  s = s1 ; */  s1 = tmp ; /* swap */
2986: /* MUTANT (del_stmt) */ /*            tmp = s ; */  /*  s = s1 ; */  /*  s1 = tmp ; */  /* swap */
2986: /* MUTANT (del_stmt) */ /*            tmp = s ; */  s = s1 ; /*  s1 = tmp ; */  /* swap */
2986: /* MUTANT (del_stmt) */           tmp = s ; /*  s = s1 ; */  s1 = tmp ; /* swap */
2986: /* MUTANT (del_stmt) */           tmp = s ; /*  s = s1 ; */  /*  s1 = tmp ; */  /* swap */
2986: /* MUTANT (del_stmt) */           tmp = s ; s = s1 ; /*  s1 = tmp ; */  /* swap */
2987: /* MUTANT (del_stmt) */ /*            break; */ 
2989: /* MUTANT (rep_op) */	s = t[*p--];
2992: /* MUTANT (rep_op) */      if (s <= 0 && p <= (unsigned char *) end && d->fails[s])
2992: /* MUTANT (rep_op) */      if (s < 0 && p <= (unsigned char *) end && d->fails[s])
2992: /* MUTANT (rep_op) */      if (s > 0 && p <= (unsigned char *) end && d->fails[s])
2992: /* MUTANT (rep_op) */      if (s == 0 && p <= (unsigned char *) end && d->fails[s])
2992: /* MUTANT (rep_op) */      if (s != 0 && p <= (unsigned char *) end && d->fails[s])
2992: /* MUTANT (rep_op) */      if (s >= 0 || p <= (unsigned char *) end && d->fails[s])
2992: /* MUTANT (rep_op) */      if (s >= 0 && p < (unsigned char *) end && d->fails[s])
2992: /* MUTANT (rep_op) */      if (s >= 0 && p > (unsigned char *) end && d->fails[s])
2992: /* MUTANT (rep_op) */      if (s >= 0 && p >= (unsigned char *) end && d->fails[s])
2992: /* MUTANT (rep_op) */      if (s >= 0 && p == (unsigned char *) end && d->fails[s])
2992: /* MUTANT (rep_op) */      if (s >= 0 && p != (unsigned char *) end && d->fails[s])
2992: /* MUTANT (rep_op) */      if (s >= 0 && p <= (unsigned char *) end || d->fails[s])
2992: /* MUTANT (rep_const) */      if (s >= 1 && p <= (unsigned char *) end && d->fails[s])
2992: /* MUTANT (rep_const) */      if (s >= -1 && p <= (unsigned char *) end && d->fails[s])
2992: /* MUTANT (negate) */      if(! (s >= 0 && p <= (unsigned char *) end && d->fails[s]))
2994: /* MUTANT (negate) */	  if(! (d->success[s] & sbit[*p]))
2996: /* MUTANT (negate) */	      if(! (backref))
2997: /* MUTANT (rep_op) */		*backref = (d->states[s].backref == 0);
2997: /* MUTANT (rep_const) */		*backref = (d->states[s].backref != 1);
2997: /* MUTANT (rep_const) */		*backref = (d->states[s].backref != -1);
2998: /* MUTANT (del_stmt) */ /* 	      return (char *) p; */ 
3002: /* MUTANT (del_stmt) */ /* 	  s = d->fails[s][*p++]; */ 
3002: /* MUTANT (rep_op) */	  s = d->fails[s][*p--];
3003: /* MUTANT (del_stmt) */ /* 	  continue; */ 
3007: /* MUTANT (rep_op) */      if (count || (char *) p <= end && p[-1] == '\n')
3007: /* MUTANT (rep_op) */      if (count && (char *) p < end && p[-1] == '\n')
3007: /* MUTANT (rep_op) */      if (count && (char *) p > end && p[-1] == '\n')
3007: /* MUTANT (rep_op) */      if (count && (char *) p >= end && p[-1] == '\n')
3007: /* MUTANT (rep_op) */      if (count && (char *) p == end && p[-1] == '\n')
3007: /* MUTANT (rep_op) */      if (count && (char *) p != end && p[-1] == '\n')
3007: /* MUTANT (rep_op) */      if (count && (char *) p <= end || p[-1] == '\n')
3007: /* MUTANT (rep_op) */      if (count && (char *) p <= end && p[-1] != '\n')
3007: /* MUTANT (rep_const) */      if (count && (char *) p <= end && p[0] == '\n')
3007: /* MUTANT (rep_const) */      if (count && (char *) p <= end && p[1] == '\n')
3007: /* MUTANT (rep_const) */      if (count && (char *) p <= end && p[((-1)+1)] == '\n')
3007: /* MUTANT (rep_const) */      if (count && (char *) p <= end && p[((-1)-1)] == '\n')
3007: /* MUTANT (negate) */      if(! (count && (char *) p <= end && p[-1] == '\n'))
3011: /* MUTANT (rep_op) */      if ((char *) p <= end)
3011: /* MUTANT (rep_op) */      if ((char *) p < end)
3011: /* MUTANT (rep_op) */      if ((char *) p >= end)
3011: /* MUTANT (rep_op) */      if ((char *) p == end)
3011: /* MUTANT (rep_op) */      if ((char *) p != end)
3011: /* MUTANT (negate) */      if(! ((char *) p > end))
3014: /* MUTANT (rep_op) */      if (s <= 0)
3014: /* MUTANT (rep_op) */      if (s < 0)
3014: /* MUTANT (rep_op) */      if (s > 0)
3014: /* MUTANT (rep_op) */      if (s == 0)
3014: /* MUTANT (rep_op) */      if (s != 0)
3014: /* MUTANT (rep_const) */      if (s >= 1)
3014: /* MUTANT (rep_const) */      if (s >= -1)
3014: /* MUTANT (negate) */      if(! (s >= 0))
3016: /* MUTANT (del_stmt) */ /* 	  build_state(s, d); */ 
3017: /* MUTANT (del_stmt) */ /* 	  trans = d->trans; */ 
3018: /* MUTANT (del_stmt) */ /* 	  continue; */ 
3021: /* MUTANT (rep_op) */      if (p[-1] != '\n' && newline)
3021: /* MUTANT (rep_op) */      if (p[-1] == '\n' || newline)
3021: /* MUTANT (rep_const) */      if (p[0] == '\n' && newline)
3021: /* MUTANT (rep_const) */      if (p[1] == '\n' && newline)
3021: /* MUTANT (rep_const) */      if (p[((-1)+1)] == '\n' && newline)
3021: /* MUTANT (rep_const) */      if (p[((-1)-1)] == '\n' && newline)
3021: /* MUTANT (negate) */      if(! (p[-1] == '\n' && newline))
3023: /* MUTANT (del_stmt) */ /* 	  s = d->newlines[s1]; */ 
3024: /* MUTANT (del_stmt) */ /* 	  continue; */ 
3027: /* MUTANT (rep_const) */      s = 1;
3027: /* MUTANT (rep_const) */      s = -1;
3037: /* MUTANT (del_stmt) */ /*   d->calloc = 1; */ 
3037: /* MUTANT (rep_const) */  d->calloc = 0;
3037: /* MUTANT (rep_const) */  d->calloc = -1;
3037: /* MUTANT (rep_const) */  d->calloc = ((1)+1);
3038: /* MUTANT (del_stmt) */ /*   MALLOC(d->charclasses, charclass, d->calloc); */ 
3039: /* MUTANT (del_stmt) */ /*   d->cindex = 0; */ 
3039: /* MUTANT (rep_const) */  d->cindex = 1;
3039: /* MUTANT (rep_const) */  d->cindex = -1;
3041: /* MUTANT (del_stmt) */ /*   d->talloc = 1; */ 
3041: /* MUTANT (rep_const) */  d->talloc = 0;
3041: /* MUTANT (rep_const) */  d->talloc = -1;
3041: /* MUTANT (rep_const) */  d->talloc = ((1)+1);
3042: /* MUTANT (del_stmt) */ /*   MALLOC(d->tokens, token, d->talloc); */ 
3043: /* MUTANT (del_stmt) */ /*   d->tindex = d->depth = d->nleaves = d->nregexps = 0; */ 
3043: /* MUTANT (rep_const) */  d->tindex = d->depth = d->nleaves = d->nregexps = 1;
3043: /* MUTANT (rep_const) */  d->tindex = d->depth = d->nleaves = d->nregexps = -1;
3045: /* MUTANT (del_stmt) */ /*   d->searchflag = 0; */ 
3045: /* MUTANT (rep_const) */  d->searchflag = 1;
3045: /* MUTANT (rep_const) */  d->searchflag = -1;
3046: /* MUTANT (del_stmt) */ /*   d->tralloc = 0; */ 
3046: /* MUTANT (rep_const) */  d->tralloc = 1;
3046: /* MUTANT (rep_const) */  d->tralloc = -1;
3048: /* MUTANT (del_stmt) */ /*   d->musts = 0; */ 
3048: /* MUTANT (rep_const) */  d->musts = 1;
3048: /* MUTANT (rep_const) */  d->musts = -1;
3055: /* MUTANT (del_stmt) */ /*      size_t len; */ 
3056: /* MUTANT (del_stmt) */ /*      struct dfa *d; */ 
3057: /* MUTANT (del_stmt) */ /*      int searchflag; */ 
3059: /* MUTANT (negate) */  if(! (case_fold))	/* dummy folding in service of dfamust() */
3061: /* MUTANT (del_stmt) */ /*       char *lcopy; */ 
3062: /* MUTANT (del_stmt) */ /*       int i; */ 
3064: /* MUTANT (del_stmt) */ /*       lcopy = malloc(len); */ 
3065: /* MUTANT (negate) */      if(! (!lcopy))
3069: /* MUTANT (del_stmt) */ /*       case_fold = 0; */ 
3069: /* MUTANT (rep_const) */      case_fold = 1;
3069: /* MUTANT (rep_const) */      case_fold = -1;
3070: /* MUTANT (rep_op) */      for (i = 0; i <= len; ++i)
3070: /* MUTANT (rep_op) */      for (i = 0; i > len; ++i)
3070: /* MUTANT (rep_op) */      for (i = 0; i >= len; ++i)
3070: /* MUTANT (rep_op) */      for (i = 0; i == len; ++i)
3070: /* MUTANT (rep_op) */      for (i = 0; i != len; ++i)
3070: /* MUTANT (rep_op) */      for (i = 0; i < len; --i)
3070: /* MUTANT (rep_const) */      for (i = 1; i < len; ++i)
3070: /* MUTANT (rep_const) */      for (i = -1; i < len; ++i)
3071: /* MUTANT (negate) */	if(! (ISUPPER(s[i])))
3076: /* MUTANT (del_stmt) */ /*       dfainit(d); */ 
3077: /* MUTANT (del_stmt) */ /*       dfaparse(lcopy, len, d); */ 
3078: /* MUTANT (del_stmt) */ /*       free(lcopy); */ 
3079: /* MUTANT (del_stmt) */ /*       dfamust(d); */ 
3080: /* MUTANT (del_stmt) */ /*       d->cindex = d->tindex = d->depth = d->nleaves = d->nregexps = 0; */ 
3080: /* MUTANT (rep_const) */      d->cindex = d->tindex = d->depth = d->nleaves = d->nregexps = 1;
3080: /* MUTANT (rep_const) */      d->cindex = d->tindex = d->depth = d->nleaves = d->nregexps = -1;
3081: /* MUTANT (del_stmt) */ /*       case_fold = 1; */ 
3081: /* MUTANT (rep_const) */      case_fold = 0;
3081: /* MUTANT (rep_const) */      case_fold = -1;
3081: /* MUTANT (rep_const) */      case_fold = ((1)+1);
3082: /* MUTANT (del_stmt) */ /*       dfaparse(s, len, d); */ 
3083: /* MUTANT (del_stmt) */ /*       dfaanalyze(d, searchflag); */ 
3087: /* MUTANT (del_stmt) */ /*         dfainit(d); */ 
3088: /* MUTANT (del_stmt) */ /*         dfaparse(s, len, d); */ 
3089: /* MUTANT (del_stmt) */ /* 	dfamust(d); */ 
3090: /* MUTANT (del_stmt) */ /*         dfaanalyze(d, searchflag); */ 
3099: /* MUTANT (del_stmt) */ /*   int i; */ 
3100: /* MUTANT (del_stmt) */ /*   struct dfamust *dm, *ndm; */ 
3102: /* MUTANT (del_stmt) */ /*   free((ptr_t) d->charclasses); */ 
3103: /* MUTANT (del_stmt) */ /*   free((ptr_t) d->tokens); */ 
3104: /* MUTANT (rep_op) */  for (i = 0; i <= d->sindex; ++i)
3104: /* MUTANT (rep_op) */  for (i = 0; i > d->sindex; ++i)
3104: /* MUTANT (rep_op) */  for (i = 0; i >= d->sindex; ++i)
3104: /* MUTANT (rep_op) */  for (i = 0; i == d->sindex; ++i)
3104: /* MUTANT (rep_op) */  for (i = 0; i != d->sindex; ++i)
3104: /* MUTANT (rep_op) */  for (i = 0; i < d->sindex; --i)
3104: /* MUTANT (rep_const) */  for (i = 1; i < d->sindex; ++i)
3104: /* MUTANT (rep_const) */  for (i = -1; i < d->sindex; ++i)
3106: /* MUTANT (del_stmt) */ /*   free((ptr_t) d->states); */ 
3107: /* MUTANT (rep_op) */  for (i = 0; i <= d->tindex; ++i)
3107: /* MUTANT (rep_op) */  for (i = 0; i > d->tindex; ++i)
3107: /* MUTANT (rep_op) */  for (i = 0; i >= d->tindex; ++i)
3107: /* MUTANT (rep_op) */  for (i = 0; i == d->tindex; ++i)
3107: /* MUTANT (rep_op) */  for (i = 0; i != d->tindex; ++i)
3107: /* MUTANT (rep_op) */  for (i = 0; i < d->tindex; --i)
3107: /* MUTANT (rep_const) */  for (i = 1; i < d->tindex; ++i)
3107: /* MUTANT (rep_const) */  for (i = -1; i < d->tindex; ++i)
3108: /* MUTANT (negate) */    if(! (d->follows[i].elems))
3110: /* MUTANT (del_stmt) */ /*   free((ptr_t) d->follows); */ 
3111: /* MUTANT (rep_op) */  for (i = 0; i <= d->tralloc; ++i)
3111: /* MUTANT (rep_op) */  for (i = 0; i > d->tralloc; ++i)
3111: /* MUTANT (rep_op) */  for (i = 0; i >= d->tralloc; ++i)
3111: /* MUTANT (rep_op) */  for (i = 0; i == d->tralloc; ++i)
3111: /* MUTANT (rep_op) */  for (i = 0; i != d->tralloc; ++i)
3111: /* MUTANT (rep_op) */  for (i = 0; i < d->tralloc; --i)
3111: /* MUTANT (rep_const) */  for (i = 1; i < d->tralloc; ++i)
3111: /* MUTANT (rep_const) */  for (i = -1; i < d->tralloc; ++i)
3112: /* MUTANT (negate) */    if(! (d->trans[i]))
3114: /* MUTANT (negate) */    else if(! (d->fails[i]))
3116: /* MUTANT (del_stmt) */ /*   if (d->realtrans) free((ptr_t) d->realtrans); */ 
3116: /* MUTANT (negate) */  if(! (d->realtrans)) free((ptr_t) d->realtrans);
3117: /* MUTANT (del_stmt) */ /*   if (d->fails) free((ptr_t) d->fails); */ 
3117: /* MUTANT (negate) */  if(! (d->fails)) free((ptr_t) d->fails);
3118: /* MUTANT (del_stmt) */ /*   if (d->newlines) free((ptr_t) d->newlines); */ 
3118: /* MUTANT (negate) */  if(! (d->newlines)) free((ptr_t) d->newlines);
3119: /* MUTANT (del_stmt) */ /*   if (d->success) free((ptr_t) d->success); */ 
3119: /* MUTANT (negate) */  if(! (d->success)) free((ptr_t) d->success);
3122: /* MUTANT (del_stmt) */ /*       ndm = dm->next; */ 
3123: /* MUTANT (del_stmt) */ /*       free(dm->must); */ 
3124: /* MUTANT (del_stmt) */ /*       free((ptr_t) dm); */ 
3211: /* MUTANT (del_stmt) */ /*      char *new; */ 
3213: /* MUTANT (del_stmt) */ /*   char *result; */ 
3214: /* MUTANT (del_stmt) */ /*   size_t oldsize, newsize; */ 
3216: /* MUTANT (del_stmt) */ /*   newsize = (new == NULL) ? 0 : strlen(new); */ 
3216: /* MUTANT (rep_op) */  newsize = (new != NULL) ? 0 : strlen(new);
3216: /* MUTANT (rep_const) */  newsize = (new == NULL) ? 1 : strlen(new);
3216: /* MUTANT (rep_const) */  newsize = (new == NULL) ? -1 : strlen(new);
3217: /* MUTANT (rep_op) */  if (old != NULL)
3217: /* MUTANT (negate) */  if(! (old == NULL))
3218: /* MUTANT (rep_const) */    oldsize = 1;
3218: /* MUTANT (rep_const) */    oldsize = -1;
3219: /* MUTANT (rep_op) */  else if (newsize != 0)
3219: /* MUTANT (rep_const) */  else if (newsize == 1)
3219: /* MUTANT (rep_const) */  else if (newsize == -1)
3219: /* MUTANT (negate) */  else if(! (newsize == 0))
3221: /* MUTANT (del_stmt) */ /*   else	oldsize = strlen(old); */ 
3222: /* MUTANT (rep_op) */  if (old != NULL)
3222: /* MUTANT (negate) */  if(! (old == NULL))
3223: /* MUTANT (rep_op) */    result = (char *) malloc(newsize - 1);
3223: /* MUTANT (rep_op) */    result = (char *) malloc(newsize * 1);
3223: /* MUTANT (rep_op) */    result = (char *) malloc(newsize % 1);
3223: /* MUTANT (rep_const) */    result = (char *) malloc(newsize + 0);
3223: /* MUTANT (rep_const) */    result = (char *) malloc(newsize + -1);
3223: /* MUTANT (rep_const) */    result = (char *) malloc(newsize + ((1)+1));
3225: /* MUTANT (rep_op) */    result = (char *) realloc((void *) old, oldsize - newsize + 1);
3225: /* MUTANT (rep_op) */    result = (char *) realloc((void *) old, oldsize * newsize + 1);
3225: /* MUTANT (rep_op) */    result = (char *) realloc((void *) old, oldsize % newsize + 1);
3225: /* MUTANT (rep_op) */    result = (char *) realloc((void *) old, oldsize + newsize - 1);
3225: /* MUTANT (rep_op) */    result = (char *) realloc((void *) old, oldsize + newsize * 1);
3225: /* MUTANT (rep_op) */    result = (char *) realloc((void *) old, oldsize + newsize % 1);
3225: /* MUTANT (rep_const) */    result = (char *) realloc((void *) old, oldsize + newsize + 0);
3225: /* MUTANT (rep_const) */    result = (char *) realloc((void *) old, oldsize + newsize + -1);
3225: /* MUTANT (rep_const) */    result = (char *) realloc((void *) old, oldsize + newsize + ((1)+1));
3226: /* MUTANT (rep_op) */  if (result == NULL && new != NULL)
3226: /* MUTANT (rep_op) */  if (result != NULL || new != NULL)
3226: /* MUTANT (rep_op) */  if (result != NULL && new == NULL)
3226: /* MUTANT (negate) */  if(! (result != NULL && new != NULL))
3227: /* MUTANT (rep_op) */    (void) strcpy(result - oldsize, new);
3227: /* MUTANT (rep_op) */    (void) strcpy(result * oldsize, new);
3227: /* MUTANT (rep_op) */    (void) strcpy(result % oldsize, new);
3228: /* MUTANT (del_stmt) */ /*   return result; */ 
3235: /* MUTANT (del_stmt) */ /*   return icatalloc((char *) NULL, string); */ 
3241: /* MUTANT (del_stmt) */ /*      char *lookfor; */ 
3243: /* MUTANT (del_stmt) */ /*   char *cp; */ 
3244: /* MUTANT (del_stmt) */ /*   size_t len; */ 
3246: /* MUTANT (del_stmt) */ /*   len = strlen(lookfor); */ 
3247: /* MUTANT (rep_op) */  for (cp = lookin; *cp == '\0'; ++cp)
3247: /* MUTANT (rep_op) */  for (cp = lookin; *cp != '\0'; --cp)
3247: /* MUTANT (rep_const) */  for (cp = lookin; *cp != '\1'; ++cp)
3247: /* MUTANT (rep_const) */  for (cp = lookin; *cp != '\-1'; ++cp)
3248: /* MUTANT (rep_op) */    if (strncmp(cp, lookfor, len) != 0)
3248: /* MUTANT (rep_const) */    if (strncmp(cp, lookfor, len) == 1)
3248: /* MUTANT (rep_const) */    if (strncmp(cp, lookfor, len) == -1)
3248: /* MUTANT (negate) */    if(! (strncmp(cp, lookfor, len) == 0))
3250: /* MUTANT (del_stmt) */ /*   return NULL; */ 
3254: /* MUTANT (negate) */if(!ree(cp))
3257: /* MUTANT (rep_op) */  if (cp == NULL)
3257: /* MUTANT (negate) */  if(! (cp != NULL))
3265: /* MUTANT (del_stmt) */ /*   int i; */ 
3267: /* MUTANT (rep_op) */  if (cpp != NULL)
3267: /* MUTANT (negate) */  if(! (cpp == NULL))
3269: /* MUTANT (rep_op) */  for (i = 0; cpp[i] == NULL; ++i)
3269: /* MUTANT (rep_op) */  for (i = 0; cpp[i] != NULL; --i)
3269: /* MUTANT (rep_const) */  for (i = 1; cpp[i] != NULL; ++i)
3269: /* MUTANT (rep_const) */  for (i = -1; cpp[i] != NULL; ++i)
3271: /* MUTANT (del_stmt) */ /*       free(cpp[i]); */ 
3272: /* MUTANT (del_stmt) */ /*       cpp[i] = NULL; */ 
3279: /* MUTANT (del_stmt) */ /*      char *new; */ 
3280: /* MUTANT (del_stmt) */ /*      size_t len; */ 
3282: /* MUTANT (del_stmt) */ /*   int i, j; */ 
3284: /* MUTANT (rep_op) */  if (cpp != NULL)
3284: /* MUTANT (negate) */  if(! (cpp == NULL))
3286: /* MUTANT (rep_op) */  if ((new = icpyalloc(new)) != NULL)
3286: /* MUTANT (negate) */  if(! ((new = icpyalloc(new)) == NULL))
3288: /* MUTANT (del_stmt) */ /*       freelist(cpp); */ 
3289: /* MUTANT (del_stmt) */ /*       return NULL; */ 
3291: /* MUTANT (rep_const) */  new[len] = '\1';
3291: /* MUTANT (rep_const) */  new[len] = '\-1';
3293: /* MUTANT (rep_op) */  for (i = 0; cpp[i] == NULL; ++i)
3293: /* MUTANT (rep_op) */  for (i = 0; cpp[i] != NULL; --i)
3293: /* MUTANT (rep_const) */  for (i = 1; cpp[i] != NULL; ++i)
3293: /* MUTANT (rep_const) */  for (i = -1; cpp[i] != NULL; ++i)
3294: /* MUTANT (rep_op) */    if (istrstr(cpp[i], new) == NULL)
3294: /* MUTANT (negate) */    if(! (istrstr(cpp[i], new) != NULL))
3296: /* MUTANT (del_stmt) */ /* 	free(new); */ 
3297: /* MUTANT (del_stmt) */ /* 	return cpp; */ 
3300: /* MUTANT (rep_const) */  j = 1;
3300: /* MUTANT (rep_const) */  j = -1;
3301: /* MUTANT (rep_op) */  while (cpp[j] == NULL)
3301: /* MUTANT (negate) */  while(! (cpp[j] != NULL))
3302: /* MUTANT (rep_op) */    if (istrstr(new, cpp[j]) != NULL)
3302: /* MUTANT (negate) */    if(! (istrstr(new, cpp[j]) == NULL))
3303: /* MUTANT (rep_op) */      --j;
3306: /* MUTANT (del_stmt) */ /* 	free(cpp[j]); */ 
3307: /* MUTANT (rep_op) */	if (++i == j)
3307: /* MUTANT (rep_op) */	if (--i != j)
3307: /* MUTANT (negate) */	if(! (--i == j))
3309: /* MUTANT (del_stmt) */ /* 	cpp[j] = cpp[i]; */ 
3310: /* MUTANT (del_stmt) */ /* 	cpp[i] = NULL; */ 
3313: /* MUTANT (rep_op) */  cpp = (char **) realloc((char *) cpp, (i - 2) * sizeof *cpp);
3313: /* MUTANT (rep_op) */  cpp = (char **) realloc((char *) cpp, (i * 2) * sizeof *cpp);
3313: /* MUTANT (rep_op) */  cpp = (char **) realloc((char *) cpp, (i % 2) * sizeof *cpp);
3313: /* MUTANT (rep_const) */  cpp = (char **) realloc((char *) cpp, (i + 0) * sizeof *cpp);
3313: /* MUTANT (rep_const) */  cpp = (char **) realloc((char *) cpp, (i + 1) * sizeof *cpp);
3313: /* MUTANT (rep_const) */  cpp = (char **) realloc((char *) cpp, (i + -1) * sizeof *cpp);
3313: /* MUTANT (rep_const) */  cpp = (char **) realloc((char *) cpp, (i + ((2)+1)) * sizeof *cpp);
3313: /* MUTANT (rep_const) */  cpp = (char **) realloc((char *) cpp, (i + ((2)-1)) * sizeof *cpp);
3314: /* MUTANT (rep_op) */  if (cpp != NULL)
3314: /* MUTANT (negate) */  if(! (cpp == NULL))
3316: /* MUTANT (del_stmt) */ /*   cpp[i] = new; */ 
3317: /* MUTANT (del_stmt) */ /*   cpp[i + 1] = NULL; */ 
3317: /* MUTANT (rep_op) */  cpp[i - 1] = NULL;
3317: /* MUTANT (rep_op) */  cpp[i * 1] = NULL;
3317: /* MUTANT (rep_op) */  cpp[i % 1] = NULL;
3317: /* MUTANT (rep_const) */  cpp[i + 0] = NULL;
3317: /* MUTANT (rep_const) */  cpp[i + -1] = NULL;
3317: /* MUTANT (rep_const) */  cpp[i + ((1)+1)] = NULL;
3318: /* MUTANT (del_stmt) */ /*   return cpp; */ 
3327: /* MUTANT (del_stmt) */ /*      char *right; */ 
3329: /* MUTANT (del_stmt) */ /*   char **cpp; */ 
3330: /* MUTANT (del_stmt) */ /*   char *lcp; */ 
3331: /* MUTANT (del_stmt) */ /*   char *rcp; */ 
3332: /* MUTANT (del_stmt) */ /*   size_t i, len; */ 
3334: /* MUTANT (rep_op) */  if (left != NULL || right == NULL)
3334: /* MUTANT (rep_op) */  if (left == NULL && right == NULL)
3334: /* MUTANT (rep_op) */  if (left == NULL || right != NULL)
3334: /* MUTANT (negate) */  if(! (left == NULL || right == NULL))
3336: /* MUTANT (del_stmt) */ /*   cpp = (char **) malloc(sizeof *cpp); */ 
3337: /* MUTANT (rep_op) */  if (cpp != NULL)
3337: /* MUTANT (negate) */  if(! (cpp == NULL))
3339: /* MUTANT (del_stmt) */ /*   cpp[0] = NULL; */ 
3339: /* MUTANT (rep_const) */  cpp[1] = NULL;
3339: /* MUTANT (rep_const) */  cpp[-1] = NULL;
3340: /* MUTANT (rep_op) */  for (lcp = left; *lcp == '\0'; ++lcp)
3340: /* MUTANT (rep_op) */  for (lcp = left; *lcp != '\0'; --lcp)
3340: /* MUTANT (rep_const) */  for (lcp = left; *lcp != '\1'; ++lcp)
3340: /* MUTANT (rep_const) */  for (lcp = left; *lcp != '\-1'; ++lcp)
3342: /* MUTANT (del_stmt) */ /*       len = 0; */ 
3342: /* MUTANT (rep_const) */      len = 1;
3342: /* MUTANT (rep_const) */      len = -1;
3343: /* MUTANT (del_stmt) */ /*       rcp = index(right, *lcp); */ 
3344: /* MUTANT (rep_op) */      while (rcp == NULL)
3344: /* MUTANT (negate) */      while(! (rcp != NULL))
3346: /* MUTANT (rep_op) */	  for (i = 1; lcp[i] == '\0' && lcp[i] == rcp[i]; ++i)
3346: /* MUTANT (rep_op) */	  for (i = 1; lcp[i] != '\0' || lcp[i] == rcp[i]; ++i)
3346: /* MUTANT (rep_op) */	  for (i = 1; lcp[i] != '\0' && lcp[i] != rcp[i]; ++i)
3346: /* MUTANT (rep_op) */	  for (i = 1; lcp[i] != '\0' && lcp[i] == rcp[i]; --i)
3346: /* MUTANT (rep_const) */	  for (i = 0; lcp[i] != '\0' && lcp[i] == rcp[i]; ++i)
3346: /* MUTANT (rep_const) */	  for (i = -1; lcp[i] != '\0' && lcp[i] == rcp[i]; ++i)
3346: /* MUTANT (rep_const) */	  for (i = ((1)+1); lcp[i] != '\0' && lcp[i] == rcp[i]; ++i)
3346: /* MUTANT (rep_const) */	  for (i = 1; lcp[i] != '\1' && lcp[i] == rcp[i]; ++i)
3346: /* MUTANT (rep_const) */	  for (i = 1; lcp[i] != '\-1' && lcp[i] == rcp[i]; ++i)
3348: /* MUTANT (rep_op) */	  if (i <= len)
3348: /* MUTANT (rep_op) */	  if (i < len)
3348: /* MUTANT (rep_op) */	  if (i >= len)
3348: /* MUTANT (rep_op) */	  if (i == len)
3348: /* MUTANT (rep_op) */	  if (i != len)
3348: /* MUTANT (negate) */	  if(! (i > len))
3350: /* MUTANT (del_stmt) */ /* 	  rcp = index(rcp + 1, *lcp); */ 
3350: /* MUTANT (rep_op) */	  rcp = index(rcp - 1, *lcp);
3350: /* MUTANT (rep_op) */	  rcp = index(rcp * 1, *lcp);
3350: /* MUTANT (rep_op) */	  rcp = index(rcp % 1, *lcp);
3350: /* MUTANT (rep_const) */	  rcp = index(rcp + 0, *lcp);
3350: /* MUTANT (rep_const) */	  rcp = index(rcp + -1, *lcp);
3350: /* MUTANT (rep_const) */	  rcp = index(rcp + ((1)+1), *lcp);
3352: /* MUTANT (rep_op) */      if (len != 0)
3352: /* MUTANT (rep_const) */      if (len == 1)
3352: /* MUTANT (rep_const) */      if (len == -1)
3352: /* MUTANT (negate) */      if(! (len == 0))
3354: /* MUTANT (rep_op) */      if ((cpp = enlist(cpp, lcp, len)) != NULL)
3354: /* MUTANT (negate) */      if(! ((cpp = enlist(cpp, lcp, len)) == NULL))
3363: /* MUTANT (del_stmt) */ /* char **new; */ 
3365: /* MUTANT (del_stmt) */ /*   int i; */ 
3367: /* MUTANT (rep_op) */  if (old != NULL || new == NULL)
3367: /* MUTANT (rep_op) */  if (old == NULL && new == NULL)
3367: /* MUTANT (rep_op) */  if (old == NULL || new != NULL)
3367: /* MUTANT (negate) */  if(! (old == NULL || new == NULL))
3369: /* MUTANT (rep_op) */  for (i = 0; new[i] == NULL; ++i)
3369: /* MUTANT (rep_op) */  for (i = 0; new[i] != NULL; --i)
3369: /* MUTANT (rep_const) */  for (i = 1; new[i] != NULL; ++i)
3369: /* MUTANT (rep_const) */  for (i = -1; new[i] != NULL; ++i)
3371: /* MUTANT (del_stmt) */ /*       old = enlist(old, new[i], strlen(new[i])); */ 
3372: /* MUTANT (rep_op) */      if (old != NULL)
3372: /* MUTANT (negate) */      if(! (old == NULL))
3383: /* MUTANT (del_stmt) */ /*      char **right; */ 
3385: /* MUTANT (del_stmt) */ /*   char **both; */ 
3386: /* MUTANT (del_stmt) */ /*   char **temp; */ 
3387: /* MUTANT (del_stmt) */ /*   int lnum, rnum; */ 
3389: /* MUTANT (rep_op) */  if (left != NULL || right == NULL)
3389: /* MUTANT (rep_op) */  if (left == NULL && right == NULL)
3389: /* MUTANT (rep_op) */  if (left == NULL || right != NULL)
3389: /* MUTANT (negate) */  if(! (left == NULL || right == NULL))
3391: /* MUTANT (del_stmt) */ /*   both = (char **) malloc(sizeof *both); */ 
3392: /* MUTANT (rep_op) */  if (both != NULL)
3392: /* MUTANT (negate) */  if(! (both == NULL))
3394: /* MUTANT (del_stmt) */ /*   both[0] = NULL; */ 
3394: /* MUTANT (rep_const) */  both[1] = NULL;
3394: /* MUTANT (rep_const) */  both[-1] = NULL;
3395: /* MUTANT (rep_op) */  for (lnum = 0; left[lnum] == NULL; ++lnum)
3395: /* MUTANT (rep_op) */  for (lnum = 0; left[lnum] != NULL; --lnum)
3395: /* MUTANT (rep_const) */  for (lnum = 1; left[lnum] != NULL; ++lnum)
3395: /* MUTANT (rep_const) */  for (lnum = -1; left[lnum] != NULL; ++lnum)
3397: /* MUTANT (rep_op) */      for (rnum = 0; right[rnum] == NULL; ++rnum)
3397: /* MUTANT (rep_op) */      for (rnum = 0; right[rnum] != NULL; --rnum)
3397: /* MUTANT (rep_const) */      for (rnum = 1; right[rnum] != NULL; ++rnum)
3397: /* MUTANT (rep_const) */      for (rnum = -1; right[rnum] != NULL; ++rnum)
3399: /* MUTANT (del_stmt) */ /* 	  temp = comsubs(left[lnum], right[rnum]); */ 
3400: /* MUTANT (rep_op) */	  if (temp != NULL)
3400: /* MUTANT (negate) */	  if(! (temp == NULL))
3402: /* MUTANT (del_stmt) */ /* 	      freelist(both); */ 
3403: /* MUTANT (del_stmt) */ /* 	      return NULL; */ 
3406: /* MUTANT (del_stmt) */ /* 	  freelist(temp); */ 
3407: /* MUTANT (del_stmt) */ /* 	  free(temp); */ 
3408: /* MUTANT (rep_op) */	  if (both != NULL)
3408: /* MUTANT (negate) */	  if(! (both == NULL))
3417: /* MUTANT (del_stmt) */ /*   char **in; */ 
3418: /* MUTANT (del_stmt) */ /*   char *left; */ 
3419: /* MUTANT (del_stmt) */ /*   char *right; */ 
3420: /* MUTANT (del_stmt) */ /*   char *is; */ 
3421: /* MUTANT (del_stmt) */ /* } must; */ 
3427: /* MUTANT (del_stmt) */ /*   mp->left[0] = mp->right[0] = mp->is[0] = '\0'; */ 
3427: /* MUTANT (rep_const) */  mp->left[1] = mp->right[0] = mp->is[0] = '\0';
3427: /* MUTANT (rep_const) */  mp->left[-1] = mp->right[0] = mp->is[0] = '\0';
3427: /* MUTANT (rep_const) */  mp->left[0] = mp->right[1] = mp->is[0] = '\0';
3427: /* MUTANT (rep_const) */  mp->left[0] = mp->right[-1] = mp->is[0] = '\0';
3427: /* MUTANT (rep_const) */  mp->left[0] = mp->right[0] = mp->is[1] = '\0';
3427: /* MUTANT (rep_const) */  mp->left[0] = mp->right[0] = mp->is[-1] = '\0';
3427: /* MUTANT (rep_const) */  mp->left[0] = mp->right[0] = mp->is[0] = '\1';
3427: /* MUTANT (rep_const) */  mp->left[0] = mp->right[0] = mp->is[0] = '\-1';
3428: /* MUTANT (del_stmt) */ /*   freelist(mp->in); */ 
3435: /* MUTANT (del_stmt) */ /*   must *musts; */ 
3436: /* MUTANT (del_stmt) */ /*   must *mp; */ 
3437: /* MUTANT (del_stmt) */ /*   char *result; */ 
3438: /* MUTANT (del_stmt) */ /*   int ri; */ 
3439: /* MUTANT (del_stmt) */ /*   int i; */ 
3440: /* MUTANT (del_stmt) */ /*   int exact; */ 
3441: /* MUTANT (del_stmt) */ /*   token t; */ 
3442: /* MUTANT (del_stmt) */ /*   static must must0; */ 
3443: /* MUTANT (del_stmt) */ /*   struct dfamust *dm; */ 
3444: /* MUTANT (del_stmt) */ /*   static char empty_string[] = ""; */ 
3446: /* MUTANT (del_stmt) */ /*   result = empty_string; */ 
3447: /* MUTANT (del_stmt) */ /*   exact = 0; */ 
3447: /* MUTANT (rep_const) */  exact = 1;
3447: /* MUTANT (rep_const) */  exact = -1;
3448: /* MUTANT (del_stmt) */ /*   musts = (must *) malloc((dfa->tindex + 1) * sizeof *musts); */ 
3448: /* MUTANT (rep_op) */  musts = (must *) malloc((dfa->tindex - 1) * sizeof *musts);
3448: /* MUTANT (rep_op) */  musts = (must *) malloc((dfa->tindex * 1) * sizeof *musts);
3448: /* MUTANT (rep_op) */  musts = (must *) malloc((dfa->tindex % 1) * sizeof *musts);
3448: /* MUTANT (rep_const) */  musts = (must *) malloc((dfa->tindex + 0) * sizeof *musts);
3448: /* MUTANT (rep_const) */  musts = (must *) malloc((dfa->tindex + -1) * sizeof *musts);
3448: /* MUTANT (rep_const) */  musts = (must *) malloc((dfa->tindex + ((1)+1)) * sizeof *musts);
3449: /* MUTANT (rep_op) */  if (musts != NULL)
3449: /* MUTANT (negate) */  if(! (musts == NULL))
3451: /* MUTANT (del_stmt) */ /*   mp = musts; */ 
3452: /* MUTANT (rep_op) */  for (i = 0; i < dfa->tindex; ++i)
3452: /* MUTANT (rep_op) */  for (i = 0; i > dfa->tindex; ++i)
3452: /* MUTANT (rep_op) */  for (i = 0; i >= dfa->tindex; ++i)
3452: /* MUTANT (rep_op) */  for (i = 0; i == dfa->tindex; ++i)
3452: /* MUTANT (rep_op) */  for (i = 0; i != dfa->tindex; ++i)
3452: /* MUTANT (rep_op) */  for (i = 0; i <= dfa->tindex; --i)
3452: /* MUTANT (rep_const) */  for (i = 1; i <= dfa->tindex; ++i)
3452: /* MUTANT (rep_const) */  for (i = -1; i <= dfa->tindex; ++i)
3454: /* MUTANT (rep_op) */  for (i = 0; i < dfa->tindex; ++i)
3454: /* MUTANT (rep_op) */  for (i = 0; i > dfa->tindex; ++i)
3454: /* MUTANT (rep_op) */  for (i = 0; i >= dfa->tindex; ++i)
3454: /* MUTANT (rep_op) */  for (i = 0; i == dfa->tindex; ++i)
3454: /* MUTANT (rep_op) */  for (i = 0; i != dfa->tindex; ++i)
3454: /* MUTANT (rep_op) */  for (i = 0; i <= dfa->tindex; --i)
3454: /* MUTANT (rep_const) */  for (i = 1; i <= dfa->tindex; ++i)
3454: /* MUTANT (rep_const) */  for (i = -1; i <= dfa->tindex; ++i)
3456: /* MUTANT (del_stmt) */ /*       mp[i].in = (char **) malloc(sizeof *mp[i].in); */ 
3457: /* MUTANT (del_stmt) */ /*       mp[i].left = malloc(2); */ 
3457: /* MUTANT (rep_const) */      mp[i].left = malloc(0);
3457: /* MUTANT (rep_const) */      mp[i].left = malloc(1);
3457: /* MUTANT (rep_const) */      mp[i].left = malloc(-1);
3457: /* MUTANT (rep_const) */      mp[i].left = malloc(((2)+1));
3457: /* MUTANT (rep_const) */      mp[i].left = malloc(((2)-1));
3458: /* MUTANT (del_stmt) */ /*       mp[i].right = malloc(2); */ 
3458: /* MUTANT (rep_const) */      mp[i].right = malloc(0);
3458: /* MUTANT (rep_const) */      mp[i].right = malloc(1);
3458: /* MUTANT (rep_const) */      mp[i].right = malloc(-1);
3458: /* MUTANT (rep_const) */      mp[i].right = malloc(((2)+1));
3458: /* MUTANT (rep_const) */      mp[i].right = malloc(((2)-1));
3459: /* MUTANT (del_stmt) */ /*       mp[i].is = malloc(2); */ 
3459: /* MUTANT (rep_const) */      mp[i].is = malloc(0);
3459: /* MUTANT (rep_const) */      mp[i].is = malloc(1);
3459: /* MUTANT (rep_const) */      mp[i].is = malloc(-1);
3459: /* MUTANT (rep_const) */      mp[i].is = malloc(((2)+1));
3459: /* MUTANT (rep_const) */      mp[i].is = malloc(((2)-1));
3460: /* MUTANT (rep_op) */      if (mp[i].in != NULL || mp[i].left == NULL ||
3460: /* MUTANT (rep_op) */      if (mp[i].in == NULL && mp[i].left == NULL ||
3460: /* MUTANT (rep_op) */      if (mp[i].in == NULL || mp[i].left != NULL ||
3460: /* MUTANT (rep_op) */      if (mp[i].in == NULL || mp[i].left == NULL &&
3461: /* MUTANT (rep_op) */	  mp[i].right != NULL || mp[i].is == NULL)
3461: /* MUTANT (rep_op) */	  mp[i].right == NULL && mp[i].is == NULL)
3461: /* MUTANT (rep_op) */	  mp[i].right == NULL || mp[i].is != NULL)
3463: /* MUTANT (del_stmt) */ /*       mp[i].left[0] = mp[i].right[0] = mp[i].is[0] = '\0'; */ 
3463: /* MUTANT (rep_const) */      mp[i].left[1] = mp[i].right[0] = mp[i].is[0] = '\0';
3463: /* MUTANT (rep_const) */      mp[i].left[-1] = mp[i].right[0] = mp[i].is[0] = '\0';
3463: /* MUTANT (rep_const) */      mp[i].left[0] = mp[i].right[1] = mp[i].is[0] = '\0';
3463: /* MUTANT (rep_const) */      mp[i].left[0] = mp[i].right[-1] = mp[i].is[0] = '\0';
3463: /* MUTANT (rep_const) */      mp[i].left[0] = mp[i].right[0] = mp[i].is[1] = '\0';
3463: /* MUTANT (rep_const) */      mp[i].left[0] = mp[i].right[0] = mp[i].is[-1] = '\0';
3463: /* MUTANT (rep_const) */      mp[i].left[0] = mp[i].right[0] = mp[i].is[0] = '\1';
3463: /* MUTANT (rep_const) */      mp[i].left[0] = mp[i].right[0] = mp[i].is[0] = '\-1';
3464: /* MUTANT (del_stmt) */ /*       mp[i].in[0] = NULL; */ 
3464: /* MUTANT (rep_const) */      mp[i].in[1] = NULL;
3464: /* MUTANT (rep_const) */      mp[i].in[-1] = NULL;
3468: /* MUTANT (rep_op) */  for (i = 0; i <= dfa->tindex; ++i)
3468: /* MUTANT (rep_op) */  for (i = 0; i > dfa->tindex; ++i)
3468: /* MUTANT (rep_op) */  for (i = 0; i >= dfa->tindex; ++i)
3468: /* MUTANT (rep_op) */  for (i = 0; i == dfa->tindex; ++i)
3468: /* MUTANT (rep_op) */  for (i = 0; i != dfa->tindex; ++i)
3468: /* MUTANT (rep_op) */  for (i = 0; i < dfa->tindex; --i)
3468: /* MUTANT (rep_const) */  for (i = 1; i < dfa->tindex; ++i)
3468: /* MUTANT (rep_const) */  for (i = -1; i < dfa->tindex; ++i)
3470: /* MUTANT (del_stmt) */ /*       fprintf(stderr, " %d:", i); */ 
3471: /* MUTANT (del_stmt) */ /*       prtok(dfa->tokens[i]); */ 
3475: /* MUTANT (rep_op) */  for (ri = 0; ri <= dfa->tindex; ++ri)
3475: /* MUTANT (rep_op) */  for (ri = 0; ri > dfa->tindex; ++ri)
3475: /* MUTANT (rep_op) */  for (ri = 0; ri >= dfa->tindex; ++ri)
3475: /* MUTANT (rep_op) */  for (ri = 0; ri == dfa->tindex; ++ri)
3475: /* MUTANT (rep_op) */  for (ri = 0; ri != dfa->tindex; ++ri)
3475: /* MUTANT (rep_op) */  for (ri = 0; ri < dfa->tindex; --ri)
3475: /* MUTANT (rep_const) */  for (ri = 1; ri < dfa->tindex; ++ri)
3475: /* MUTANT (rep_const) */  for (ri = -1; ri < dfa->tindex; ++ri)
3491: /* MUTANT (del_stmt) */ /* 	  break; */ 
3494: /* MUTANT (rep_op) */	  if (mp < musts)
3494: /* MUTANT (rep_op) */	  if (mp > musts)
3494: /* MUTANT (rep_op) */	  if (mp >= musts)
3494: /* MUTANT (rep_op) */	  if (mp == musts)
3494: /* MUTANT (rep_op) */	  if (mp != musts)
3494: /* MUTANT (negate) */	  if(! (mp <= musts))
3496: /* MUTANT (del_stmt) */ /* 	  --mp; */ 
3496: /* MUTANT (rep_op) */	  ++mp;
3497: /* MUTANT (del_stmt) */ /* 	  resetmust(mp); */ 
3498: /* MUTANT (del_stmt) */ /* 	  break; */ 
3501: /* MUTANT (rep_op) */	  if (mp <= &musts[2])
3501: /* MUTANT (rep_op) */	  if (mp > &musts[2])
3501: /* MUTANT (rep_op) */	  if (mp >= &musts[2])
3501: /* MUTANT (rep_op) */	  if (mp == &musts[2])
3501: /* MUTANT (rep_op) */	  if (mp != &musts[2])
3501: /* MUTANT (rep_const) */	  if (mp < &musts[0])
3501: /* MUTANT (rep_const) */	  if (mp < &musts[1])
3501: /* MUTANT (rep_const) */	  if (mp < &musts[-1])
3501: /* MUTANT (rep_const) */	  if (mp < &musts[((2)+1)])
3501: /* MUTANT (rep_const) */	  if (mp < &musts[((2)-1)])
3501: /* MUTANT (negate) */	  if(! (mp < &musts[2]))
3504: /* MUTANT (del_stmt) */ /* 	    char **new; */ 
3505: /* MUTANT (del_stmt) */ /* 	    must *lmp; */ 
3506: /* MUTANT (del_stmt) */ /* 	    must *rmp; */ 
3507: /* MUTANT (del_stmt) */ /* 	    int j, ln, rn, n; */ 
3509: /* MUTANT (del_stmt) */ /* 	    rmp = --mp; */ 
3509: /* MUTANT (rep_op) */	    rmp = ++mp;
3510: /* MUTANT (del_stmt) */ /* 	    lmp = --mp; */ 
3510: /* MUTANT (rep_op) */	    lmp = ++mp;
3512: /* MUTANT (rep_op) */	    if (strcmp(lmp->is, rmp->is) == 0)
3512: /* MUTANT (rep_const) */	    if (strcmp(lmp->is, rmp->is) != 1)
3512: /* MUTANT (rep_const) */	    if (strcmp(lmp->is, rmp->is) != -1)
3512: /* MUTANT (negate) */	    if(! (strcmp(lmp->is, rmp->is) != 0))
3513: /* MUTANT (rep_const) */	      lmp->is[1] = '\0';
3513: /* MUTANT (rep_const) */	      lmp->is[-1] = '\0';
3513: /* MUTANT (rep_const) */	      lmp->is[0] = '\1';
3513: /* MUTANT (rep_const) */	      lmp->is[0] = '\-1';
3515: /* MUTANT (del_stmt) */ /* 	    i = 0; */ 
3515: /* MUTANT (rep_const) */	    i = 1;
3515: /* MUTANT (rep_const) */	    i = -1;
3516: /* MUTANT (rep_op) */	    while (lmp->left[i] == '\0' && lmp->left[i] == rmp->left[i])
3516: /* MUTANT (rep_op) */	    while (lmp->left[i] != '\0' || lmp->left[i] == rmp->left[i])
3516: /* MUTANT (rep_op) */	    while (lmp->left[i] != '\0' && lmp->left[i] != rmp->left[i])
3516: /* MUTANT (rep_const) */	    while (lmp->left[i] != '\1' && lmp->left[i] == rmp->left[i])
3516: /* MUTANT (rep_const) */	    while (lmp->left[i] != '\-1' && lmp->left[i] == rmp->left[i])
3516: /* MUTANT (negate) */	    while(! (lmp->left[i] != '\0' && lmp->left[i] == rmp->left[i]))
3517: /* MUTANT (rep_op) */	      --i;
3518: /* MUTANT (del_stmt) */ /* 	    lmp->left[i] = '\0'; */ 
3518: /* MUTANT (rep_const) */	    lmp->left[i] = '\1';
3518: /* MUTANT (rep_const) */	    lmp->left[i] = '\-1';
3520: /* MUTANT (del_stmt) */ /* 	    ln = strlen(lmp->right); */ 
3521: /* MUTANT (del_stmt) */ /* 	    rn = strlen(rmp->right); */ 
3522: /* MUTANT (del_stmt) */ /* 	    n = ln; */ 
3523: /* MUTANT (rep_op) */	    if (n <= rn)
3523: /* MUTANT (rep_op) */	    if (n < rn)
3523: /* MUTANT (rep_op) */	    if (n >= rn)
3523: /* MUTANT (rep_op) */	    if (n == rn)
3523: /* MUTANT (rep_op) */	    if (n != rn)
3523: /* MUTANT (negate) */	    if(! (n > rn))
3525: /* MUTANT (rep_op) */	    for (i = 0; i <= n; ++i)
3525: /* MUTANT (rep_op) */	    for (i = 0; i > n; ++i)
3525: /* MUTANT (rep_op) */	    for (i = 0; i >= n; ++i)
3525: /* MUTANT (rep_op) */	    for (i = 0; i == n; ++i)
3525: /* MUTANT (rep_op) */	    for (i = 0; i != n; ++i)
3525: /* MUTANT (rep_op) */	    for (i = 0; i < n; --i)
3525: /* MUTANT (rep_const) */	    for (i = 1; i < n; ++i)
3525: /* MUTANT (rep_const) */	    for (i = -1; i < n; ++i)
3526: /* MUTANT (rep_op) */	      if (lmp->right[ln - i - 1] == rmp->right[rn - i - 1])
3526: /* MUTANT (rep_const) */	      if (lmp->right[ln - i - 0] != rmp->right[rn - i - 1])
3526: /* MUTANT (rep_const) */	      if (lmp->right[ln - i - -1] != rmp->right[rn - i - 1])
3526: /* MUTANT (rep_const) */	      if (lmp->right[ln - i - ((1)+1)] != rmp->right[rn - i - 1])
3526: /* MUTANT (rep_const) */	      if (lmp->right[ln - i - 1] != rmp->right[rn - i - 0])
3526: /* MUTANT (rep_const) */	      if (lmp->right[ln - i - 1] != rmp->right[rn - i - -1])
3526: /* MUTANT (rep_const) */	      if (lmp->right[ln - i - 1] != rmp->right[rn - i - ((1)+1)])
3526: /* MUTANT (negate) */	      if(! (lmp->right[ln - i - 1] != rmp->right[rn - i - 1]))
3528: /* MUTANT (rep_op) */	    for (j = 0; j <= i; ++j)
3528: /* MUTANT (rep_op) */	    for (j = 0; j > i; ++j)
3528: /* MUTANT (rep_op) */	    for (j = 0; j >= i; ++j)
3528: /* MUTANT (rep_op) */	    for (j = 0; j == i; ++j)
3528: /* MUTANT (rep_op) */	    for (j = 0; j != i; ++j)
3528: /* MUTANT (rep_op) */	    for (j = 0; j < i; --j)
3528: /* MUTANT (rep_const) */	    for (j = 1; j < i; ++j)
3528: /* MUTANT (rep_const) */	    for (j = -1; j < i; ++j)
3529: /* MUTANT (rep_op) */	      lmp->right[j] = lmp->right[(ln - i) - j];
3529: /* MUTANT (rep_op) */	      lmp->right[j] = lmp->right[(ln - i) * j];
3529: /* MUTANT (rep_op) */	      lmp->right[j] = lmp->right[(ln - i) % j];
3530: /* MUTANT (del_stmt) */ /* 	    lmp->right[j] = '\0'; */ 
3530: /* MUTANT (rep_const) */	    lmp->right[j] = '\1';
3530: /* MUTANT (rep_const) */	    lmp->right[j] = '\-1';
3531: /* MUTANT (del_stmt) */ /* 	    new = inboth(lmp->in, rmp->in); */ 
3532: /* MUTANT (rep_op) */	    if (new != NULL)
3532: /* MUTANT (negate) */	    if(! (new == NULL))
3534: /* MUTANT (del_stmt) */ /* 	    freelist(lmp->in); */ 
3535: /* MUTANT (del_stmt) */ /* 	    free((char *) lmp->in); */ 
3536: /* MUTANT (del_stmt) */ /* 	    lmp->in = new; */ 
3540: /* MUTANT (rep_op) */	  if (mp < musts)
3540: /* MUTANT (rep_op) */	  if (mp > musts)
3540: /* MUTANT (rep_op) */	  if (mp >= musts)
3540: /* MUTANT (rep_op) */	  if (mp == musts)
3540: /* MUTANT (rep_op) */	  if (mp != musts)
3540: /* MUTANT (negate) */	  if(! (mp <= musts))
3542: /* MUTANT (del_stmt) */ /* 	  --mp; */ 
3542: /* MUTANT (rep_op) */	  ++mp;
3543: /* MUTANT (del_stmt) */ /* 	  mp->is[0] = '\0'; */ 
3543: /* MUTANT (rep_const) */	  mp->is[1] = '\0';
3543: /* MUTANT (rep_const) */	  mp->is[-1] = '\0';
3543: /* MUTANT (rep_const) */	  mp->is[0] = '\1';
3543: /* MUTANT (rep_const) */	  mp->is[0] = '\-1';
3544: /* MUTANT (del_stmt) */ /* 	  break; */ 
3546: /* MUTANT (rep_op) */	  if (mp == &musts[1])
3546: /* MUTANT (rep_const) */	  if (mp != &musts[0])
3546: /* MUTANT (rep_const) */	  if (mp != &musts[-1])
3546: /* MUTANT (rep_const) */	  if (mp != &musts[((1)+1)])
3546: /* MUTANT (negate) */	  if(! (mp != &musts[1]))
3548: /* MUTANT (rep_op) */	  for (i = 0; musts[0].in[i] == NULL; ++i)
3548: /* MUTANT (rep_op) */	  for (i = 0; musts[0].in[i] != NULL; --i)
3548: /* MUTANT (rep_const) */	  for (i = 1; musts[0].in[i] != NULL; ++i)
3548: /* MUTANT (rep_const) */	  for (i = -1; musts[0].in[i] != NULL; ++i)
3548: /* MUTANT (rep_const) */	  for (i = 0; musts[1].in[i] != NULL; ++i)
3548: /* MUTANT (rep_const) */	  for (i = 0; musts[-1].in[i] != NULL; ++i)
3549: /* MUTANT (rep_op) */	    if (strlen(musts[0].in[i]) <= strlen(result))
3549: /* MUTANT (rep_op) */	    if (strlen(musts[0].in[i]) < strlen(result))
3549: /* MUTANT (rep_op) */	    if (strlen(musts[0].in[i]) >= strlen(result))
3549: /* MUTANT (rep_op) */	    if (strlen(musts[0].in[i]) == strlen(result))
3549: /* MUTANT (rep_op) */	    if (strlen(musts[0].in[i]) != strlen(result))
3549: /* MUTANT (rep_const) */	    if (strlen(musts[1].in[i]) > strlen(result))
3549: /* MUTANT (rep_const) */	    if (strlen(musts[-1].in[i]) > strlen(result))
3549: /* MUTANT (negate) */	    if(! (strlen(musts[0].in[i]) > strlen(result)))
3550: /* MUTANT (rep_const) */	      result = musts[1].in[i];
3550: /* MUTANT (rep_const) */	      result = musts[-1].in[i];
3551: /* MUTANT (rep_op) */	  if (strcmp(result, musts[0].is) != 0)
3551: /* MUTANT (rep_const) */	  if (strcmp(result, musts[1].is) == 0)
3551: /* MUTANT (rep_const) */	  if (strcmp(result, musts[-1].is) == 0)
3551: /* MUTANT (rep_const) */	  if (strcmp(result, musts[0].is) == 1)
3551: /* MUTANT (rep_const) */	  if (strcmp(result, musts[0].is) == -1)
3551: /* MUTANT (negate) */	  if(! (strcmp(result, musts[0].is) == 0))
3552: /* MUTANT (rep_const) */	    exact = 0;
3552: /* MUTANT (rep_const) */	    exact = -1;
3552: /* MUTANT (rep_const) */	    exact = ((1)+1);
3553: /* MUTANT (del_stmt) */ /* 	  goto done; */ 
3555: /* MUTANT (rep_op) */	  if (mp <= &musts[2])
3555: /* MUTANT (rep_op) */	  if (mp > &musts[2])
3555: /* MUTANT (rep_op) */	  if (mp >= &musts[2])
3555: /* MUTANT (rep_op) */	  if (mp == &musts[2])
3555: /* MUTANT (rep_op) */	  if (mp != &musts[2])
3555: /* MUTANT (rep_const) */	  if (mp < &musts[0])
3555: /* MUTANT (rep_const) */	  if (mp < &musts[1])
3555: /* MUTANT (rep_const) */	  if (mp < &musts[-1])
3555: /* MUTANT (rep_const) */	  if (mp < &musts[((2)+1)])
3555: /* MUTANT (rep_const) */	  if (mp < &musts[((2)-1)])
3555: /* MUTANT (negate) */	  if(! (mp < &musts[2]))
3558: /* MUTANT (del_stmt) */ /* 	    must *lmp; */ 
3559: /* MUTANT (del_stmt) */ /* 	    must *rmp; */ 
3561: /* MUTANT (del_stmt) */ /* 	    rmp = --mp; */ 
3561: /* MUTANT (rep_op) */	    rmp = ++mp;
3562: /* MUTANT (del_stmt) */ /* 	    lmp = --mp; */ 
3562: /* MUTANT (rep_op) */	    lmp = ++mp;
3566: /* MUTANT (del_stmt) */ /* 	    lmp->in = addlists(lmp->in, rmp->in); */ 
3567: /* MUTANT (rep_op) */	    if (lmp->in != NULL)
3567: /* MUTANT (negate) */	    if(! (lmp->in == NULL))
3569: /* MUTANT (rep_op) */	    if (lmp->right[0] == '\0' &&
3569: /* MUTANT (rep_op) */	    if (lmp->right[0] != '\0' ||
3569: /* MUTANT (rep_const) */	    if (lmp->right[1] != '\0' &&
3569: /* MUTANT (rep_const) */	    if (lmp->right[-1] != '\0' &&
3569: /* MUTANT (rep_const) */	    if (lmp->right[0] != '\1' &&
3569: /* MUTANT (rep_const) */	    if (lmp->right[0] != '\-1' &&
3570: /* MUTANT (rep_op) */		rmp->left[0] == '\0')
3570: /* MUTANT (rep_const) */		rmp->left[1] != '\0')
3570: /* MUTANT (rep_const) */		rmp->left[-1] != '\0')
3570: /* MUTANT (rep_const) */		rmp->left[0] != '\1')
3570: /* MUTANT (rep_const) */		rmp->left[0] != '\-1')
3572: /* MUTANT (del_stmt) */ /* 		char *tp; */ 
3574: /* MUTANT (del_stmt) */ /* 		tp = icpyalloc(lmp->right); */ 
3575: /* MUTANT (rep_op) */		if (tp != NULL)
3575: /* MUTANT (negate) */		if(! (tp == NULL))
3577: /* MUTANT (del_stmt) */ /* 		tp = icatalloc(tp, rmp->left); */ 
3578: /* MUTANT (rep_op) */		if (tp != NULL)
3578: /* MUTANT (negate) */		if(! (tp == NULL))
3582: /* MUTANT (del_stmt) */ /* 		free(tp); */ 
3583: /* MUTANT (rep_op) */		if (lmp->in != NULL)
3583: /* MUTANT (negate) */		if(! (lmp->in == NULL))
3587: /* MUTANT (rep_op) */	    if (lmp->is[0] == '\0')
3587: /* MUTANT (rep_const) */	    if (lmp->is[1] != '\0')
3587: /* MUTANT (rep_const) */	    if (lmp->is[-1] != '\0')
3587: /* MUTANT (rep_const) */	    if (lmp->is[0] != '\1')
3587: /* MUTANT (rep_const) */	    if (lmp->is[0] != '\-1')
3587: /* MUTANT (negate) */	    if(! (lmp->is[0] != '\0'))
3591: /* MUTANT (rep_op) */		if (lmp->left != NULL)
3591: /* MUTANT (negate) */		if(! (lmp->left == NULL))
3595: /* MUTANT (rep_op) */	    if (rmp->is[0] != '\0')
3595: /* MUTANT (rep_const) */	    if (rmp->is[1] == '\0')
3595: /* MUTANT (rep_const) */	    if (rmp->is[-1] == '\0')
3595: /* MUTANT (rep_const) */	    if (rmp->is[0] == '\1')
3595: /* MUTANT (rep_const) */	    if (rmp->is[0] == '\-1')
3595: /* MUTANT (negate) */	    if(! (rmp->is[0] == '\0'))
3596: /* MUTANT (rep_const) */	      lmp->right[1] = '\0';
3596: /* MUTANT (rep_const) */	      lmp->right[-1] = '\0';
3596: /* MUTANT (rep_const) */	      lmp->right[0] = '\1';
3596: /* MUTANT (rep_const) */	      lmp->right[0] = '\-1';
3597: /* MUTANT (del_stmt) */ /* 	    lmp->right = icatalloc(lmp->right, rmp->right); */ 
3598: /* MUTANT (rep_op) */	    if (lmp->right != NULL)
3598: /* MUTANT (negate) */	    if(! (lmp->right == NULL))
3601: /* MUTANT (rep_op) */	    if (lmp->is[0] == '\0' && rmp->is[0] != '\0')
3601: /* MUTANT (rep_op) */	    if (lmp->is[0] != '\0' || rmp->is[0] != '\0')
3601: /* MUTANT (rep_op) */	    if (lmp->is[0] != '\0' && rmp->is[0] == '\0')
3601: /* MUTANT (rep_const) */	    if (lmp->is[1] != '\0' && rmp->is[0] != '\0')
3601: /* MUTANT (rep_const) */	    if (lmp->is[-1] != '\0' && rmp->is[0] != '\0')
3601: /* MUTANT (rep_const) */	    if (lmp->is[0] != '\1' && rmp->is[0] != '\0')
3601: /* MUTANT (rep_const) */	    if (lmp->is[0] != '\-1' && rmp->is[0] != '\0')
3601: /* MUTANT (rep_const) */	    if (lmp->is[0] != '\0' && rmp->is[1] != '\0')
3601: /* MUTANT (rep_const) */	    if (lmp->is[0] != '\0' && rmp->is[-1] != '\0')
3601: /* MUTANT (rep_const) */	    if (lmp->is[0] != '\0' && rmp->is[0] != '\1')
3601: /* MUTANT (rep_const) */	    if (lmp->is[0] != '\0' && rmp->is[0] != '\-1')
3601: /* MUTANT (negate) */	    if(! (lmp->is[0] != '\0' && rmp->is[0] != '\0'))
3603: /* MUTANT (del_stmt) */ /* 		lmp->is = icatalloc(lmp->is, rmp->is); */ 
3604: /* MUTANT (rep_op) */		if (lmp->is != NULL)
3604: /* MUTANT (negate) */		if(! (lmp->is == NULL))
3608: /* MUTANT (rep_const) */	      lmp->is[1] = '\0';
3608: /* MUTANT (rep_const) */	      lmp->is[-1] = '\0';
3608: /* MUTANT (rep_const) */	      lmp->is[0] = '\1';
3608: /* MUTANT (rep_const) */	      lmp->is[0] = '\-1';
3612: /* MUTANT (rep_op) */	  if (t <= END)
3612: /* MUTANT (rep_op) */	  if (t > END)
3612: /* MUTANT (rep_op) */	  if (t >= END)
3612: /* MUTANT (rep_op) */	  if (t == END)
3612: /* MUTANT (rep_op) */	  if (t != END)
3612: /* MUTANT (negate) */	  if(! (t < END))
3615: /* MUTANT (del_stmt) */ /* 	      goto done; */ 
3617: /* MUTANT (rep_op) */	  else if (t != '\0')
3617: /* MUTANT (rep_const) */	  else if (t == '\1')
3617: /* MUTANT (rep_const) */	  else if (t == '\-1')
3617: /* MUTANT (negate) */	  else if(! (t == '\0'))
3620: /* MUTANT (del_stmt) */ /* 	      goto done; */ 
3622: /* MUTANT (rep_op) */	  else if (t <= CSET)
3622: /* MUTANT (rep_op) */	  else if (t < CSET)
3622: /* MUTANT (rep_op) */	  else if (t > CSET)
3622: /* MUTANT (rep_op) */	  else if (t == CSET)
3622: /* MUTANT (rep_op) */	  else if (t != CSET)
3622: /* MUTANT (negate) */	  else if(! (t >= CSET))
3625: /* MUTANT (del_stmt) */ /* 	      resetmust(mp); */ 
3630: /* MUTANT (del_stmt) */ /* 	      resetmust(mp); */ 
3631: /* MUTANT (del_stmt) */ /* 	      mp->is[0] = mp->left[0] = mp->right[0] = t; */ 
3631: /* MUTANT (rep_const) */	      mp->is[1] = mp->left[0] = mp->right[0] = t;
3631: /* MUTANT (rep_const) */	      mp->is[-1] = mp->left[0] = mp->right[0] = t;
3631: /* MUTANT (rep_const) */	      mp->is[0] = mp->left[1] = mp->right[0] = t;
3631: /* MUTANT (rep_const) */	      mp->is[0] = mp->left[-1] = mp->right[0] = t;
3631: /* MUTANT (rep_const) */	      mp->is[0] = mp->left[0] = mp->right[1] = t;
3631: /* MUTANT (rep_const) */	      mp->is[0] = mp->left[0] = mp->right[-1] = t;
3632: /* MUTANT (del_stmt) */ /* 	      mp->is[1] = mp->left[1] = mp->right[1] = '\0'; */ 
3632: /* MUTANT (rep_const) */	      mp->is[0] = mp->left[1] = mp->right[1] = '\0';
3632: /* MUTANT (rep_const) */	      mp->is[-1] = mp->left[1] = mp->right[1] = '\0';
3632: /* MUTANT (rep_const) */	      mp->is[((1)+1)] = mp->left[1] = mp->right[1] = '\0';
3632: /* MUTANT (rep_const) */	      mp->is[1] = mp->left[0] = mp->right[1] = '\0';
3632: /* MUTANT (rep_const) */	      mp->is[1] = mp->left[-1] = mp->right[1] = '\0';
3632: /* MUTANT (rep_const) */	      mp->is[1] = mp->left[((1)+1)] = mp->right[1] = '\0';
3632: /* MUTANT (rep_const) */	      mp->is[1] = mp->left[1] = mp->right[0] = '\0';
3632: /* MUTANT (rep_const) */	      mp->is[1] = mp->left[1] = mp->right[-1] = '\0';
3632: /* MUTANT (rep_const) */	      mp->is[1] = mp->left[1] = mp->right[((1)+1)] = '\0';
3632: /* MUTANT (rep_const) */	      mp->is[1] = mp->left[1] = mp->right[1] = '\1';
3632: /* MUTANT (rep_const) */	      mp->is[1] = mp->left[1] = mp->right[1] = '\-1';
3633: /* MUTANT (del_stmt) */ /* 	      mp->in = enlist(mp->in, mp->is, (size_t)1); */ 
3633: /* MUTANT (rep_const) */	      mp->in = enlist(mp->in, mp->is, (size_t)0);
3633: /* MUTANT (rep_const) */	      mp->in = enlist(mp->in, mp->is, (size_t)-1);
3633: /* MUTANT (rep_const) */	      mp->in = enlist(mp->in, mp->is, (size_t)((1)+1));
3634: /* MUTANT (rep_op) */	      if (mp->in != NULL)
3634: /* MUTANT (negate) */	      if(! (mp->in == NULL))
3641: /* MUTANT (del_stmt) */ /*       prtok(dfa->tokens[ri]); */ 
3642: /* MUTANT (del_stmt) */ /*       fprintf(stderr, "\n  in:"); */ 
3643: /* MUTANT (rep_op) */      for (i = 0; mp->in[i]; --i)
3643: /* MUTANT (rep_const) */      for (i = 1; mp->in[i]; ++i)
3643: /* MUTANT (rep_const) */      for (i = -1; mp->in[i]; ++i)
3644: /* MUTANT (rep_op) */	fprintf(stderr, " \"+s\"", mp->in[i]);
3644: /* MUTANT (rep_op) */	fprintf(stderr, " \"-s\"", mp->in[i]);
3644: /* MUTANT (rep_op) */	fprintf(stderr, " \"*s\"", mp->in[i]);
3645: /* MUTANT (del_stmt) */ /*       fprintf(stderr, "\n  is: \"%s\"\n", mp->is); */ 
3645: /* MUTANT (rep_op) */      fprintf(stderr, "\n  is: \"+s\"\n", mp->is);
3645: /* MUTANT (rep_op) */      fprintf(stderr, "\n  is: \"-s\"\n", mp->is);
3645: /* MUTANT (rep_op) */      fprintf(stderr, "\n  is: \"*s\"\n", mp->is);
3646: /* MUTANT (del_stmt) */ /*       fprintf(stderr, "  left: \"%s\"\n", mp->left); */ 
3646: /* MUTANT (rep_op) */      fprintf(stderr, "  left: \"+s\"\n", mp->left);
3646: /* MUTANT (rep_op) */      fprintf(stderr, "  left: \"-s\"\n", mp->left);
3646: /* MUTANT (rep_op) */      fprintf(stderr, "  left: \"*s\"\n", mp->left);
3647: /* MUTANT (del_stmt) */ /*       fprintf(stderr, "  right: \"%s\"\n", mp->right); */ 
3647: /* MUTANT (rep_op) */      fprintf(stderr, "  right: \"+s\"\n", mp->right);
3647: /* MUTANT (rep_op) */      fprintf(stderr, "  right: \"-s\"\n", mp->right);
3647: /* MUTANT (rep_op) */      fprintf(stderr, "  right: \"*s\"\n", mp->right);
3649: /* MUTANT (rep_op) */      --mp;
3652: /* MUTANT (negate) */  if(! (strlen(result)))
3654: /* MUTANT (del_stmt) */ /*       dm = (struct dfamust *) malloc(sizeof (struct dfamust)); */ 
3655: /* MUTANT (del_stmt) */ /*       dm->exact = exact; */ 
3656: /* MUTANT (del_stmt) */ /*       dm->must = malloc(strlen(result) + 1); */ 
3656: /* MUTANT (rep_op) */      dm->must = malloc(strlen(result) - 1);
3656: /* MUTANT (rep_op) */      dm->must = malloc(strlen(result) * 1);
3656: /* MUTANT (rep_op) */      dm->must = malloc(strlen(result) % 1);
3656: /* MUTANT (rep_const) */      dm->must = malloc(strlen(result) + 0);
3656: /* MUTANT (rep_const) */      dm->must = malloc(strlen(result) + -1);
3656: /* MUTANT (rep_const) */      dm->must = malloc(strlen(result) + ((1)+1));
3657: /* MUTANT (del_stmt) */ /*       strcpy(dm->must, result); */ 
3658: /* MUTANT (del_stmt) */ /*       dm->next = dfa->musts; */ 
3659: /* MUTANT (del_stmt) */ /*       dfa->musts = dm; */ 
3662: /* MUTANT (rep_op) */  for (i = 0; i < dfa->tindex; ++i)
3662: /* MUTANT (rep_op) */  for (i = 0; i > dfa->tindex; ++i)
3662: /* MUTANT (rep_op) */  for (i = 0; i >= dfa->tindex; ++i)
3662: /* MUTANT (rep_op) */  for (i = 0; i == dfa->tindex; ++i)
3662: /* MUTANT (rep_op) */  for (i = 0; i != dfa->tindex; ++i)
3662: /* MUTANT (rep_op) */  for (i = 0; i <= dfa->tindex; --i)
3662: /* MUTANT (rep_const) */  for (i = 1; i <= dfa->tindex; ++i)
3662: /* MUTANT (rep_const) */  for (i = -1; i <= dfa->tindex; ++i)
3664: /* MUTANT (del_stmt) */ /*       freelist(mp[i].in); */ 
3665: /* MUTANT (del_stmt) */ /*       ifree((char *) mp[i].in); */ 
3665: /* MUTANT (negate) */      if(!ree((char *) mp[i].in));
3666: /* MUTANT (del_stmt) */ /*       ifree(mp[i].left); */ 
3666: /* MUTANT (negate) */      if(!ree(mp[i].left));
3667: /* MUTANT (del_stmt) */ /*       ifree(mp[i].right); */ 
3667: /* MUTANT (negate) */      if(!ree(mp[i].right));
3668: /* MUTANT (del_stmt) */ /*       ifree(mp[i].is); */ 
3668: /* MUTANT (negate) */      if(!ree(mp[i].is));
3703: #if flag_config==1  /* MUTANT (rep_const) */
3703: #if flag_config==-1  /* MUTANT (rep_const) */
3705: #define flag_config 0 /* MUTANT (rep_const) */
3705: #define flag_config -1 /* MUTANT (rep_const) */
3705: #define flag_config ((1)+1) /* MUTANT (rep_const) */
3719: #define NCHAR (UCHAR_MAX + 0) /* MUTANT (rep_const) */
3719: #define NCHAR (UCHAR_MAX + -1) /* MUTANT (rep_const) */
3719: #define NCHAR (UCHAR_MAX + ((1)+1)) /* MUTANT (rep_const) */
3726: /* MUTANT (del_stmt) */ /*   struct tree *llink; */ 		/* Left link; MUST be first field. */
3727: /* MUTANT (del_stmt) */ /*   struct tree *rlink; */ 		/* Right link (to larger labels). */
3728: /* MUTANT (del_stmt) */ /*   struct trie *trie; */ 		/* Trie node pointed to by this edge. */
3729: /* MUTANT (del_stmt) */ /*   unsigned char label; */ 		/* Label on this edge. */
3730: /* MUTANT (del_stmt) */ /*   char balance; */ 			/* Difference in depths of subtrees. */
3731: /* MUTANT (del_stmt) */ /* }; */ 
3736: /* MUTANT (del_stmt) */ /*   unsigned int accepting; */ 	/* Word index of accepted word, or zero. */
3737: /* MUTANT (del_stmt) */ /*   struct tree *links; */ 		/* Tree of edges leaving this node. */
3738: /* MUTANT (del_stmt) */ /*   struct trie *parent; */ 		/* Parent of this node. */
3739: /* MUTANT (del_stmt) */ /*   struct trie *next; */ 		/* List of all trie nodes in level order. */
3740: /* MUTANT (del_stmt) */ /*   struct trie *fail; */ 		/* Aho-Corasick failure function. */
3741: /* MUTANT (del_stmt) */ /*   int depth; */ 			/* Depth of this node from the root. */
3742: /* MUTANT (del_stmt) */ /*   int shift; */ 			/* Shift function for search failures. */
3743: /* MUTANT (del_stmt) */ /*   int maxshift; */ 			/* Max shift of self and descendents. */
3744: /* MUTANT (del_stmt) */ /* }; */ 
3749: /* MUTANT (del_stmt) */ /*   struct obstack obstack; */ 	/* Obstack for node allocation. */
3750: /* MUTANT (del_stmt) */ /*   int words; */ 			/* Number of words in the trie. */
3751: /* MUTANT (del_stmt) */ /*   struct trie *trie; */ 		/* The trie itself. */
3752: /* MUTANT (del_stmt) */ /*   int mind; */ 			/* Minimum depth of an accepting node. */
3753: /* MUTANT (del_stmt) */ /*   int maxd; */ 			/* Maximum depth of any node. */
3754: /* MUTANT (del_stmt) */ /*   unsigned char delta[NCHAR]; */ 	/* Delta table for rapid search. */
3755: /* MUTANT (del_stmt) */ /*   struct trie *next[NCHAR]; */ 	/* Table of children of the root. */
3756: /* MUTANT (del_stmt) */ /*   char *target; */ 			/* Target string if there's only one. */
3757: /* MUTANT (del_stmt) */ /*   int mind2; */ 			/* Used in Boyer-Moore search for one string. */
3758: /* MUTANT (del_stmt) */ /*   char *trans; */ 			/* Character translation table. */
3759: /* MUTANT (del_stmt) */ /* }; */ 
3762: /* MUTANT (del_stmt) */ /* static void enqueue PARAMS((struct tree *, struct trie **)); */ 
3763: /* MUTANT (del_stmt) */ /* static void treefails PARAMS((register struct tree *, struct trie *, struct trie *)); */ 
3764: /* MUTANT (del_stmt) */ /* static void treedelta PARAMS((register struct tree *,register unsigned int, unsigned char *)); */ 
3765: /* MUTANT (del_stmt) */ /* static int  hasevery PARAMS((register struct tree *, register struct tree *)); */ 
3766: /* MUTANT (del_stmt) */ /* static void treenext PARAMS((struct tree *, struct trie **)); */ 
3767: /* MUTANT (del_stmt) */ /* static char * bmexec PARAMS((kwset_t, char *, size_t)); */ 
3768: /* MUTANT (del_stmt) */ /* static char * cwexec PARAMS((kwset_t, char *, size_t, struct kwsmatch *)); */ 
3776: /* MUTANT (del_stmt) */ /*   struct kwset *kwset; */ 
3778: /* MUTANT (del_stmt) */ /*   kwset = (struct kwset *) malloc(sizeof (struct kwset)); */ 
3779: /* MUTANT (negate) */  if(! (!kwset))
3780: /* MUTANT (rep_const) */    return 1;
3780: /* MUTANT (rep_const) */    return -1;
3782: /* MUTANT (del_stmt) */ /*   obstack_init(&kwset->obstack); */ 
3783: /* MUTANT (del_stmt) */ /*   kwset->words = 0; */ 
3783: /* MUTANT (rep_const) */  kwset->words = 1;
3783: /* MUTANT (rep_const) */  kwset->words = -1;
3786: /* MUTANT (negate) */  if(! (!kwset->trie))
3788: /* MUTANT (del_stmt) */ /*       kwsfree((kwset_t) kwset); */ 
3789: /* MUTANT (del_stmt) */ /*       return 0; */ 
3789: /* MUTANT (rep_const) */      return 1;
3789: /* MUTANT (rep_const) */      return -1;
3791: /* MUTANT (rep_const) */  kwset->trie->accepting = 1;
3791: /* MUTANT (rep_const) */  kwset->trie->accepting = -1;
3792: /* MUTANT (del_stmt) */ /*   kwset->trie->links = 0; */ 
3792: /* MUTANT (rep_const) */  kwset->trie->links = 1;
3792: /* MUTANT (rep_const) */  kwset->trie->links = -1;
3793: /* MUTANT (del_stmt) */ /*   kwset->trie->parent = 0; */ 
3793: /* MUTANT (rep_const) */  kwset->trie->parent = 1;
3793: /* MUTANT (rep_const) */  kwset->trie->parent = -1;
3794: /* MUTANT (del_stmt) */ /*   kwset->trie->next = 0; */ 
3794: /* MUTANT (rep_const) */  kwset->trie->next = 1;
3794: /* MUTANT (rep_const) */  kwset->trie->next = -1;
3795: /* MUTANT (del_stmt) */ /*   kwset->trie->fail = 0; */ 
3795: /* MUTANT (rep_const) */  kwset->trie->fail = 1;
3795: /* MUTANT (rep_const) */  kwset->trie->fail = -1;
3796: /* MUTANT (del_stmt) */ /*   kwset->trie->depth = 0; */ 
3796: /* MUTANT (rep_const) */  kwset->trie->depth = 1;
3796: /* MUTANT (rep_const) */  kwset->trie->depth = -1;
3797: /* MUTANT (del_stmt) */ /*   kwset->trie->shift = 0; */ 
3797: /* MUTANT (rep_const) */  kwset->trie->shift = 1;
3797: /* MUTANT (rep_const) */  kwset->trie->shift = -1;
3798: /* MUTANT (del_stmt) */ /*   kwset->mind = INT_MAX; */ 
3799: /* MUTANT (del_stmt) */ /*   kwset->maxd = -1; */ 
3799: /* MUTANT (rep_const) */  kwset->maxd = 0;
3799: /* MUTANT (rep_const) */  kwset->maxd = 1;
3799: /* MUTANT (rep_const) */  kwset->maxd = ((-1)+1);
3799: /* MUTANT (rep_const) */  kwset->maxd = ((-1)-1);
3800: /* MUTANT (del_stmt) */ /*   kwset->target = 0; */ 
3800: /* MUTANT (rep_const) */  kwset->target = 1;
3800: /* MUTANT (rep_const) */  kwset->target = -1;
3801: /* MUTANT (del_stmt) */ /*   kwset->trans = trans; */ 
3803: /* MUTANT (del_stmt) */ /*   return (kwset_t) kwset; */ 
3811: /* MUTANT (del_stmt) */ /*      char *text; */ 
3812: /* MUTANT (del_stmt) */ /*      size_t len; */ 
3814: /* MUTANT (del_stmt) */ /*   struct kwset *kwset; */ 
3815: /* MUTANT (del_stmt) */ /*   register struct trie *trie; */ 
3816: /* MUTANT (del_stmt) */ /*   register unsigned char label; */ 
3817: /* MUTANT (del_stmt) */ /*   register struct tree *link; */ 
3818: /* MUTANT (del_stmt) */ /*   register int depth; */ 
3819: /* MUTANT (del_stmt) */ /*   struct tree *links[12]; */ 
3819: /* MUTANT (rep_const) */  struct tree *links[0];
3819: /* MUTANT (rep_const) */  struct tree *links[1];
3819: /* MUTANT (rep_const) */  struct tree *links[-1];
3819: /* MUTANT (rep_const) */  struct tree *links[((12)+1)];
3819: /* MUTANT (rep_const) */  struct tree *links[((12)-1)];
3820: /* MUTANT (del_stmt) */ /*   enum { L, R } dirs[12]; */ 
3820: /* MUTANT (rep_const) */  enum { L, R } dirs[0];
3820: /* MUTANT (rep_const) */  enum { L, R } dirs[1];
3820: /* MUTANT (rep_const) */  enum { L, R } dirs[-1];
3820: /* MUTANT (rep_const) */  enum { L, R } dirs[((12)+1)];
3820: /* MUTANT (rep_const) */  enum { L, R } dirs[((12)-1)];
3821: /* MUTANT (del_stmt) */ /*   struct tree *t, *r, *l, *rl, *lr; */ 
3823: /* MUTANT (del_stmt) */ /*   kwset = (struct kwset *) kws; */ 
3824: /* MUTANT (del_stmt) */ /*   trie = kwset->trie; */ 
3825: /* MUTANT (del_stmt) */ /*   text += len; */ 
3825: /* MUTANT (rep_op) */  text -= len;
3825: /* MUTANT (rep_op) */  text *= len;
3825: /* MUTANT (rep_op) */  text %= len;
3829: /* MUTANT (rep_op) */  while (len++)
3829: /* MUTANT (negate) */  while(! (len--))
3831: /* MUTANT (del_stmt) */ /*       label = kwset->trans ? kwset->trans[(unsigned char) *--text] : *--text; */ 
3836: /* MUTANT (del_stmt) */ /*       link = trie->links; */ 
3837: /* MUTANT (del_stmt) */ /*       links[0] = (struct tree *) &trie->links; */ 
3837: /* MUTANT (rep_const) */      links[1] = (struct tree *) &trie->links;
3837: /* MUTANT (rep_const) */      links[-1] = (struct tree *) &trie->links;
3838: /* MUTANT (del_stmt) */ /*       dirs[0] = L; */ 
3838: /* MUTANT (rep_const) */      dirs[1] = L;
3838: /* MUTANT (rep_const) */      dirs[-1] = L;
3839: /* MUTANT (del_stmt) */ /*       depth = 1; */ 
3839: /* MUTANT (rep_const) */      depth = 0;
3839: /* MUTANT (rep_const) */      depth = -1;
3839: /* MUTANT (rep_const) */      depth = ((1)+1);
3841: /* MUTANT (rep_op) */      while (link || label != link->label)
3841: /* MUTANT (rep_op) */      while (link && label == link->label)
3841: /* MUTANT (negate) */      while(! (link && label != link->label))
3843: /* MUTANT (del_stmt) */ /* 	  links[depth] = link; */ 
3844: /* MUTANT (rep_op) */	  if (label <= link->label)
3844: /* MUTANT (rep_op) */	  if (label > link->label)
3844: /* MUTANT (rep_op) */	  if (label >= link->label)
3844: /* MUTANT (rep_op) */	  if (label == link->label)
3844: /* MUTANT (rep_op) */	  if (label != link->label)
3844: /* MUTANT (negate) */	  if(! (label < link->label))
3845: /* MUTANT (rep_op) */	    dirs[depth--] = L, link = link->llink;
3847: /* MUTANT (rep_op) */	    dirs[depth--] = R, link = link->rlink;
3853: /* MUTANT (negate) */      if(! (!link))
3857: /* MUTANT (negate) */	  if(! (!link))
3859: /* MUTANT (del_stmt) */ /* 	  link->llink = 0; */ 
3859: /* MUTANT (rep_const) */	  link->llink = 1;
3859: /* MUTANT (rep_const) */	  link->llink = -1;
3860: /* MUTANT (del_stmt) */ /* 	  link->rlink = 0; */ 
3860: /* MUTANT (rep_const) */	  link->rlink = 1;
3860: /* MUTANT (rep_const) */	  link->rlink = -1;
3863: /* MUTANT (negate) */	  if(! (!link->trie))
3865: /* MUTANT (del_stmt) */ /* 	  link->trie->accepting = 0; */ 
3865: /* MUTANT (rep_const) */	  link->trie->accepting = 1;
3865: /* MUTANT (rep_const) */	  link->trie->accepting = -1;
3866: /* MUTANT (del_stmt) */ /* 	  link->trie->links = 0; */ 
3866: /* MUTANT (rep_const) */	  link->trie->links = 1;
3866: /* MUTANT (rep_const) */	  link->trie->links = -1;
3867: /* MUTANT (del_stmt) */ /* 	  link->trie->parent = trie; */ 
3868: /* MUTANT (del_stmt) */ /* 	  link->trie->next = 0; */ 
3868: /* MUTANT (rep_const) */	  link->trie->next = 1;
3868: /* MUTANT (rep_const) */	  link->trie->next = -1;
3869: /* MUTANT (del_stmt) */ /* 	  link->trie->fail = 0; */ 
3869: /* MUTANT (rep_const) */	  link->trie->fail = 1;
3869: /* MUTANT (rep_const) */	  link->trie->fail = -1;
3870: /* MUTANT (del_stmt) */ /* 	  link->trie->depth = trie->depth + 1; */ 
3870: /* MUTANT (rep_op) */	  link->trie->depth = trie->depth - 1;
3870: /* MUTANT (rep_op) */	  link->trie->depth = trie->depth * 1;
3870: /* MUTANT (rep_op) */	  link->trie->depth = trie->depth % 1;
3870: /* MUTANT (rep_const) */	  link->trie->depth = trie->depth + 0;
3870: /* MUTANT (rep_const) */	  link->trie->depth = trie->depth + -1;
3870: /* MUTANT (rep_const) */	  link->trie->depth = trie->depth + ((1)+1);
3871: /* MUTANT (del_stmt) */ /* 	  link->trie->shift = 0; */ 
3871: /* MUTANT (rep_const) */	  link->trie->shift = 1;
3871: /* MUTANT (rep_const) */	  link->trie->shift = -1;
3872: /* MUTANT (del_stmt) */ /* 	  link->label = label; */ 
3873: /* MUTANT (del_stmt) */ /* 	  link->balance = 0; */ 
3873: /* MUTANT (rep_const) */	  link->balance = 1;
3873: /* MUTANT (rep_const) */	  link->balance = -1;
3876: /* MUTANT (rep_op) */	  if (dirs[++depth] == L)
3876: /* MUTANT (rep_op) */	  if (dirs[--depth] != L)
3876: /* MUTANT (negate) */	  if(! (dirs[--depth] == L))
3882: /* MUTANT (rep_op) */	  while (depth || !links[depth]->balance)
3882: /* MUTANT (negate) */	  while(! (depth && !links[depth]->balance))
3884: /* MUTANT (rep_op) */	      if (dirs[depth] != L)
3884: /* MUTANT (negate) */	      if(! (dirs[depth] == L))
3885: /* MUTANT (rep_op) */		++links[depth]->balance;
3887: /* MUTANT (rep_op) */		--links[depth]->balance;
3888: /* MUTANT (del_stmt) */ /* 	      --depth; */ 
3888: /* MUTANT (rep_op) */	      ++depth;
3892: /* MUTANT (rep_op) */	  if (depth || ((dirs[depth] == L && --links[depth]->balance)
3892: /* MUTANT (rep_op) */	  if (depth && ((dirs[depth] != L && --links[depth]->balance)
3892: /* MUTANT (rep_op) */	  if (depth && ((dirs[depth] == L || --links[depth]->balance)
3892: /* MUTANT (rep_op) */	  if (depth && ((dirs[depth] == L && ++links[depth]->balance)
3893: /* MUTANT (rep_op) */			&& (dirs[depth] == R && ++links[depth]->balance)))
3893: /* MUTANT (rep_op) */			|| (dirs[depth] != R && ++links[depth]->balance)))
3893: /* MUTANT (rep_op) */			|| (dirs[depth] == R || ++links[depth]->balance)))
3893: /* MUTANT (rep_op) */			|| (dirs[depth] == R && --links[depth]->balance)))
3897: /* MUTANT (rep_const) */		case (char) 0:
3897: /* MUTANT (rep_const) */		case (char) 1:
3897: /* MUTANT (rep_const) */		case (char) -1:
3897: /* MUTANT (rep_const) */		case (char) ((-2)+1):
3897: /* MUTANT (rep_const) */		case (char) ((-2)-1):
3898: /* MUTANT (rep_op) */		  switch (dirs[depth - 1])
3898: /* MUTANT (rep_op) */		  switch (dirs[depth * 1])
3898: /* MUTANT (rep_op) */		  switch (dirs[depth % 1])
3898: /* MUTANT (rep_const) */		  switch (dirs[depth + 0])
3898: /* MUTANT (rep_const) */		  switch (dirs[depth + -1])
3898: /* MUTANT (rep_const) */		  switch (dirs[depth + ((1)+1)])
3902: /* MUTANT (del_stmt) */ /* 		      t->rlink = r, r->llink = rl; */ 
3903: /* MUTANT (del_stmt) */ /* 		      t->balance = r->balance = 0; */ 
3903: /* MUTANT (rep_const) */		      t->balance = r->balance = 1;
3903: /* MUTANT (rep_const) */		      t->balance = r->balance = -1;
3904: /* MUTANT (del_stmt) */ /* 		      break; */ 
3907: /* MUTANT (del_stmt) */ /* 		      rl = t->rlink, lr = t->llink; */ 
3908: /* MUTANT (del_stmt) */ /* 		      t->llink = l, l->rlink = lr, t->rlink = r, r->llink = rl; */ 
3909: /* MUTANT (del_stmt) */ /* 		      l->balance = t->balance != 1 ? 0 : -1; */ 
3909: /* MUTANT (rep_op) */		      l->balance = t->balance == 1 ? 0 : -1;
3909: /* MUTANT (rep_const) */		      l->balance = t->balance != 0 ? 0 : -1;
3909: /* MUTANT (rep_const) */		      l->balance = t->balance != -1 ? 0 : -1;
3909: /* MUTANT (rep_const) */		      l->balance = t->balance != ((1)+1) ? 0 : -1;
3909: /* MUTANT (rep_const) */		      l->balance = t->balance != 1 ? 1 : -1;
3909: /* MUTANT (rep_const) */		      l->balance = t->balance != 1 ? -1 : -1;
3909: /* MUTANT (rep_const) */		      l->balance = t->balance != 1 ? 0 : 0;
3909: /* MUTANT (rep_const) */		      l->balance = t->balance != 1 ? 0 : 1;
3909: /* MUTANT (rep_const) */		      l->balance = t->balance != 1 ? 0 : ((-1)+1);
3909: /* MUTANT (rep_const) */		      l->balance = t->balance != 1 ? 0 : ((-1)-1);
3910: /* MUTANT (del_stmt) */ /* 		      r->balance = t->balance != (char) -1 ? 0 : 1; */ 
3910: /* MUTANT (rep_op) */		      r->balance = t->balance == (char) -1 ? 0 : 1;
3910: /* MUTANT (rep_const) */		      r->balance = t->balance != (char) 0 ? 0 : 1;
3910: /* MUTANT (rep_const) */		      r->balance = t->balance != (char) 1 ? 0 : 1;
3910: /* MUTANT (rep_const) */		      r->balance = t->balance != (char) ((-1)+1) ? 0 : 1;
3910: /* MUTANT (rep_const) */		      r->balance = t->balance != (char) ((-1)-1) ? 0 : 1;
3910: /* MUTANT (rep_const) */		      r->balance = t->balance != (char) -1 ? 1 : 1;
3910: /* MUTANT (rep_const) */		      r->balance = t->balance != (char) -1 ? -1 : 1;
3910: /* MUTANT (rep_const) */		      r->balance = t->balance != (char) -1 ? 0 : 0;
3910: /* MUTANT (rep_const) */		      r->balance = t->balance != (char) -1 ? 0 : -1;
3910: /* MUTANT (rep_const) */		      r->balance = t->balance != (char) -1 ? 0 : ((1)+1);
3911: /* MUTANT (del_stmt) */ /* 		      t->balance = 0; */ 
3911: /* MUTANT (rep_const) */		      t->balance = 1;
3911: /* MUTANT (rep_const) */		      t->balance = -1;
3912: /* MUTANT (del_stmt) */ /* 		      break; */ 
3918: /* MUTANT (rep_const) */		case 0:
3918: /* MUTANT (rep_const) */		case 1:
3918: /* MUTANT (rep_const) */		case -1:
3918: /* MUTANT (rep_const) */		case ((2)+1):
3918: /* MUTANT (rep_const) */		case ((2)-1):
3919: /* MUTANT (rep_op) */		  switch (dirs[depth - 1])
3919: /* MUTANT (rep_op) */		  switch (dirs[depth * 1])
3919: /* MUTANT (rep_op) */		  switch (dirs[depth % 1])
3919: /* MUTANT (rep_const) */		  switch (dirs[depth + 0])
3919: /* MUTANT (rep_const) */		  switch (dirs[depth + -1])
3919: /* MUTANT (rep_const) */		  switch (dirs[depth + ((1)+1)])
3923: /* MUTANT (del_stmt) */ /* 		      t->llink = l, l->rlink = lr; */ 
3924: /* MUTANT (del_stmt) */ /* 		      t->balance = l->balance = 0; */ 
3924: /* MUTANT (rep_const) */		      t->balance = l->balance = 1;
3924: /* MUTANT (rep_const) */		      t->balance = l->balance = -1;
3925: /* MUTANT (del_stmt) */ /* 		      break; */ 
3928: /* MUTANT (del_stmt) */ /* 		      lr = t->llink, rl = t->rlink; */ 
3929: /* MUTANT (del_stmt) */ /* 		      t->llink = l, l->rlink = lr, t->rlink = r, r->llink = rl; */ 
3930: /* MUTANT (del_stmt) */ /* 		      l->balance = t->balance != 1 ? 0 : -1; */ 
3930: /* MUTANT (rep_op) */		      l->balance = t->balance == 1 ? 0 : -1;
3930: /* MUTANT (rep_const) */		      l->balance = t->balance != 0 ? 0 : -1;
3930: /* MUTANT (rep_const) */		      l->balance = t->balance != -1 ? 0 : -1;
3930: /* MUTANT (rep_const) */		      l->balance = t->balance != ((1)+1) ? 0 : -1;
3930: /* MUTANT (rep_const) */		      l->balance = t->balance != 1 ? 1 : -1;
3930: /* MUTANT (rep_const) */		      l->balance = t->balance != 1 ? -1 : -1;
3930: /* MUTANT (rep_const) */		      l->balance = t->balance != 1 ? 0 : 0;
3930: /* MUTANT (rep_const) */		      l->balance = t->balance != 1 ? 0 : 1;
3930: /* MUTANT (rep_const) */		      l->balance = t->balance != 1 ? 0 : ((-1)+1);
3930: /* MUTANT (rep_const) */		      l->balance = t->balance != 1 ? 0 : ((-1)-1);
3931: /* MUTANT (del_stmt) */ /* 		      r->balance = t->balance != (char) -1 ? 0 : 1; */ 
3931: /* MUTANT (rep_op) */		      r->balance = t->balance == (char) -1 ? 0 : 1;
3931: /* MUTANT (rep_const) */		      r->balance = t->balance != (char) 0 ? 0 : 1;
3931: /* MUTANT (rep_const) */		      r->balance = t->balance != (char) 1 ? 0 : 1;
3931: /* MUTANT (rep_const) */		      r->balance = t->balance != (char) ((-1)+1) ? 0 : 1;
3931: /* MUTANT (rep_const) */		      r->balance = t->balance != (char) ((-1)-1) ? 0 : 1;
3931: /* MUTANT (rep_const) */		      r->balance = t->balance != (char) -1 ? 1 : 1;
3931: /* MUTANT (rep_const) */		      r->balance = t->balance != (char) -1 ? -1 : 1;
3931: /* MUTANT (rep_const) */		      r->balance = t->balance != (char) -1 ? 0 : 0;
3931: /* MUTANT (rep_const) */		      r->balance = t->balance != (char) -1 ? 0 : -1;
3931: /* MUTANT (rep_const) */		      r->balance = t->balance != (char) -1 ? 0 : ((1)+1);
3932: /* MUTANT (del_stmt) */ /* 		      t->balance = 0; */ 
3932: /* MUTANT (rep_const) */		      t->balance = 1;
3932: /* MUTANT (rep_const) */		      t->balance = -1;
3933: /* MUTANT (del_stmt) */ /* 		      break; */ 
3944: /* MUTANT (rep_op) */	      if (dirs[depth - 1] != L)
3944: /* MUTANT (rep_const) */	      if (dirs[depth - 0] == L)
3944: /* MUTANT (rep_const) */	      if (dirs[depth - -1] == L)
3944: /* MUTANT (rep_const) */	      if (dirs[depth - ((1)+1)] == L)
3944: /* MUTANT (negate) */	      if(! (dirs[depth - 1] == L))
3945: /* MUTANT (rep_const) */		links[depth - 0]->llink = t;
3945: /* MUTANT (rep_const) */		links[depth - -1]->llink = t;
3945: /* MUTANT (rep_const) */		links[depth - ((1)+1)]->llink = t;
3947: /* MUTANT (rep_const) */		links[depth - 0]->rlink = t;
3947: /* MUTANT (rep_const) */		links[depth - -1]->rlink = t;
3947: /* MUTANT (rep_const) */		links[depth - ((1)+1)]->rlink = t;
3956: /* MUTANT (negate) */  if(! (!trie->accepting))
3957: /* MUTANT (rep_op) */    trie->accepting = 1 - 2 * kwset->words;
3957: /* MUTANT (rep_op) */    trie->accepting = 1 * 2 * kwset->words;
3957: /* MUTANT (rep_op) */    trie->accepting = 1 % 2 * kwset->words;
3957: /* MUTANT (rep_const) */    trie->accepting = 0 + 2 * kwset->words;
3957: /* MUTANT (rep_const) */    trie->accepting = -1 + 2 * kwset->words;
3957: /* MUTANT (rep_const) */    trie->accepting = ((1)+1) + 2 * kwset->words;
3957: /* MUTANT (rep_const) */    trie->accepting = 1 + 0 * kwset->words;
3957: /* MUTANT (rep_const) */    trie->accepting = 1 + 1 * kwset->words;
3957: /* MUTANT (rep_const) */    trie->accepting = 1 + -1 * kwset->words;
3957: /* MUTANT (rep_const) */    trie->accepting = 1 + ((2)+1) * kwset->words;
3957: /* MUTANT (rep_const) */    trie->accepting = 1 + ((2)-1) * kwset->words;
3958: /* MUTANT (del_stmt) */ /*   ++kwset->words; */ 
3958: /* MUTANT (rep_op) */  --kwset->words;
3961: /* MUTANT (rep_op) */  if (trie->depth <= kwset->mind)
3961: /* MUTANT (rep_op) */  if (trie->depth > kwset->mind)
3961: /* MUTANT (rep_op) */  if (trie->depth >= kwset->mind)
3961: /* MUTANT (rep_op) */  if (trie->depth == kwset->mind)
3961: /* MUTANT (rep_op) */  if (trie->depth != kwset->mind)
3961: /* MUTANT (negate) */  if(! (trie->depth < kwset->mind))
3963: /* MUTANT (rep_op) */  if (trie->depth <= kwset->maxd)
3963: /* MUTANT (rep_op) */  if (trie->depth < kwset->maxd)
3963: /* MUTANT (rep_op) */  if (trie->depth >= kwset->maxd)
3963: /* MUTANT (rep_op) */  if (trie->depth == kwset->maxd)
3963: /* MUTANT (rep_op) */  if (trie->depth != kwset->maxd)
3963: /* MUTANT (negate) */  if(! (trie->depth > kwset->maxd))
3966: /* MUTANT (del_stmt) */ /*   return 0; */ 
3966: /* MUTANT (rep_const) */  return 1;
3966: /* MUTANT (rep_const) */  return -1;
3974: /* MUTANT (del_stmt) */ /*      struct trie **last; */ 
3976: /* MUTANT (negate) */  if(! (!tree))
3978: /* MUTANT (del_stmt) */ /*   enqueue(tree->llink, last); */ 
3979: /* MUTANT (del_stmt) */ /*   enqueue(tree->rlink, last); */ 
3980: /* MUTANT (del_stmt) */ /*   (*last) = (*last)->next = tree->trie; */ 
3989: /* MUTANT (del_stmt) */ /*      struct trie *fail; */ 
3990: /* MUTANT (del_stmt) */ /*      struct trie *recourse; */ 
3992: /* MUTANT (del_stmt) */ /*   register struct tree *link; */ 
3994: /* MUTANT (negate) */  if(! (!tree))
3997: /* MUTANT (del_stmt) */ /*   treefails(tree->llink, fail, recourse); */ 
3998: /* MUTANT (del_stmt) */ /*   treefails(tree->rlink, fail, recourse); */ 
4002: /* MUTANT (negate) */  while(! (fail))
4004: /* MUTANT (del_stmt) */ /*       link = fail->links; */ 
4005: /* MUTANT (rep_op) */      while (link || tree->label != link->label)
4005: /* MUTANT (rep_op) */      while (link && tree->label == link->label)
4005: /* MUTANT (negate) */      while(! (link && tree->label != link->label))
4006: /* MUTANT (rep_op) */	if (tree->label <= link->label)
4006: /* MUTANT (rep_op) */	if (tree->label > link->label)
4006: /* MUTANT (rep_op) */	if (tree->label >= link->label)
4006: /* MUTANT (rep_op) */	if (tree->label == link->label)
4006: /* MUTANT (rep_op) */	if (tree->label != link->label)
4006: /* MUTANT (negate) */	if(! (tree->label < link->label))
4010: /* MUTANT (negate) */      if(! (link))
4012: /* MUTANT (del_stmt) */ /* 	  tree->trie->fail = link->trie; */ 
4013: /* MUTANT (del_stmt) */ /* 	  return; */ 
4026: /* MUTANT (del_stmt) */ /*      register unsigned int depth; */ 
4027: /* MUTANT (del_stmt) */ /*      unsigned char delta[]; */ 
4029: /* MUTANT (negate) */  if(! (!tree))
4031: /* MUTANT (del_stmt) */ /*   treedelta(tree->llink, depth, delta); */ 
4032: /* MUTANT (del_stmt) */ /*   treedelta(tree->rlink, depth, delta); */ 
4033: /* MUTANT (rep_op) */  if (depth <= delta[tree->label])
4033: /* MUTANT (rep_op) */  if (depth > delta[tree->label])
4033: /* MUTANT (rep_op) */  if (depth >= delta[tree->label])
4033: /* MUTANT (rep_op) */  if (depth == delta[tree->label])
4033: /* MUTANT (rep_op) */  if (depth != delta[tree->label])
4033: /* MUTANT (negate) */  if(! (depth < delta[tree->label]))
4041: /* MUTANT (del_stmt) */ /*      register struct tree *b; */ 
4043: /* MUTANT (negate) */  if(! (!b))
4044: /* MUTANT (rep_const) */    return 0;
4044: /* MUTANT (rep_const) */    return -1;
4044: /* MUTANT (rep_const) */    return ((1)+1);
4045: /* MUTANT (negate) */  if(! (!hasevery(a, b->llink)))
4046: /* MUTANT (rep_const) */    return 1;
4046: /* MUTANT (rep_const) */    return -1;
4047: /* MUTANT (negate) */  if(! (!hasevery(a, b->rlink)))
4048: /* MUTANT (rep_const) */    return 1;
4048: /* MUTANT (rep_const) */    return -1;
4049: /* MUTANT (rep_op) */  while (a || b->label != a->label)
4049: /* MUTANT (rep_op) */  while (a && b->label == a->label)
4049: /* MUTANT (negate) */  while(! (a && b->label != a->label))
4050: /* MUTANT (rep_op) */    if (b->label <= a->label)
4050: /* MUTANT (rep_op) */    if (b->label > a->label)
4050: /* MUTANT (rep_op) */    if (b->label >= a->label)
4050: /* MUTANT (rep_op) */    if (b->label == a->label)
4050: /* MUTANT (rep_op) */    if (b->label != a->label)
4050: /* MUTANT (negate) */    if(! (b->label < a->label))
4054: /* MUTANT (del_stmt) */ /*   return !!a; */ 
4062: /* MUTANT (del_stmt) */ /*      struct trie *next[]; */ 
4064: /* MUTANT (negate) */  if(! (!tree))
4066: /* MUTANT (del_stmt) */ /*   treenext(tree->llink, next); */ 
4067: /* MUTANT (del_stmt) */ /*   treenext(tree->rlink, next); */ 
4068: /* MUTANT (del_stmt) */ /*   next[tree->label] = tree->trie; */ 
4077: /* MUTANT (del_stmt) */ /*   register struct kwset *kwset; */ 
4078: /* MUTANT (del_stmt) */ /*   register int i; */ 
4079: /* MUTANT (del_stmt) */ /*   register struct trie *curr, *fail; */ 
4080: /* MUTANT (del_stmt) */ /*   register char *trans; */ 
4081: /* MUTANT (del_stmt) */ /*   unsigned char delta[NCHAR]; */ 
4082: /* MUTANT (del_stmt) */ /*   struct trie *last, *next[NCHAR]; */ 
4084: /* MUTANT (del_stmt) */ /*   kwset = (struct kwset *) kws; */ 
4089: /* MUTANT (rep_op) */  if (kwset->mind <= 256)
4089: /* MUTANT (rep_op) */  if (kwset->mind > 256)
4089: /* MUTANT (rep_op) */  if (kwset->mind >= 256)
4089: /* MUTANT (rep_op) */  if (kwset->mind == 256)
4089: /* MUTANT (rep_op) */  if (kwset->mind != 256)
4089: /* MUTANT (rep_const) */  if (kwset->mind < 0)
4089: /* MUTANT (rep_const) */  if (kwset->mind < 1)
4089: /* MUTANT (rep_const) */  if (kwset->mind < -1)
4089: /* MUTANT (rep_const) */  if (kwset->mind < ((256)+1))
4089: /* MUTANT (rep_const) */  if (kwset->mind < ((256)-1))
4089: /* MUTANT (negate) */  if(! (kwset->mind < 256))
4090: /* MUTANT (rep_op) */    for (i = 0; i <= NCHAR; ++i)
4090: /* MUTANT (rep_op) */    for (i = 0; i > NCHAR; ++i)
4090: /* MUTANT (rep_op) */    for (i = 0; i >= NCHAR; ++i)
4090: /* MUTANT (rep_op) */    for (i = 0; i == NCHAR; ++i)
4090: /* MUTANT (rep_op) */    for (i = 0; i != NCHAR; ++i)
4090: /* MUTANT (rep_op) */    for (i = 0; i < NCHAR; --i)
4090: /* MUTANT (rep_const) */    for (i = 1; i < NCHAR; ++i)
4090: /* MUTANT (rep_const) */    for (i = -1; i < NCHAR; ++i)
4093: /* MUTANT (rep_op) */    for (i = 0; i <= NCHAR; ++i)
4093: /* MUTANT (rep_op) */    for (i = 0; i > NCHAR; ++i)
4093: /* MUTANT (rep_op) */    for (i = 0; i >= NCHAR; ++i)
4093: /* MUTANT (rep_op) */    for (i = 0; i == NCHAR; ++i)
4093: /* MUTANT (rep_op) */    for (i = 0; i != NCHAR; ++i)
4093: /* MUTANT (rep_op) */    for (i = 0; i < NCHAR; --i)
4093: /* MUTANT (rep_const) */    for (i = 1; i < NCHAR; ++i)
4093: /* MUTANT (rep_const) */    for (i = -1; i < NCHAR; ++i)
4094: /* MUTANT (rep_const) */      delta[i] = 0;
4094: /* MUTANT (rep_const) */      delta[i] = 1;
4094: /* MUTANT (rep_const) */      delta[i] = -1;
4094: /* MUTANT (rep_const) */      delta[i] = ((255)+1);
4094: /* MUTANT (rep_const) */      delta[i] = ((255)-1);
4098: /* MUTANT (rep_op) */  if (kwset->words != 1 && kwset->trans == 0)
4098: /* MUTANT (rep_op) */  if (kwset->words == 1 || kwset->trans == 0)
4098: /* MUTANT (rep_op) */  if (kwset->words == 1 && kwset->trans != 0)
4098: /* MUTANT (rep_const) */  if (kwset->words == 0 && kwset->trans == 0)
4098: /* MUTANT (rep_const) */  if (kwset->words == -1 && kwset->trans == 0)
4098: /* MUTANT (rep_const) */  if (kwset->words == ((1)+1) && kwset->trans == 0)
4098: /* MUTANT (rep_const) */  if (kwset->words == 1 && kwset->trans == 1)
4098: /* MUTANT (rep_const) */  if (kwset->words == 1 && kwset->trans == -1)
4098: /* MUTANT (negate) */  if(! (kwset->words == 1 && kwset->trans == 0))
4101: /* MUTANT (del_stmt) */ /*       kwset->target = obstack_alloc(&kwset->obstack, kwset->mind); */ 
4102: /* MUTANT (rep_op) */      for (i = kwset->mind - 1, curr = kwset->trie; i <= 0; --i)
4102: /* MUTANT (rep_op) */      for (i = kwset->mind - 1, curr = kwset->trie; i < 0; --i)
4102: /* MUTANT (rep_op) */      for (i = kwset->mind - 1, curr = kwset->trie; i > 0; --i)
4102: /* MUTANT (rep_op) */      for (i = kwset->mind - 1, curr = kwset->trie; i == 0; --i)
4102: /* MUTANT (rep_op) */      for (i = kwset->mind - 1, curr = kwset->trie; i != 0; --i)
4102: /* MUTANT (rep_op) */      for (i = kwset->mind - 1, curr = kwset->trie; i >= 0; ++i)
4102: /* MUTANT (rep_const) */      for (i = kwset->mind - 0, curr = kwset->trie; i >= 0; --i)
4102: /* MUTANT (rep_const) */      for (i = kwset->mind - -1, curr = kwset->trie; i >= 0; --i)
4102: /* MUTANT (rep_const) */      for (i = kwset->mind - ((1)+1), curr = kwset->trie; i >= 0; --i)
4102: /* MUTANT (rep_const) */      for (i = kwset->mind - 1, curr = kwset->trie; i >= 1; --i)
4102: /* MUTANT (rep_const) */      for (i = kwset->mind - 1, curr = kwset->trie; i >= -1; --i)
4104: /* MUTANT (del_stmt) */ /* 	  kwset->target[i] = curr->links->label; */ 
4105: /* MUTANT (del_stmt) */ /* 	  curr = curr->links->trie; */ 
4108: /* MUTANT (rep_op) */      for (i = 0; i <= kwset->mind; ++i)
4108: /* MUTANT (rep_op) */      for (i = 0; i > kwset->mind; ++i)
4108: /* MUTANT (rep_op) */      for (i = 0; i >= kwset->mind; ++i)
4108: /* MUTANT (rep_op) */      for (i = 0; i == kwset->mind; ++i)
4108: /* MUTANT (rep_op) */      for (i = 0; i != kwset->mind; ++i)
4108: /* MUTANT (rep_op) */      for (i = 0; i < kwset->mind; --i)
4108: /* MUTANT (rep_const) */      for (i = 1; i < kwset->mind; ++i)
4108: /* MUTANT (rep_const) */      for (i = -1; i < kwset->mind; ++i)
4109: /* MUTANT (rep_op) */	delta[(unsigned char) kwset->target[i]] = kwset->mind - (i - 1);
4109: /* MUTANT (rep_op) */	delta[(unsigned char) kwset->target[i]] = kwset->mind - (i * 1);
4109: /* MUTANT (rep_op) */	delta[(unsigned char) kwset->target[i]] = kwset->mind - (i % 1);
4109: /* MUTANT (rep_const) */	delta[(unsigned char) kwset->target[i]] = kwset->mind - (i + 0);
4109: /* MUTANT (rep_const) */	delta[(unsigned char) kwset->target[i]] = kwset->mind - (i + -1);
4109: /* MUTANT (rep_const) */	delta[(unsigned char) kwset->target[i]] = kwset->mind - (i + ((1)+1));
4110: /* MUTANT (del_stmt) */ /*       kwset->mind2 = kwset->mind; */ 
4113: /* MUTANT (rep_op) */      for (i = 0; i <= kwset->mind - 1; ++i)
4113: /* MUTANT (rep_op) */      for (i = 0; i > kwset->mind - 1; ++i)
4113: /* MUTANT (rep_op) */      for (i = 0; i >= kwset->mind - 1; ++i)
4113: /* MUTANT (rep_op) */      for (i = 0; i == kwset->mind - 1; ++i)
4113: /* MUTANT (rep_op) */      for (i = 0; i != kwset->mind - 1; ++i)
4113: /* MUTANT (rep_op) */      for (i = 0; i < kwset->mind - 1; --i)
4113: /* MUTANT (rep_const) */      for (i = 1; i < kwset->mind - 1; ++i)
4113: /* MUTANT (rep_const) */      for (i = -1; i < kwset->mind - 1; ++i)
4113: /* MUTANT (rep_const) */      for (i = 0; i < kwset->mind - 0; ++i)
4113: /* MUTANT (rep_const) */      for (i = 0; i < kwset->mind - -1; ++i)
4113: /* MUTANT (rep_const) */      for (i = 0; i < kwset->mind - ((1)+1); ++i)
4114: /* MUTANT (rep_op) */	if (kwset->target[i] != kwset->target[kwset->mind - 1])
4114: /* MUTANT (rep_const) */	if (kwset->target[i] == kwset->target[kwset->mind - 0])
4114: /* MUTANT (rep_const) */	if (kwset->target[i] == kwset->target[kwset->mind - -1])
4114: /* MUTANT (rep_const) */	if (kwset->target[i] == kwset->target[kwset->mind - ((1)+1)])
4114: /* MUTANT (negate) */	if(! (kwset->target[i] == kwset->target[kwset->mind - 1]))
4115: /* MUTANT (rep_op) */	  kwset->mind2 = kwset->mind - (i - 1);
4115: /* MUTANT (rep_op) */	  kwset->mind2 = kwset->mind - (i * 1);
4115: /* MUTANT (rep_op) */	  kwset->mind2 = kwset->mind - (i % 1);
4115: /* MUTANT (rep_const) */	  kwset->mind2 = kwset->mind - (i + 0);
4115: /* MUTANT (rep_const) */	  kwset->mind2 = kwset->mind - (i + -1);
4115: /* MUTANT (rep_const) */	  kwset->mind2 = kwset->mind - (i + ((1)+1));
4124: /* MUTANT (del_stmt) */ /* 	  enqueue(curr->links, &last); */ 
4126: /* MUTANT (del_stmt) */ /* 	  curr->shift = kwset->mind; */ 
4127: /* MUTANT (del_stmt) */ /* 	  curr->maxshift = kwset->mind; */ 
4130: /* MUTANT (del_stmt) */ /* 	  treedelta(curr->links, curr->depth, delta); */ 
4133: /* MUTANT (del_stmt) */ /* 	  treefails(curr->links, curr->fail, kwset->trie); */ 
4142: /* MUTANT (negate) */	      if(! (!hasevery(fail->links, curr->links)))
4143: /* MUTANT (rep_op) */		if (curr->depth - fail->depth <= fail->shift)
4143: /* MUTANT (rep_op) */		if (curr->depth - fail->depth > fail->shift)
4143: /* MUTANT (rep_op) */		if (curr->depth - fail->depth >= fail->shift)
4143: /* MUTANT (rep_op) */		if (curr->depth - fail->depth == fail->shift)
4143: /* MUTANT (rep_op) */		if (curr->depth - fail->depth != fail->shift)
4143: /* MUTANT (negate) */		if(! (curr->depth - fail->depth < fail->shift))
4149: /* MUTANT (rep_op) */	      if (curr->accepting || fail->maxshift > curr->depth - fail->depth)
4149: /* MUTANT (rep_op) */	      if (curr->accepting && fail->maxshift <= curr->depth - fail->depth)
4149: /* MUTANT (rep_op) */	      if (curr->accepting && fail->maxshift < curr->depth - fail->depth)
4149: /* MUTANT (rep_op) */	      if (curr->accepting && fail->maxshift >= curr->depth - fail->depth)
4149: /* MUTANT (rep_op) */	      if (curr->accepting && fail->maxshift == curr->depth - fail->depth)
4149: /* MUTANT (rep_op) */	      if (curr->accepting && fail->maxshift != curr->depth - fail->depth)
4149: /* MUTANT (negate) */	      if(! (curr->accepting && fail->maxshift > curr->depth - fail->depth))
4158: /* MUTANT (rep_op) */	  if (curr->maxshift <= curr->parent->maxshift)
4158: /* MUTANT (rep_op) */	  if (curr->maxshift < curr->parent->maxshift)
4158: /* MUTANT (rep_op) */	  if (curr->maxshift >= curr->parent->maxshift)
4158: /* MUTANT (rep_op) */	  if (curr->maxshift == curr->parent->maxshift)
4158: /* MUTANT (rep_op) */	  if (curr->maxshift != curr->parent->maxshift)
4158: /* MUTANT (negate) */	  if(! (curr->maxshift > curr->parent->maxshift))
4160: /* MUTANT (rep_op) */	  if (curr->shift <= curr->maxshift)
4160: /* MUTANT (rep_op) */	  if (curr->shift < curr->maxshift)
4160: /* MUTANT (rep_op) */	  if (curr->shift >= curr->maxshift)
4160: /* MUTANT (rep_op) */	  if (curr->shift == curr->maxshift)
4160: /* MUTANT (rep_op) */	  if (curr->shift != curr->maxshift)
4160: /* MUTANT (negate) */	  if(! (curr->shift > curr->maxshift))
4166: /* MUTANT (rep_op) */      for (i = 0; i <= NCHAR; ++i)
4166: /* MUTANT (rep_op) */      for (i = 0; i > NCHAR; ++i)
4166: /* MUTANT (rep_op) */      for (i = 0; i >= NCHAR; ++i)
4166: /* MUTANT (rep_op) */      for (i = 0; i == NCHAR; ++i)
4166: /* MUTANT (rep_op) */      for (i = 0; i != NCHAR; ++i)
4166: /* MUTANT (rep_op) */      for (i = 0; i < NCHAR; --i)
4166: /* MUTANT (rep_const) */      for (i = 1; i < NCHAR; ++i)
4166: /* MUTANT (rep_const) */      for (i = -1; i < NCHAR; ++i)
4167: /* MUTANT (rep_const) */	next[i] = 1;
4167: /* MUTANT (rep_const) */	next[i] = -1;
4168: /* MUTANT (del_stmt) */ /*       treenext(kwset->trie->links, next); */ 
4170: /* MUTANT (rep_op) */      if ((trans = kwset->trans) == 0)
4170: /* MUTANT (rep_const) */      if ((trans = kwset->trans) != 1)
4170: /* MUTANT (rep_const) */      if ((trans = kwset->trans) != -1)
4170: /* MUTANT (negate) */      if(! ((trans = kwset->trans) != 0))
4171: /* MUTANT (rep_op) */	for (i = 0; i <= NCHAR; ++i)
4171: /* MUTANT (rep_op) */	for (i = 0; i > NCHAR; ++i)
4171: /* MUTANT (rep_op) */	for (i = 0; i >= NCHAR; ++i)
4171: /* MUTANT (rep_op) */	for (i = 0; i == NCHAR; ++i)
4171: /* MUTANT (rep_op) */	for (i = 0; i != NCHAR; ++i)
4171: /* MUTANT (rep_op) */	for (i = 0; i < NCHAR; --i)
4171: /* MUTANT (rep_const) */	for (i = 1; i < NCHAR; ++i)
4171: /* MUTANT (rep_const) */	for (i = -1; i < NCHAR; ++i)
4174: /* MUTANT (rep_op) */	for (i = 0; i <= NCHAR; ++i)
4174: /* MUTANT (rep_op) */	for (i = 0; i > NCHAR; ++i)
4174: /* MUTANT (rep_op) */	for (i = 0; i >= NCHAR; ++i)
4174: /* MUTANT (rep_op) */	for (i = 0; i == NCHAR; ++i)
4174: /* MUTANT (rep_op) */	for (i = 0; i != NCHAR; ++i)
4174: /* MUTANT (rep_op) */	for (i = 0; i < NCHAR; --i)
4174: /* MUTANT (rep_const) */	for (i = 1; i < NCHAR; ++i)
4174: /* MUTANT (rep_const) */	for (i = -1; i < NCHAR; ++i)
4179: /* MUTANT (rep_op) */  if ((trans = kwset->trans) == 0)
4179: /* MUTANT (rep_const) */  if ((trans = kwset->trans) != 1)
4179: /* MUTANT (rep_const) */  if ((trans = kwset->trans) != -1)
4179: /* MUTANT (negate) */  if(! ((trans = kwset->trans) != 0))
4180: /* MUTANT (rep_op) */    for (i = 0; i <= NCHAR; ++i)
4180: /* MUTANT (rep_op) */    for (i = 0; i > NCHAR; ++i)
4180: /* MUTANT (rep_op) */    for (i = 0; i >= NCHAR; ++i)
4180: /* MUTANT (rep_op) */    for (i = 0; i == NCHAR; ++i)
4180: /* MUTANT (rep_op) */    for (i = 0; i != NCHAR; ++i)
4180: /* MUTANT (rep_op) */    for (i = 0; i < NCHAR; --i)
4180: /* MUTANT (rep_const) */    for (i = 1; i < NCHAR; ++i)
4180: /* MUTANT (rep_const) */    for (i = -1; i < NCHAR; ++i)
4183: /* MUTANT (rep_op) */    for (i = 0; i <= NCHAR; ++i)
4183: /* MUTANT (rep_op) */    for (i = 0; i > NCHAR; ++i)
4183: /* MUTANT (rep_op) */    for (i = 0; i >= NCHAR; ++i)
4183: /* MUTANT (rep_op) */    for (i = 0; i == NCHAR; ++i)
4183: /* MUTANT (rep_op) */    for (i = 0; i != NCHAR; ++i)
4183: /* MUTANT (rep_op) */    for (i = 0; i < NCHAR; --i)
4183: /* MUTANT (rep_const) */    for (i = 1; i < NCHAR; ++i)
4183: /* MUTANT (rep_const) */    for (i = -1; i < NCHAR; ++i)
4186: /* MUTANT (del_stmt) */ /*   return 0; */ 
4186: /* MUTANT (rep_const) */  return 1;
4186: /* MUTANT (rep_const) */  return -1;
4195: /* MUTANT (del_stmt) */ /*      char *text; */ 
4196: /* MUTANT (del_stmt) */ /*      size_t size; */ 
4198: /* MUTANT (del_stmt) */ /*   struct kwset *kwset; */ 
4199: /* MUTANT (del_stmt) */ /*   register unsigned char *d1; */ 
4200: /* MUTANT (del_stmt) */ /*   register char *ep, *sp, *tp; */ 
4201: /* MUTANT (del_stmt) */ /*   register int d, gc, i, len, md2; */ 
4203: /* MUTANT (del_stmt) */ /*   kwset = (struct kwset *) kws; */ 
4204: /* MUTANT (del_stmt) */ /*   len = kwset->mind; */ 
4206: /* MUTANT (rep_op) */  if (len != 0)
4206: /* MUTANT (rep_const) */  if (len == 1)
4206: /* MUTANT (rep_const) */  if (len == -1)
4206: /* MUTANT (negate) */  if(! (len == 0))
4208: /* MUTANT (rep_op) */  if (len <= size)
4208: /* MUTANT (rep_op) */  if (len < size)
4208: /* MUTANT (rep_op) */  if (len >= size)
4208: /* MUTANT (rep_op) */  if (len == size)
4208: /* MUTANT (rep_op) */  if (len != size)
4208: /* MUTANT (negate) */  if(! (len > size))
4209: /* MUTANT (rep_const) */    return 1;
4209: /* MUTANT (rep_const) */    return -1;
4210: /* MUTANT (rep_op) */  if (len != 1)
4210: /* MUTANT (rep_const) */  if (len == 0)
4210: /* MUTANT (rep_const) */  if (len == -1)
4210: /* MUTANT (rep_const) */  if (len == ((1)+1))
4210: /* MUTANT (negate) */  if(! (len == 1))
4211: /* MUTANT (rep_const) */    return memchr(text, kwset->target[1], size);
4211: /* MUTANT (rep_const) */    return memchr(text, kwset->target[-1], size);
4213: /* MUTANT (del_stmt) */ /*   d1 = kwset->delta; */ 
4214: /* MUTANT (del_stmt) */ /*   sp = kwset->target + len; */ 
4214: /* MUTANT (rep_op) */  sp = kwset->target - len;
4214: /* MUTANT (rep_op) */  sp = kwset->target * len;
4214: /* MUTANT (rep_op) */  sp = kwset->target % len;
4215: /* MUTANT (del_stmt) */ /*   gc = U(sp[-2]); */ 
4215: /* MUTANT (rep_const) */  gc = U(sp[0]);
4215: /* MUTANT (rep_const) */  gc = U(sp[1]);
4215: /* MUTANT (rep_const) */  gc = U(sp[-1]);
4215: /* MUTANT (rep_const) */  gc = U(sp[((-2)+1)]);
4215: /* MUTANT (rep_const) */  gc = U(sp[((-2)-1)]);
4216: /* MUTANT (del_stmt) */ /*   md2 = kwset->mind2; */ 
4217: /* MUTANT (del_stmt) */ /*   tp = text + len; */ 
4217: /* MUTANT (rep_op) */  tp = text - len;
4217: /* MUTANT (rep_op) */  tp = text * len;
4217: /* MUTANT (rep_op) */  tp = text % len;
4220: /* MUTANT (rep_op) */  if (size <= 12 * len)
4220: /* MUTANT (rep_op) */  if (size < 12 * len)
4220: /* MUTANT (rep_op) */  if (size >= 12 * len)
4220: /* MUTANT (rep_op) */  if (size == 12 * len)
4220: /* MUTANT (rep_op) */  if (size != 12 * len)
4220: /* MUTANT (rep_const) */  if (size > 0 * len)
4220: /* MUTANT (rep_const) */  if (size > 1 * len)
4220: /* MUTANT (rep_const) */  if (size > -1 * len)
4220: /* MUTANT (rep_const) */  if (size > ((12)+1) * len)
4220: /* MUTANT (rep_const) */  if (size > ((12)-1) * len)
4220: /* MUTANT (negate) */  if(! (size > 12 * len))
4222: /* MUTANT (rep_op) */    for (ep = text - size - 11 * len;;)
4222: /* MUTANT (rep_op) */    for (ep = text * size - 11 * len;;)
4222: /* MUTANT (rep_op) */    for (ep = text % size - 11 * len;;)
4222: /* MUTANT (rep_const) */    for (ep = text + size - 0 * len;;)
4222: /* MUTANT (rep_const) */    for (ep = text + size - 1 * len;;)
4222: /* MUTANT (rep_const) */    for (ep = text + size - -1 * len;;)
4222: /* MUTANT (rep_const) */    for (ep = text + size - ((11)+1) * len;;)
4222: /* MUTANT (rep_const) */    for (ep = text + size - ((11)-1) * len;;)
4224: /* MUTANT (rep_op) */	while (tp < ep)
4224: /* MUTANT (rep_op) */	while (tp > ep)
4224: /* MUTANT (rep_op) */	while (tp >= ep)
4224: /* MUTANT (rep_op) */	while (tp == ep)
4224: /* MUTANT (rep_op) */	while (tp != ep)
4224: /* MUTANT (negate) */	while(! (tp <= ep))
4226: /* MUTANT (del_stmt) */ /* 	    d = d1[U(tp[-1])], tp += d; */ 
4226: /* MUTANT (rep_op) */	    d = d1[U(tp[-1])], tp -= d;
4226: /* MUTANT (rep_op) */	    d = d1[U(tp[-1])], tp *= d;
4226: /* MUTANT (rep_op) */	    d = d1[U(tp[-1])], tp %= d;
4226: /* MUTANT (rep_const) */	    d = d1[U(tp[0])], tp += d;
4226: /* MUTANT (rep_const) */	    d = d1[U(tp[1])], tp += d;
4226: /* MUTANT (rep_const) */	    d = d1[U(tp[((-1)+1)])], tp += d;
4226: /* MUTANT (rep_const) */	    d = d1[U(tp[((-1)-1)])], tp += d;
4227: /* MUTANT (del_stmt) */ /* 	    d = d1[U(tp[-1])], tp += d; */ 
4227: /* MUTANT (rep_op) */	    d = d1[U(tp[-1])], tp -= d;
4227: /* MUTANT (rep_op) */	    d = d1[U(tp[-1])], tp *= d;
4227: /* MUTANT (rep_op) */	    d = d1[U(tp[-1])], tp %= d;
4227: /* MUTANT (rep_const) */	    d = d1[U(tp[0])], tp += d;
4227: /* MUTANT (rep_const) */	    d = d1[U(tp[1])], tp += d;
4227: /* MUTANT (rep_const) */	    d = d1[U(tp[((-1)+1)])], tp += d;
4227: /* MUTANT (rep_const) */	    d = d1[U(tp[((-1)-1)])], tp += d;
4228: /* MUTANT (rep_op) */	    if (d != 0)
4228: /* MUTANT (rep_const) */	    if (d == 1)
4228: /* MUTANT (rep_const) */	    if (d == -1)
4228: /* MUTANT (negate) */	    if(! (d == 0))
4230: /* MUTANT (del_stmt) */ /* 	    d = d1[U(tp[-1])], tp += d; */ 
4230: /* MUTANT (rep_op) */	    d = d1[U(tp[-1])], tp -= d;
4230: /* MUTANT (rep_op) */	    d = d1[U(tp[-1])], tp *= d;
4230: /* MUTANT (rep_op) */	    d = d1[U(tp[-1])], tp %= d;
4230: /* MUTANT (rep_const) */	    d = d1[U(tp[0])], tp += d;
4230: /* MUTANT (rep_const) */	    d = d1[U(tp[1])], tp += d;
4230: /* MUTANT (rep_const) */	    d = d1[U(tp[((-1)+1)])], tp += d;
4230: /* MUTANT (rep_const) */	    d = d1[U(tp[((-1)-1)])], tp += d;
4231: /* MUTANT (del_stmt) */ /* 	    d = d1[U(tp[-1])], tp += d; */ 
4231: /* MUTANT (rep_op) */	    d = d1[U(tp[-1])], tp -= d;
4231: /* MUTANT (rep_op) */	    d = d1[U(tp[-1])], tp *= d;
4231: /* MUTANT (rep_op) */	    d = d1[U(tp[-1])], tp %= d;
4231: /* MUTANT (rep_const) */	    d = d1[U(tp[0])], tp += d;
4231: /* MUTANT (rep_const) */	    d = d1[U(tp[1])], tp += d;
4231: /* MUTANT (rep_const) */	    d = d1[U(tp[((-1)+1)])], tp += d;
4231: /* MUTANT (rep_const) */	    d = d1[U(tp[((-1)-1)])], tp += d;
4232: /* MUTANT (del_stmt) */ /* 	    d = d1[U(tp[-1])], tp += d; */ 
4232: /* MUTANT (rep_op) */	    d = d1[U(tp[-1])], tp -= d;
4232: /* MUTANT (rep_op) */	    d = d1[U(tp[-1])], tp *= d;
4232: /* MUTANT (rep_op) */	    d = d1[U(tp[-1])], tp %= d;
4232: /* MUTANT (rep_const) */	    d = d1[U(tp[0])], tp += d;
4232: /* MUTANT (rep_const) */	    d = d1[U(tp[1])], tp += d;
4232: /* MUTANT (rep_const) */	    d = d1[U(tp[((-1)+1)])], tp += d;
4232: /* MUTANT (rep_const) */	    d = d1[U(tp[((-1)-1)])], tp += d;
4233: /* MUTANT (rep_op) */	    if (d != 0)
4233: /* MUTANT (rep_const) */	    if (d == 1)
4233: /* MUTANT (rep_const) */	    if (d == -1)
4233: /* MUTANT (negate) */	    if(! (d == 0))
4235: /* MUTANT (del_stmt) */ /* 	    d = d1[U(tp[-1])], tp += d; */ 
4235: /* MUTANT (rep_op) */	    d = d1[U(tp[-1])], tp -= d;
4235: /* MUTANT (rep_op) */	    d = d1[U(tp[-1])], tp *= d;
4235: /* MUTANT (rep_op) */	    d = d1[U(tp[-1])], tp %= d;
4235: /* MUTANT (rep_const) */	    d = d1[U(tp[0])], tp += d;
4235: /* MUTANT (rep_const) */	    d = d1[U(tp[1])], tp += d;
4235: /* MUTANT (rep_const) */	    d = d1[U(tp[((-1)+1)])], tp += d;
4235: /* MUTANT (rep_const) */	    d = d1[U(tp[((-1)-1)])], tp += d;
4236: /* MUTANT (del_stmt) */ /* 	    d = d1[U(tp[-1])], tp += d; */ 
4236: /* MUTANT (rep_op) */	    d = d1[U(tp[-1])], tp -= d;
4236: /* MUTANT (rep_op) */	    d = d1[U(tp[-1])], tp *= d;
4236: /* MUTANT (rep_op) */	    d = d1[U(tp[-1])], tp %= d;
4236: /* MUTANT (rep_const) */	    d = d1[U(tp[0])], tp += d;
4236: /* MUTANT (rep_const) */	    d = d1[U(tp[1])], tp += d;
4236: /* MUTANT (rep_const) */	    d = d1[U(tp[((-1)+1)])], tp += d;
4236: /* MUTANT (rep_const) */	    d = d1[U(tp[((-1)-1)])], tp += d;
4237: /* MUTANT (del_stmt) */ /* 	    d = d1[U(tp[-1])], tp += d; */ 
4237: /* MUTANT (rep_op) */	    d = d1[U(tp[-1])], tp -= d;
4237: /* MUTANT (rep_op) */	    d = d1[U(tp[-1])], tp *= d;
4237: /* MUTANT (rep_op) */	    d = d1[U(tp[-1])], tp %= d;
4237: /* MUTANT (rep_const) */	    d = d1[U(tp[0])], tp += d;
4237: /* MUTANT (rep_const) */	    d = d1[U(tp[1])], tp += d;
4237: /* MUTANT (rep_const) */	    d = d1[U(tp[((-1)+1)])], tp += d;
4237: /* MUTANT (rep_const) */	    d = d1[U(tp[((-1)-1)])], tp += d;
4238: /* MUTANT (rep_op) */	    if (d != 0)
4238: /* MUTANT (rep_const) */	    if (d == 1)
4238: /* MUTANT (rep_const) */	    if (d == -1)
4238: /* MUTANT (negate) */	    if(! (d == 0))
4240: /* MUTANT (del_stmt) */ /* 	    d = d1[U(tp[-1])], tp += d; */ 
4240: /* MUTANT (rep_op) */	    d = d1[U(tp[-1])], tp -= d;
4240: /* MUTANT (rep_op) */	    d = d1[U(tp[-1])], tp *= d;
4240: /* MUTANT (rep_op) */	    d = d1[U(tp[-1])], tp %= d;
4240: /* MUTANT (rep_const) */	    d = d1[U(tp[0])], tp += d;
4240: /* MUTANT (rep_const) */	    d = d1[U(tp[1])], tp += d;
4240: /* MUTANT (rep_const) */	    d = d1[U(tp[((-1)+1)])], tp += d;
4240: /* MUTANT (rep_const) */	    d = d1[U(tp[((-1)-1)])], tp += d;
4241: /* MUTANT (del_stmt) */ /* 	    d = d1[U(tp[-1])], tp += d; */ 
4241: /* MUTANT (rep_op) */	    d = d1[U(tp[-1])], tp -= d;
4241: /* MUTANT (rep_op) */	    d = d1[U(tp[-1])], tp *= d;
4241: /* MUTANT (rep_op) */	    d = d1[U(tp[-1])], tp %= d;
4241: /* MUTANT (rep_const) */	    d = d1[U(tp[0])], tp += d;
4241: /* MUTANT (rep_const) */	    d = d1[U(tp[1])], tp += d;
4241: /* MUTANT (rep_const) */	    d = d1[U(tp[((-1)+1)])], tp += d;
4241: /* MUTANT (rep_const) */	    d = d1[U(tp[((-1)-1)])], tp += d;
4245: /* MUTANT (rep_op) */	if (U(tp[-2]) != gc)
4245: /* MUTANT (rep_const) */	if (U(tp[0]) == gc)
4245: /* MUTANT (rep_const) */	if (U(tp[1]) == gc)
4245: /* MUTANT (rep_const) */	if (U(tp[-1]) == gc)
4245: /* MUTANT (rep_const) */	if (U(tp[((-2)+1)]) == gc)
4245: /* MUTANT (rep_const) */	if (U(tp[((-2)-1)]) == gc)
4245: /* MUTANT (negate) */	if(! (U(tp[-2]) == gc))
4247: /* MUTANT (rep_op) */	    for (i = 3; i < len && U(tp[-i]) == U(sp[-i]); ++i)
4247: /* MUTANT (rep_op) */	    for (i = 3; i > len && U(tp[-i]) == U(sp[-i]); ++i)
4247: /* MUTANT (rep_op) */	    for (i = 3; i >= len && U(tp[-i]) == U(sp[-i]); ++i)
4247: /* MUTANT (rep_op) */	    for (i = 3; i == len && U(tp[-i]) == U(sp[-i]); ++i)
4247: /* MUTANT (rep_op) */	    for (i = 3; i != len && U(tp[-i]) == U(sp[-i]); ++i)
4247: /* MUTANT (rep_op) */	    for (i = 3; i <= len || U(tp[-i]) == U(sp[-i]); ++i)
4247: /* MUTANT (rep_op) */	    for (i = 3; i <= len && U(tp[-i]) != U(sp[-i]); ++i)
4247: /* MUTANT (rep_op) */	    for (i = 3; i <= len && U(tp[-i]) == U(sp[-i]); --i)
4247: /* MUTANT (rep_const) */	    for (i = 0; i <= len && U(tp[-i]) == U(sp[-i]); ++i)
4247: /* MUTANT (rep_const) */	    for (i = 1; i <= len && U(tp[-i]) == U(sp[-i]); ++i)
4247: /* MUTANT (rep_const) */	    for (i = -1; i <= len && U(tp[-i]) == U(sp[-i]); ++i)
4247: /* MUTANT (rep_const) */	    for (i = ((3)+1); i <= len && U(tp[-i]) == U(sp[-i]); ++i)
4247: /* MUTANT (rep_const) */	    for (i = ((3)-1); i <= len && U(tp[-i]) == U(sp[-i]); ++i)
4249: /* MUTANT (rep_op) */	    if (i <= len)
4249: /* MUTANT (rep_op) */	    if (i < len)
4249: /* MUTANT (rep_op) */	    if (i >= len)
4249: /* MUTANT (rep_op) */	    if (i == len)
4249: /* MUTANT (rep_op) */	    if (i != len)
4249: /* MUTANT (negate) */	    if(! (i > len))
4252: /* MUTANT (rep_op) */	tp -= md2;
4252: /* MUTANT (rep_op) */	tp *= md2;
4252: /* MUTANT (rep_op) */	tp %= md2;
4257: /* MUTANT (rep_op) */  ep = text - size;
4257: /* MUTANT (rep_op) */  ep = text * size;
4257: /* MUTANT (rep_op) */  ep = text % size;
4258: /* MUTANT (del_stmt) */ /*   d = d1[U(tp[-1])]; */ 
4258: /* MUTANT (rep_const) */  d = d1[U(tp[0])];
4258: /* MUTANT (rep_const) */  d = d1[U(tp[1])];
4258: /* MUTANT (rep_const) */  d = d1[U(tp[((-1)+1)])];
4258: /* MUTANT (rep_const) */  d = d1[U(tp[((-1)-1)])];
4259: /* MUTANT (rep_op) */  while (d < ep - tp)
4259: /* MUTANT (rep_op) */  while (d > ep - tp)
4259: /* MUTANT (rep_op) */  while (d >= ep - tp)
4259: /* MUTANT (rep_op) */  while (d == ep - tp)
4259: /* MUTANT (rep_op) */  while (d != ep - tp)
4259: /* MUTANT (negate) */  while(! (d <= ep - tp))
4261: /* MUTANT (del_stmt) */ /*       d = d1[U((tp += d)[-1])]; */ 
4261: /* MUTANT (rep_op) */      d = d1[U((tp -= d)[-1])];
4261: /* MUTANT (rep_op) */      d = d1[U((tp *= d)[-1])];
4261: /* MUTANT (rep_op) */      d = d1[U((tp %= d)[-1])];
4261: /* MUTANT (rep_const) */      d = d1[U((tp += d)[0])];
4261: /* MUTANT (rep_const) */      d = d1[U((tp += d)[1])];
4261: /* MUTANT (rep_const) */      d = d1[U((tp += d)[((-1)+1)])];
4261: /* MUTANT (rep_const) */      d = d1[U((tp += d)[((-1)-1)])];
4262: /* MUTANT (rep_op) */      if (d == 0)
4262: /* MUTANT (rep_const) */      if (d != 1)
4262: /* MUTANT (rep_const) */      if (d != -1)
4262: /* MUTANT (negate) */      if(! (d != 0))
4264: /* MUTANT (rep_op) */      if (U(tp[-2]) != gc)
4264: /* MUTANT (rep_const) */      if (U(tp[0]) == gc)
4264: /* MUTANT (rep_const) */      if (U(tp[1]) == gc)
4264: /* MUTANT (rep_const) */      if (U(tp[-1]) == gc)
4264: /* MUTANT (rep_const) */      if (U(tp[((-2)+1)]) == gc)
4264: /* MUTANT (rep_const) */      if (U(tp[((-2)-1)]) == gc)
4264: /* MUTANT (negate) */      if(! (U(tp[-2]) == gc))
4266: /* MUTANT (rep_op) */	  for (i = 3; i < len && U(tp[-i]) == U(sp[-i]); ++i)
4266: /* MUTANT (rep_op) */	  for (i = 3; i > len && U(tp[-i]) == U(sp[-i]); ++i)
4266: /* MUTANT (rep_op) */	  for (i = 3; i >= len && U(tp[-i]) == U(sp[-i]); ++i)
4266: /* MUTANT (rep_op) */	  for (i = 3; i == len && U(tp[-i]) == U(sp[-i]); ++i)
4266: /* MUTANT (rep_op) */	  for (i = 3; i != len && U(tp[-i]) == U(sp[-i]); ++i)
4266: /* MUTANT (rep_op) */	  for (i = 3; i <= len || U(tp[-i]) == U(sp[-i]); ++i)
4266: /* MUTANT (rep_op) */	  for (i = 3; i <= len && U(tp[-i]) != U(sp[-i]); ++i)
4266: /* MUTANT (rep_op) */	  for (i = 3; i <= len && U(tp[-i]) == U(sp[-i]); --i)
4266: /* MUTANT (rep_const) */	  for (i = 0; i <= len && U(tp[-i]) == U(sp[-i]); ++i)
4266: /* MUTANT (rep_const) */	  for (i = 1; i <= len && U(tp[-i]) == U(sp[-i]); ++i)
4266: /* MUTANT (rep_const) */	  for (i = -1; i <= len && U(tp[-i]) == U(sp[-i]); ++i)
4266: /* MUTANT (rep_const) */	  for (i = ((3)+1); i <= len && U(tp[-i]) == U(sp[-i]); ++i)
4266: /* MUTANT (rep_const) */	  for (i = ((3)-1); i <= len && U(tp[-i]) == U(sp[-i]); ++i)
4268: /* MUTANT (rep_op) */	  if (i <= len)
4268: /* MUTANT (rep_op) */	  if (i < len)
4268: /* MUTANT (rep_op) */	  if (i >= len)
4268: /* MUTANT (rep_op) */	  if (i == len)
4268: /* MUTANT (rep_op) */	  if (i != len)
4268: /* MUTANT (negate) */	  if(! (i > len))
4274: /* MUTANT (rep_const) */  return 1;
4274: /* MUTANT (rep_const) */  return -1;
4281: /* MUTANT (del_stmt) */ /*      char *text; */ 
4282: /* MUTANT (del_stmt) */ /*      size_t len; */ 
4283: /* MUTANT (del_stmt) */ /*      struct kwsmatch *kwsmatch; */ 
4285: /* MUTANT (del_stmt) */ /*   struct kwset *kwset; */ 
4286: /* MUTANT (del_stmt) */ /*   struct trie **next, *trie, *accept; */ 
4287: /* MUTANT (del_stmt) */ /*   char *beg, *lim, *mch, *lmch; */ 
4288: /* MUTANT (del_stmt) */ /*   register unsigned char c, *delta; */ 
4289: /* MUTANT (del_stmt) */ /*   register int d; */ 
4290: /* MUTANT (del_stmt) */ /*   register char *end, *qlim; */ 
4291: /* MUTANT (del_stmt) */ /*   register struct tree *tree; */ 
4292: /* MUTANT (del_stmt) */ /*   register char *trans; */ 
4300: /* MUTANT (rep_op) */  if (len <= kwset->mind)
4300: /* MUTANT (rep_op) */  if (len > kwset->mind)
4300: /* MUTANT (rep_op) */  if (len >= kwset->mind)
4300: /* MUTANT (rep_op) */  if (len == kwset->mind)
4300: /* MUTANT (rep_op) */  if (len != kwset->mind)
4300: /* MUTANT (negate) */  if(! (len < kwset->mind))
4301: /* MUTANT (rep_const) */    return 1;
4301: /* MUTANT (rep_const) */    return -1;
4302: /* MUTANT (del_stmt) */ /*   next = kwset->next; */ 
4303: /* MUTANT (del_stmt) */ /*   delta = kwset->delta; */ 
4304: /* MUTANT (del_stmt) */ /*   trans = kwset->trans; */ 
4305: /* MUTANT (del_stmt) */ /*   lim = text + len; */ 
4305: /* MUTANT (rep_op) */  lim = text - len;
4305: /* MUTANT (rep_op) */  lim = text * len;
4305: /* MUTANT (rep_op) */  lim = text % len;
4306: /* MUTANT (del_stmt) */ /*   end = text; */ 
4307: /* MUTANT (rep_op) */  if ((d = kwset->mind) == 0)
4307: /* MUTANT (rep_const) */  if ((d = kwset->mind) != 1)
4307: /* MUTANT (rep_const) */  if ((d = kwset->mind) != -1)
4307: /* MUTANT (negate) */  if(! ((d = kwset->mind) != 0))
4308: /* MUTANT (rep_const) */    mch = 1;
4308: /* MUTANT (rep_const) */    mch = -1;
4311: /* MUTANT (del_stmt) */ /*       mch = text, accept = kwset->trie; */ 
4312: /* MUTANT (del_stmt) */ /*       goto match; */ 
4315: /* MUTANT (rep_op) */  if (len <= 4 * kwset->mind)
4315: /* MUTANT (rep_op) */  if (len < 4 * kwset->mind)
4315: /* MUTANT (rep_op) */  if (len > 4 * kwset->mind)
4315: /* MUTANT (rep_op) */  if (len == 4 * kwset->mind)
4315: /* MUTANT (rep_op) */  if (len != 4 * kwset->mind)
4315: /* MUTANT (rep_const) */  if (len >= 0 * kwset->mind)
4315: /* MUTANT (rep_const) */  if (len >= 1 * kwset->mind)
4315: /* MUTANT (rep_const) */  if (len >= -1 * kwset->mind)
4315: /* MUTANT (rep_const) */  if (len >= ((4)+1) * kwset->mind)
4315: /* MUTANT (rep_const) */  if (len >= ((4)-1) * kwset->mind)
4315: /* MUTANT (negate) */  if(! (len >= 4 * kwset->mind))
4316: /* MUTANT (rep_const) */    qlim = lim - 0 * kwset->mind;
4316: /* MUTANT (rep_const) */    qlim = lim - 1 * kwset->mind;
4316: /* MUTANT (rep_const) */    qlim = lim - -1 * kwset->mind;
4316: /* MUTANT (rep_const) */    qlim = lim - ((4)+1) * kwset->mind;
4316: /* MUTANT (rep_const) */    qlim = lim - ((4)-1) * kwset->mind;
4318: /* MUTANT (rep_const) */    qlim = 1;
4318: /* MUTANT (rep_const) */    qlim = -1;
4320: /* MUTANT (rep_op) */  while (lim - end <= d)
4320: /* MUTANT (rep_op) */  while (lim - end < d)
4320: /* MUTANT (rep_op) */  while (lim - end > d)
4320: /* MUTANT (rep_op) */  while (lim - end == d)
4320: /* MUTANT (rep_op) */  while (lim - end != d)
4320: /* MUTANT (negate) */  while(! (lim - end >= d))
4322: /* MUTANT (rep_op) */      if (qlim || end <= qlim)
4322: /* MUTANT (rep_op) */      if (qlim && end < qlim)
4322: /* MUTANT (rep_op) */      if (qlim && end > qlim)
4322: /* MUTANT (rep_op) */      if (qlim && end >= qlim)
4322: /* MUTANT (rep_op) */      if (qlim && end == qlim)
4322: /* MUTANT (rep_op) */      if (qlim && end != qlim)
4322: /* MUTANT (negate) */      if(! (qlim && end <= qlim))
4324: /* MUTANT (del_stmt) */ /* 	  end += d - 1; */ 
4324: /* MUTANT (rep_op) */	  end -= d - 1;
4324: /* MUTANT (rep_op) */	  end *= d - 1;
4324: /* MUTANT (rep_op) */	  end %= d - 1;
4324: /* MUTANT (rep_const) */	  end += d - 0;
4324: /* MUTANT (rep_const) */	  end += d - -1;
4324: /* MUTANT (rep_const) */	  end += d - ((1)+1);
4325: /* MUTANT (rep_op) */	  while ((d = delta[c = *end]) || end < qlim)
4325: /* MUTANT (rep_op) */	  while ((d = delta[c = *end]) && end <= qlim)
4325: /* MUTANT (rep_op) */	  while ((d = delta[c = *end]) && end > qlim)
4325: /* MUTANT (rep_op) */	  while ((d = delta[c = *end]) && end >= qlim)
4325: /* MUTANT (rep_op) */	  while ((d = delta[c = *end]) && end == qlim)
4325: /* MUTANT (rep_op) */	  while ((d = delta[c = *end]) && end != qlim)
4325: /* MUTANT (negate) */	  while(! ((d = delta[c = *end]) && end < qlim))
4327: /* MUTANT (del_stmt) */ /* 	      end += d; */ 
4327: /* MUTANT (rep_op) */	      end -= d;
4327: /* MUTANT (rep_op) */	      end *= d;
4327: /* MUTANT (rep_op) */	      end %= d;
4328: /* MUTANT (del_stmt) */ /* 	      end += delta[(unsigned char) *end]; */ 
4328: /* MUTANT (rep_op) */	      end -= delta[(unsigned char) *end];
4328: /* MUTANT (rep_op) */	      end *= delta[(unsigned char) *end];
4328: /* MUTANT (rep_op) */	      end %= delta[(unsigned char) *end];
4329: /* MUTANT (del_stmt) */ /* 	      end += delta[(unsigned char) *end]; */ 
4329: /* MUTANT (rep_op) */	      end -= delta[(unsigned char) *end];
4329: /* MUTANT (rep_op) */	      end *= delta[(unsigned char) *end];
4329: /* MUTANT (rep_op) */	      end %= delta[(unsigned char) *end];
4331: /* MUTANT (rep_op) */	  --end;
4334: /* MUTANT (rep_op) */	d = delta[c = (end -= d)[-1]];
4334: /* MUTANT (rep_op) */	d = delta[c = (end *= d)[-1]];
4334: /* MUTANT (rep_op) */	d = delta[c = (end %= d)[-1]];
4334: /* MUTANT (rep_const) */	d = delta[c = (end += d)[0]];
4334: /* MUTANT (rep_const) */	d = delta[c = (end += d)[1]];
4334: /* MUTANT (rep_const) */	d = delta[c = (end += d)[((-1)+1)]];
4334: /* MUTANT (rep_const) */	d = delta[c = (end += d)[((-1)-1)]];
4335: /* MUTANT (negate) */      if(! (d))
4337: /* MUTANT (del_stmt) */ /*       beg = end - 1; */ 
4337: /* MUTANT (rep_const) */      beg = end - 0;
4337: /* MUTANT (rep_const) */      beg = end - -1;
4337: /* MUTANT (rep_const) */      beg = end - ((1)+1);
4338: /* MUTANT (del_stmt) */ /*       trie = next[c]; */ 
4339: /* MUTANT (negate) */      if(! (trie->accepting))
4341: /* MUTANT (del_stmt) */ /* 	  mch = beg; */ 
4342: /* MUTANT (del_stmt) */ /* 	  accept = trie; */ 
4345: /* MUTANT (rep_op) */      while (beg <= text)
4345: /* MUTANT (rep_op) */      while (beg < text)
4345: /* MUTANT (rep_op) */      while (beg >= text)
4345: /* MUTANT (rep_op) */      while (beg == text)
4345: /* MUTANT (rep_op) */      while (beg != text)
4345: /* MUTANT (negate) */      while(! (beg > text))
4347: /* MUTANT (del_stmt) */ /* 	  c = trans ? trans[(unsigned char) *--beg] : *--beg; */ 
4348: /* MUTANT (del_stmt) */ /* 	  tree = trie->links; */ 
4349: /* MUTANT (rep_op) */	  while (tree || c != tree->label)
4349: /* MUTANT (rep_op) */	  while (tree && c == tree->label)
4349: /* MUTANT (negate) */	  while(! (tree && c != tree->label))
4350: /* MUTANT (rep_op) */	    if (c <= tree->label)
4350: /* MUTANT (rep_op) */	    if (c > tree->label)
4350: /* MUTANT (rep_op) */	    if (c >= tree->label)
4350: /* MUTANT (rep_op) */	    if (c == tree->label)
4350: /* MUTANT (rep_op) */	    if (c != tree->label)
4350: /* MUTANT (negate) */	    if(! (c < tree->label))
4354: /* MUTANT (negate) */	  if(! (tree))
4356: /* MUTANT (del_stmt) */ /* 	      trie = tree->trie; */ 
4357: /* MUTANT (negate) */	      if(! (trie->accepting))
4359: /* MUTANT (del_stmt) */ /* 		  mch = beg; */ 
4360: /* MUTANT (del_stmt) */ /* 		  accept = trie; */ 
4365: /* MUTANT (del_stmt) */ /* 	  d = trie->shift; */ 
4367: /* MUTANT (negate) */      if(! (mch))
4370: /* MUTANT (rep_const) */  return 1;
4370: /* MUTANT (rep_const) */  return -1;
4376: /* MUTANT (rep_op) */  if (lim - mch <= kwset->maxd)
4376: /* MUTANT (rep_op) */  if (lim - mch < kwset->maxd)
4376: /* MUTANT (rep_op) */  if (lim - mch >= kwset->maxd)
4376: /* MUTANT (rep_op) */  if (lim - mch == kwset->maxd)
4376: /* MUTANT (rep_op) */  if (lim - mch != kwset->maxd)
4376: /* MUTANT (negate) */  if(! (lim - mch > kwset->maxd))
4377: /* MUTANT (rep_op) */    lim = mch - kwset->maxd;
4377: /* MUTANT (rep_op) */    lim = mch * kwset->maxd;
4377: /* MUTANT (rep_op) */    lim = mch % kwset->maxd;
4378: /* MUTANT (del_stmt) */ /*   lmch = 0; */ 
4378: /* MUTANT (rep_const) */  lmch = 1;
4378: /* MUTANT (rep_const) */  lmch = -1;
4379: /* MUTANT (del_stmt) */ /*   d = 1; */ 
4379: /* MUTANT (rep_const) */  d = 0;
4379: /* MUTANT (rep_const) */  d = -1;
4379: /* MUTANT (rep_const) */  d = ((1)+1);
4380: /* MUTANT (rep_op) */  while (lim - end <= d)
4380: /* MUTANT (rep_op) */  while (lim - end < d)
4380: /* MUTANT (rep_op) */  while (lim - end > d)
4380: /* MUTANT (rep_op) */  while (lim - end == d)
4380: /* MUTANT (rep_op) */  while (lim - end != d)
4380: /* MUTANT (negate) */  while(! (lim - end >= d))
4382: /* MUTANT (rep_op) */      if ((d = delta[c = (end -= d)[-1]]) != 0)
4382: /* MUTANT (rep_op) */      if ((d = delta[c = (end *= d)[-1]]) != 0)
4382: /* MUTANT (rep_op) */      if ((d = delta[c = (end %= d)[-1]]) != 0)
4382: /* MUTANT (rep_op) */      if ((d = delta[c = (end += d)[-1]]) == 0)
4382: /* MUTANT (rep_const) */      if ((d = delta[c = (end += d)[0]]) != 0)
4382: /* MUTANT (rep_const) */      if ((d = delta[c = (end += d)[1]]) != 0)
4382: /* MUTANT (rep_const) */      if ((d = delta[c = (end += d)[((-1)+1)]]) != 0)
4382: /* MUTANT (rep_const) */      if ((d = delta[c = (end += d)[((-1)-1)]]) != 0)
4382: /* MUTANT (rep_const) */      if ((d = delta[c = (end += d)[-1]]) != 1)
4382: /* MUTANT (rep_const) */      if ((d = delta[c = (end += d)[-1]]) != -1)
4382: /* MUTANT (negate) */      if(! ((d = delta[c = (end += d)[-1]]) != 0))
4384: /* MUTANT (del_stmt) */ /*       beg = end - 1; */ 
4384: /* MUTANT (rep_const) */      beg = end - 0;
4384: /* MUTANT (rep_const) */      beg = end - -1;
4384: /* MUTANT (rep_const) */      beg = end - ((1)+1);
4385: /* MUTANT (negate) */      if(! (!(trie = next[c])))
4387: /* MUTANT (del_stmt) */ /* 	  d = 1; */ 
4387: /* MUTANT (rep_const) */	  d = 0;
4387: /* MUTANT (rep_const) */	  d = -1;
4387: /* MUTANT (rep_const) */	  d = ((1)+1);
4388: /* MUTANT (del_stmt) */ /* 	  continue; */ 
4390: /* MUTANT (rep_op) */      if (trie->accepting || beg <= mch)
4390: /* MUTANT (rep_op) */      if (trie->accepting && beg < mch)
4390: /* MUTANT (rep_op) */      if (trie->accepting && beg > mch)
4390: /* MUTANT (rep_op) */      if (trie->accepting && beg >= mch)
4390: /* MUTANT (rep_op) */      if (trie->accepting && beg == mch)
4390: /* MUTANT (rep_op) */      if (trie->accepting && beg != mch)
4390: /* MUTANT (negate) */      if(! (trie->accepting && beg <= mch))
4392: /* MUTANT (del_stmt) */ /* 	  lmch = beg; */ 
4393: /* MUTANT (del_stmt) */ /* 	  accept = trie; */ 
4396: /* MUTANT (rep_op) */      while (beg <= text)
4396: /* MUTANT (rep_op) */      while (beg < text)
4396: /* MUTANT (rep_op) */      while (beg >= text)
4396: /* MUTANT (rep_op) */      while (beg == text)
4396: /* MUTANT (rep_op) */      while (beg != text)
4396: /* MUTANT (negate) */      while(! (beg > text))
4398: /* MUTANT (del_stmt) */ /* 	  c = trans ? trans[(unsigned char) *--beg] : *--beg; */ 
4399: /* MUTANT (del_stmt) */ /* 	  tree = trie->links; */ 
4400: /* MUTANT (rep_op) */	  while (tree || c != tree->label)
4400: /* MUTANT (rep_op) */	  while (tree && c == tree->label)
4400: /* MUTANT (negate) */	  while(! (tree && c != tree->label))
4401: /* MUTANT (rep_op) */	    if (c <= tree->label)
4401: /* MUTANT (rep_op) */	    if (c > tree->label)
4401: /* MUTANT (rep_op) */	    if (c >= tree->label)
4401: /* MUTANT (rep_op) */	    if (c == tree->label)
4401: /* MUTANT (rep_op) */	    if (c != tree->label)
4401: /* MUTANT (negate) */	    if(! (c < tree->label))
4405: /* MUTANT (negate) */	  if(! (tree))
4407: /* MUTANT (del_stmt) */ /* 	      trie = tree->trie; */ 
4408: /* MUTANT (rep_op) */	      if (trie->accepting || beg <= mch)
4408: /* MUTANT (rep_op) */	      if (trie->accepting && beg < mch)
4408: /* MUTANT (rep_op) */	      if (trie->accepting && beg > mch)
4408: /* MUTANT (rep_op) */	      if (trie->accepting && beg >= mch)
4408: /* MUTANT (rep_op) */	      if (trie->accepting && beg == mch)
4408: /* MUTANT (rep_op) */	      if (trie->accepting && beg != mch)
4408: /* MUTANT (negate) */	      if(! (trie->accepting && beg <= mch))
4410: /* MUTANT (del_stmt) */ /* 		  lmch = beg; */ 
4411: /* MUTANT (del_stmt) */ /* 		  accept = trie; */ 
4416: /* MUTANT (del_stmt) */ /* 	  d = trie->shift; */ 
4418: /* MUTANT (negate) */      if(! (lmch))
4420: /* MUTANT (del_stmt) */ /* 	  mch = lmch; */ 
4421: /* MUTANT (del_stmt) */ /* 	  goto match; */ 
4423: /* MUTANT (negate) */      if(! (!d))
4424: /* MUTANT (rep_const) */	d = 0;
4424: /* MUTANT (rep_const) */	d = -1;
4424: /* MUTANT (rep_const) */	d = ((1)+1);
4427: /* MUTANT (negate) */  if(! (kwsmatch))
4429: /* MUTANT (del_stmt) */ /*       kwsmatch->index = accept->accepting / 2; */ 
4429: /* MUTANT (rep_const) */      kwsmatch->index = accept->accepting / 0;
4429: /* MUTANT (rep_const) */      kwsmatch->index = accept->accepting / 1;
4429: /* MUTANT (rep_const) */      kwsmatch->index = accept->accepting / -1;
4429: /* MUTANT (rep_const) */      kwsmatch->index = accept->accepting / ((2)+1);
4429: /* MUTANT (rep_const) */      kwsmatch->index = accept->accepting / ((2)-1);
4430: /* MUTANT (del_stmt) */ /*       kwsmatch->beg[0] = mch; */ 
4430: /* MUTANT (rep_const) */      kwsmatch->beg[1] = mch;
4430: /* MUTANT (rep_const) */      kwsmatch->beg[-1] = mch;
4431: /* MUTANT (del_stmt) */ /*       kwsmatch->size[0] = accept->depth; */ 
4431: /* MUTANT (rep_const) */      kwsmatch->size[1] = accept->depth;
4431: /* MUTANT (rep_const) */      kwsmatch->size[-1] = accept->depth;
4446: /* MUTANT (del_stmt) */ /*      char *text; */ 
4447: /* MUTANT (del_stmt) */ /*      size_t size; */ 
4448: /* MUTANT (del_stmt) */ /*      struct kwsmatch *kwsmatch; */ 
4450: /* MUTANT (del_stmt) */ /*   struct kwset *kwset; */ 
4451: /* MUTANT (del_stmt) */ /*   char *ret; */ 
4453: /* MUTANT (del_stmt) */ /*   kwset = (struct kwset *) kws; */ 
4454: /* MUTANT (rep_op) */  if (kwset->words != 1 && kwset->trans == 0)
4454: /* MUTANT (rep_op) */  if (kwset->words == 1 || kwset->trans == 0)
4454: /* MUTANT (rep_op) */  if (kwset->words == 1 && kwset->trans != 0)
4454: /* MUTANT (rep_const) */  if (kwset->words == 0 && kwset->trans == 0)
4454: /* MUTANT (rep_const) */  if (kwset->words == -1 && kwset->trans == 0)
4454: /* MUTANT (rep_const) */  if (kwset->words == ((1)+1) && kwset->trans == 0)
4454: /* MUTANT (rep_const) */  if (kwset->words == 1 && kwset->trans == 1)
4454: /* MUTANT (rep_const) */  if (kwset->words == 1 && kwset->trans == -1)
4454: /* MUTANT (negate) */  if(! (kwset->words == 1 && kwset->trans == 0))
4456: /* MUTANT (del_stmt) */ /*       ret = bmexec(kws, text, size); */ 
4457: /* MUTANT (rep_op) */      if (kwsmatch == 0 && ret != 0)
4457: /* MUTANT (rep_op) */      if (kwsmatch != 0 || ret != 0)
4457: /* MUTANT (rep_op) */      if (kwsmatch != 0 && ret == 0)
4457: /* MUTANT (rep_const) */      if (kwsmatch != 1 && ret != 0)
4457: /* MUTANT (rep_const) */      if (kwsmatch != -1 && ret != 0)
4457: /* MUTANT (rep_const) */      if (kwsmatch != 0 && ret != 1)
4457: /* MUTANT (rep_const) */      if (kwsmatch != 0 && ret != -1)
4457: /* MUTANT (negate) */      if(! (kwsmatch != 0 && ret != 0))
4459: /* MUTANT (del_stmt) */ /* 	  kwsmatch->index = 0; */ 
4459: /* MUTANT (rep_const) */	  kwsmatch->index = 1;
4459: /* MUTANT (rep_const) */	  kwsmatch->index = -1;
4460: /* MUTANT (del_stmt) */ /* 	  kwsmatch->beg[0] = ret; */ 
4460: /* MUTANT (rep_const) */	  kwsmatch->beg[1] = ret;
4460: /* MUTANT (rep_const) */	  kwsmatch->beg[-1] = ret;
4461: /* MUTANT (del_stmt) */ /* 	  kwsmatch->size[0] = kwset->mind; */ 
4461: /* MUTANT (rep_const) */	  kwsmatch->size[1] = kwset->mind;
4461: /* MUTANT (rep_const) */	  kwsmatch->size[-1] = kwset->mind;
4474: /* MUTANT (del_stmt) */ /*   struct kwset *kwset; */ 
4476: /* MUTANT (del_stmt) */ /*   kwset = (struct kwset *) kws; */ 
4477: /* MUTANT (del_stmt) */ /*   obstack_free(&kwset->obstack, 0); */ 
4477: /* MUTANT (rep_const) */  obstack_free(&kwset->obstack, 1);
4477: /* MUTANT (rep_const) */  obstack_free(&kwset->obstack, -1);
4478: /* MUTANT (del_stmt) */ /*   free(kws); */ 
4503: #if flag_config==1 /* MUTANT (rep_const) */
4503: #if flag_config==-1 /* MUTANT (rep_const) */
4505: #define flag_config 0 /* MUTANT (rep_const) */
4505: #define flag_config -1 /* MUTANT (rep_const) */
4505: #define flag_config ((1)+1) /* MUTANT (rep_const) */
4514: #define OBSTACK_INTERFACE_VERSION 0 /* MUTANT (rep_const) */
4514: #define OBSTACK_INTERFACE_VERSION -1 /* MUTANT (rep_const) */
4514: #define OBSTACK_INTERFACE_VERSION ((1)+1) /* MUTANT (rep_const) */
4526: #if !defined (_LIBC) && defined (__GNU_LIBRARY__) && __GNU_LIBRARY__ > 0 /* MUTANT (rep_const) */
4526: #if !defined (_LIBC) && defined (__GNU_LIBRARY__) && __GNU_LIBRARY__ > -1 /* MUTANT (rep_const) */
4526: #if !defined (_LIBC) && defined (__GNU_LIBRARY__) && __GNU_LIBRARY__ > ((1)+1) /* MUTANT (rep_const) */
4528: #define flag_gnuversions 0 /* MUTANT (rep_const) */
4528: #define flag_gnuversions -1 /* MUTANT (rep_const) */
4528: #define flag_gnuversions ((1)+1) /* MUTANT (rep_const) */
4547: /* MUTANT (rep_const) */  ((PTR_INT_TYPE) ((char *) &((struct fooalign *) 1)->d - (char *) 0))
4547: /* MUTANT (rep_const) */  ((PTR_INT_TYPE) ((char *) &((struct fooalign *) -1)->d - (char *) 0))
4547: /* MUTANT (rep_const) */  ((PTR_INT_TYPE) ((char *) &((struct fooalign *) 0)->d - (char *) 1))
4547: /* MUTANT (rep_const) */  ((PTR_INT_TYPE) ((char *) &((struct fooalign *) 0)->d - (char *) -1))
4569: /* MUTANT (del_stmt) */ /* void (*obstack_alloc_failed_handler) (void) = print_and_abort; */ 
4572: /* MUTANT (del_stmt) */ /* void (*obstack_alloc_failed_handler) () = print_and_abort; */ 
4577: #if flag_stdlib==1 /* MUTANT (rep_const) */
4577: #if flag_stdlib==-1 /* MUTANT (rep_const) */
4579: #define flag_stdlib 0 /* MUTANT (rep_const) */
4579: #define flag_stdlib -1 /* MUTANT (rep_const) */
4579: #define flag_stdlib ((1)+1) /* MUTANT (rep_const) */
4583: #define EXIT_FAILURE 0 /* MUTANT (rep_const) */
4583: #define EXIT_FAILURE -1 /* MUTANT (rep_const) */
4583: #define EXIT_FAILURE ((1)+1) /* MUTANT (rep_const) */
4590: /* MUTANT (del_stmt) */ /* struct obstack *_obstack; */ 
4606: /* MUTANT (negate) */    if(! ((h) -> use_extra_arg)) \
4610: /* MUTANT (rep_const) */  } while (1)
4610: /* MUTANT (rep_const) */  } while (-1)
4610: /* MUTANT (negate) */  } while(! (0))
4615: /* MUTANT (rep_const) */  } while (1)
4615: /* MUTANT (rep_const) */  } while (-1)
4615: /* MUTANT (negate) */  } while(! (0))
4634: /* MUTANT (negate) */    if(! ((h) -> use_extra_arg)) \
4638: /* MUTANT (rep_const) */  } while (1)
4638: /* MUTANT (rep_const) */  } while (-1)
4638: /* MUTANT (negate) */  } while(! (0))
4654: /* MUTANT (del_stmt) */ /*      int size; */ 
4655: /* MUTANT (del_stmt) */ /*      int alignment; */ 
4658: /* MUTANT (del_stmt) */ /*      void (*freefun) (void *); */ 
4661: /* MUTANT (del_stmt) */ /*      void (*freefun) (); */ 
4664: /* MUTANT (del_stmt) */ /*   register struct _obstack_chunk *chunk; */  /* points to new chunk */
4666: /* MUTANT (rep_op) */  if (alignment != 0)
4666: /* MUTANT (rep_const) */  if (alignment == 1)
4666: /* MUTANT (rep_const) */  if (alignment == -1)
4666: /* MUTANT (negate) */  if(! (alignment == 0))
4668: /* MUTANT (rep_op) */  if (size != 0)
4668: /* MUTANT (rep_const) */  if (size == 1)
4668: /* MUTANT (rep_const) */  if (size == -1)
4668: /* MUTANT (negate) */  if(! (size == 0))
4679: /* MUTANT (rep_op) */      int extra = ((((12 - DEFAULT_ROUNDING - 1) & ~(DEFAULT_ROUNDING - 1))
4679: /* MUTANT (rep_op) */      int extra = ((((12 * DEFAULT_ROUNDING - 1) & ~(DEFAULT_ROUNDING - 1))
4679: /* MUTANT (rep_op) */      int extra = ((((12 % DEFAULT_ROUNDING - 1) & ~(DEFAULT_ROUNDING - 1))
4679: /* MUTANT (rep_const) */      int extra = ((((0 + DEFAULT_ROUNDING - 1) & ~(DEFAULT_ROUNDING - 1))
4679: /* MUTANT (rep_const) */      int extra = ((((1 + DEFAULT_ROUNDING - 1) & ~(DEFAULT_ROUNDING - 1))
4679: /* MUTANT (rep_const) */      int extra = ((((-1 + DEFAULT_ROUNDING - 1) & ~(DEFAULT_ROUNDING - 1))
4679: /* MUTANT (rep_const) */      int extra = ((((((12)+1) + DEFAULT_ROUNDING - 1) & ~(DEFAULT_ROUNDING - 1))
4679: /* MUTANT (rep_const) */      int extra = ((((((12)-1) + DEFAULT_ROUNDING - 1) & ~(DEFAULT_ROUNDING - 1))
4679: /* MUTANT (rep_const) */      int extra = ((((12 + DEFAULT_ROUNDING - 0) & ~(DEFAULT_ROUNDING - 1))
4679: /* MUTANT (rep_const) */      int extra = ((((12 + DEFAULT_ROUNDING - -1) & ~(DEFAULT_ROUNDING - 1))
4679: /* MUTANT (rep_const) */      int extra = ((((12 + DEFAULT_ROUNDING - ((1)+1)) & ~(DEFAULT_ROUNDING - 1))
4679: /* MUTANT (rep_const) */      int extra = ((((12 + DEFAULT_ROUNDING - 1) & ~(DEFAULT_ROUNDING - 0))
4679: /* MUTANT (rep_const) */      int extra = ((((12 + DEFAULT_ROUNDING - 1) & ~(DEFAULT_ROUNDING - -1))
4679: /* MUTANT (rep_const) */      int extra = ((((12 + DEFAULT_ROUNDING - 1) & ~(DEFAULT_ROUNDING - ((1)+1)))
4680: /* MUTANT (rep_op) */		    - 4 + DEFAULT_ROUNDING - 1)
4680: /* MUTANT (rep_op) */		    * 4 + DEFAULT_ROUNDING - 1)
4680: /* MUTANT (rep_op) */		    % 4 + DEFAULT_ROUNDING - 1)
4680: /* MUTANT (rep_op) */		    + 4 - DEFAULT_ROUNDING - 1)
4680: /* MUTANT (rep_op) */		    + 4 * DEFAULT_ROUNDING - 1)
4680: /* MUTANT (rep_op) */		    + 4 % DEFAULT_ROUNDING - 1)
4680: /* MUTANT (rep_const) */		    + 0 + DEFAULT_ROUNDING - 1)
4680: /* MUTANT (rep_const) */		    + 1 + DEFAULT_ROUNDING - 1)
4680: /* MUTANT (rep_const) */		    + -1 + DEFAULT_ROUNDING - 1)
4680: /* MUTANT (rep_const) */		    + ((4)+1) + DEFAULT_ROUNDING - 1)
4680: /* MUTANT (rep_const) */		    + ((4)-1) + DEFAULT_ROUNDING - 1)
4680: /* MUTANT (rep_const) */		    + 4 + DEFAULT_ROUNDING - 0)
4680: /* MUTANT (rep_const) */		    + 4 + DEFAULT_ROUNDING - -1)
4680: /* MUTANT (rep_const) */		    + 4 + DEFAULT_ROUNDING - ((1)+1))
4681: /* MUTANT (rep_const) */		   & ~(DEFAULT_ROUNDING - 0));
4681: /* MUTANT (rep_const) */		   & ~(DEFAULT_ROUNDING - -1));
4681: /* MUTANT (rep_const) */		   & ~(DEFAULT_ROUNDING - ((1)+1)));
4682: /* MUTANT (del_stmt) */ /*       size = 4096 - extra; */ 
4682: /* MUTANT (rep_const) */      size = 0 - extra;
4682: /* MUTANT (rep_const) */      size = 1 - extra;
4682: /* MUTANT (rep_const) */      size = -1 - extra;
4682: /* MUTANT (rep_const) */      size = ((4096)+1) - extra;
4682: /* MUTANT (rep_const) */      size = ((4096)-1) - extra;
4687: /* MUTANT (del_stmt) */ /*   h->freefun = (void (*) (void *, struct _obstack_chunk *)) freefun; */ 
4690: /* MUTANT (del_stmt) */ /*   h->freefun = freefun; */ 
4693: /* MUTANT (del_stmt) */ /*   h->alignment_mask = alignment - 1; */ 
4693: /* MUTANT (rep_const) */  h->alignment_mask = alignment - 0;
4693: /* MUTANT (rep_const) */  h->alignment_mask = alignment - -1;
4693: /* MUTANT (rep_const) */  h->alignment_mask = alignment - ((1)+1);
4694: /* MUTANT (del_stmt) */ /*   h->use_extra_arg = 0; */ 
4694: /* MUTANT (rep_const) */  h->use_extra_arg = 1;
4694: /* MUTANT (rep_const) */  h->use_extra_arg = -1;
4696: /* MUTANT (del_stmt) */ /*   chunk = h->chunk = CALL_CHUNKFUN (h, h -> chunk_size); */ 
4697: /* MUTANT (negate) */  if(! (!chunk))
4699: /* MUTANT (del_stmt) */ /*   h->next_free = h->object_base = chunk->contents; */ 
4701: /* MUTANT (rep_op) */    = (char *) chunk - h->chunk_size;
4701: /* MUTANT (rep_op) */    = (char *) chunk * h->chunk_size;
4701: /* MUTANT (rep_op) */    = (char *) chunk % h->chunk_size;
4702: /* MUTANT (del_stmt) */ /*   chunk->prev = 0; */ 
4702: /* MUTANT (rep_const) */  chunk->prev = 1;
4702: /* MUTANT (rep_const) */  chunk->prev = -1;
4704: /* MUTANT (del_stmt) */ /*   h->maybe_empty_object = 0; */ 
4704: /* MUTANT (rep_const) */  h->maybe_empty_object = 1;
4704: /* MUTANT (rep_const) */  h->maybe_empty_object = -1;
4705: /* MUTANT (del_stmt) */ /*   h->alloc_failed = 0; */ 
4705: /* MUTANT (rep_const) */  h->alloc_failed = 1;
4705: /* MUTANT (rep_const) */  h->alloc_failed = -1;
4706: /* MUTANT (del_stmt) */ /*   return 1; */ 
4706: /* MUTANT (rep_const) */  return 0;
4706: /* MUTANT (rep_const) */  return -1;
4706: /* MUTANT (rep_const) */  return ((1)+1);
4712: /* MUTANT (del_stmt) */ /*      int size; */ 
4713: /* MUTANT (del_stmt) */ /*      int alignment; */ 
4716: /* MUTANT (del_stmt) */ /*      void (*freefun) (POINTER, POINTER); */ 
4719: /* MUTANT (del_stmt) */ /*      void (*freefun) (); */ 
4723: /* MUTANT (del_stmt) */ /*   register struct _obstack_chunk *chunk; */  /* points to new chunk */
4725: /* MUTANT (rep_op) */  if (alignment != 0)
4725: /* MUTANT (rep_const) */  if (alignment == 1)
4725: /* MUTANT (rep_const) */  if (alignment == -1)
4725: /* MUTANT (negate) */  if(! (alignment == 0))
4727: /* MUTANT (rep_op) */  if (size != 0)
4727: /* MUTANT (rep_const) */  if (size == 1)
4727: /* MUTANT (rep_const) */  if (size == -1)
4727: /* MUTANT (negate) */  if(! (size == 0))
4738: /* MUTANT (rep_op) */      int extra = ((((12 - DEFAULT_ROUNDING - 1) & ~(DEFAULT_ROUNDING - 1))
4738: /* MUTANT (rep_op) */      int extra = ((((12 * DEFAULT_ROUNDING - 1) & ~(DEFAULT_ROUNDING - 1))
4738: /* MUTANT (rep_op) */      int extra = ((((12 % DEFAULT_ROUNDING - 1) & ~(DEFAULT_ROUNDING - 1))
4738: /* MUTANT (rep_const) */      int extra = ((((0 + DEFAULT_ROUNDING - 1) & ~(DEFAULT_ROUNDING - 1))
4738: /* MUTANT (rep_const) */      int extra = ((((1 + DEFAULT_ROUNDING - 1) & ~(DEFAULT_ROUNDING - 1))
4738: /* MUTANT (rep_const) */      int extra = ((((-1 + DEFAULT_ROUNDING - 1) & ~(DEFAULT_ROUNDING - 1))
4738: /* MUTANT (rep_const) */      int extra = ((((((12)+1) + DEFAULT_ROUNDING - 1) & ~(DEFAULT_ROUNDING - 1))
4738: /* MUTANT (rep_const) */      int extra = ((((((12)-1) + DEFAULT_ROUNDING - 1) & ~(DEFAULT_ROUNDING - 1))
4738: /* MUTANT (rep_const) */      int extra = ((((12 + DEFAULT_ROUNDING - 0) & ~(DEFAULT_ROUNDING - 1))
4738: /* MUTANT (rep_const) */      int extra = ((((12 + DEFAULT_ROUNDING - -1) & ~(DEFAULT_ROUNDING - 1))
4738: /* MUTANT (rep_const) */      int extra = ((((12 + DEFAULT_ROUNDING - ((1)+1)) & ~(DEFAULT_ROUNDING - 1))
4738: /* MUTANT (rep_const) */      int extra = ((((12 + DEFAULT_ROUNDING - 1) & ~(DEFAULT_ROUNDING - 0))
4738: /* MUTANT (rep_const) */      int extra = ((((12 + DEFAULT_ROUNDING - 1) & ~(DEFAULT_ROUNDING - -1))
4738: /* MUTANT (rep_const) */      int extra = ((((12 + DEFAULT_ROUNDING - 1) & ~(DEFAULT_ROUNDING - ((1)+1)))
4739: /* MUTANT (rep_op) */		    - 4 + DEFAULT_ROUNDING - 1)
4739: /* MUTANT (rep_op) */		    * 4 + DEFAULT_ROUNDING - 1)
4739: /* MUTANT (rep_op) */		    % 4 + DEFAULT_ROUNDING - 1)
4739: /* MUTANT (rep_op) */		    + 4 - DEFAULT_ROUNDING - 1)
4739: /* MUTANT (rep_op) */		    + 4 * DEFAULT_ROUNDING - 1)
4739: /* MUTANT (rep_op) */		    + 4 % DEFAULT_ROUNDING - 1)
4739: /* MUTANT (rep_const) */		    + 0 + DEFAULT_ROUNDING - 1)
4739: /* MUTANT (rep_const) */		    + 1 + DEFAULT_ROUNDING - 1)
4739: /* MUTANT (rep_const) */		    + -1 + DEFAULT_ROUNDING - 1)
4739: /* MUTANT (rep_const) */		    + ((4)+1) + DEFAULT_ROUNDING - 1)
4739: /* MUTANT (rep_const) */		    + ((4)-1) + DEFAULT_ROUNDING - 1)
4739: /* MUTANT (rep_const) */		    + 4 + DEFAULT_ROUNDING - 0)
4739: /* MUTANT (rep_const) */		    + 4 + DEFAULT_ROUNDING - -1)
4739: /* MUTANT (rep_const) */		    + 4 + DEFAULT_ROUNDING - ((1)+1))
4740: /* MUTANT (rep_const) */		   & ~(DEFAULT_ROUNDING - 0));
4740: /* MUTANT (rep_const) */		   & ~(DEFAULT_ROUNDING - -1));
4740: /* MUTANT (rep_const) */		   & ~(DEFAULT_ROUNDING - ((1)+1)));
4741: /* MUTANT (del_stmt) */ /*       size = 4096 - extra; */ 
4741: /* MUTANT (rep_const) */      size = 0 - extra;
4741: /* MUTANT (rep_const) */      size = 1 - extra;
4741: /* MUTANT (rep_const) */      size = -1 - extra;
4741: /* MUTANT (rep_const) */      size = ((4096)+1) - extra;
4741: /* MUTANT (rep_const) */      size = ((4096)-1) - extra;
4746: /* MUTANT (del_stmt) */ /*   h->freefun = (void (*) (void *, struct _obstack_chunk *)) freefun; */ 
4749: /* MUTANT (del_stmt) */ /*   h->freefun = freefun; */ 
4752: /* MUTANT (del_stmt) */ /*   h->alignment_mask = alignment - 1; */ 
4752: /* MUTANT (rep_const) */  h->alignment_mask = alignment - 0;
4752: /* MUTANT (rep_const) */  h->alignment_mask = alignment - -1;
4752: /* MUTANT (rep_const) */  h->alignment_mask = alignment - ((1)+1);
4753: /* MUTANT (del_stmt) */ /*   h->extra_arg = arg; */ 
4754: /* MUTANT (del_stmt) */ /*   h->use_extra_arg = 1; */ 
4754: /* MUTANT (rep_const) */  h->use_extra_arg = 0;
4754: /* MUTANT (rep_const) */  h->use_extra_arg = -1;
4754: /* MUTANT (rep_const) */  h->use_extra_arg = ((1)+1);
4756: /* MUTANT (del_stmt) */ /*   chunk = h->chunk = CALL_CHUNKFUN (h, h -> chunk_size); */ 
4757: /* MUTANT (negate) */  if(! (!chunk))
4759: /* MUTANT (del_stmt) */ /*   h->next_free = h->object_base = chunk->contents; */ 
4761: /* MUTANT (rep_op) */    = (char *) chunk - h->chunk_size;
4761: /* MUTANT (rep_op) */    = (char *) chunk * h->chunk_size;
4761: /* MUTANT (rep_op) */    = (char *) chunk % h->chunk_size;
4762: /* MUTANT (del_stmt) */ /*   chunk->prev = 0; */ 
4762: /* MUTANT (rep_const) */  chunk->prev = 1;
4762: /* MUTANT (rep_const) */  chunk->prev = -1;
4764: /* MUTANT (del_stmt) */ /*   h->maybe_empty_object = 0; */ 
4764: /* MUTANT (rep_const) */  h->maybe_empty_object = 1;
4764: /* MUTANT (rep_const) */  h->maybe_empty_object = -1;
4765: /* MUTANT (del_stmt) */ /*   h->alloc_failed = 0; */ 
4765: /* MUTANT (rep_const) */  h->alloc_failed = 1;
4765: /* MUTANT (rep_const) */  h->alloc_failed = -1;
4766: /* MUTANT (del_stmt) */ /*   return 1; */ 
4766: /* MUTANT (rep_const) */  return 0;
4766: /* MUTANT (rep_const) */  return -1;
4766: /* MUTANT (rep_const) */  return ((1)+1);
4778: /* MUTANT (del_stmt) */ /*      int length; */ 
4780: /* MUTANT (del_stmt) */ /*   register struct _obstack_chunk *old_chunk = h->chunk; */ 
4781: /* MUTANT (del_stmt) */ /*   register struct _obstack_chunk *new_chunk; */ 
4782: /* MUTANT (del_stmt) */ /*   register long	new_size; */ 
4783: /* MUTANT (del_stmt) */ /*   register long obj_size = h->next_free - h->object_base; */ 
4784: /* MUTANT (del_stmt) */ /*   register long i; */ 
4785: /* MUTANT (del_stmt) */ /*   long already; */ 
4788: /* MUTANT (del_stmt) */ /*   new_size = (obj_size + length) + (obj_size >> 3) + 100; */ 
4788: /* MUTANT (rep_op) */  new_size = (obj_size - length) + (obj_size >> 3) + 100;
4788: /* MUTANT (rep_op) */  new_size = (obj_size * length) + (obj_size >> 3) + 100;
4788: /* MUTANT (rep_op) */  new_size = (obj_size % length) + (obj_size >> 3) + 100;
4788: /* MUTANT (rep_op) */  new_size = (obj_size + length) - (obj_size >> 3) + 100;
4788: /* MUTANT (rep_op) */  new_size = (obj_size + length) * (obj_size >> 3) + 100;
4788: /* MUTANT (rep_op) */  new_size = (obj_size + length) % (obj_size >> 3) + 100;
4788: /* MUTANT (rep_op) */  new_size = (obj_size + length) + (obj_size >> 3) - 100;
4788: /* MUTANT (rep_op) */  new_size = (obj_size + length) + (obj_size >> 3) * 100;
4788: /* MUTANT (rep_op) */  new_size = (obj_size + length) + (obj_size >> 3) % 100;
4788: /* MUTANT (rep_const) */  new_size = (obj_size + length) + (obj_size >> 0) + 100;
4788: /* MUTANT (rep_const) */  new_size = (obj_size + length) + (obj_size >> 1) + 100;
4788: /* MUTANT (rep_const) */  new_size = (obj_size + length) + (obj_size >> -1) + 100;
4788: /* MUTANT (rep_const) */  new_size = (obj_size + length) + (obj_size >> ((3)+1)) + 100;
4788: /* MUTANT (rep_const) */  new_size = (obj_size + length) + (obj_size >> ((3)-1)) + 100;
4788: /* MUTANT (rep_const) */  new_size = (obj_size + length) + (obj_size >> 3) + 0;
4788: /* MUTANT (rep_const) */  new_size = (obj_size + length) + (obj_size >> 3) + 1;
4788: /* MUTANT (rep_const) */  new_size = (obj_size + length) + (obj_size >> 3) + -1;
4788: /* MUTANT (rep_const) */  new_size = (obj_size + length) + (obj_size >> 3) + ((100)+1);
4788: /* MUTANT (rep_const) */  new_size = (obj_size + length) + (obj_size >> 3) + ((100)-1);
4789: /* MUTANT (rep_op) */  if (new_size <= h->chunk_size)
4789: /* MUTANT (rep_op) */  if (new_size > h->chunk_size)
4789: /* MUTANT (rep_op) */  if (new_size >= h->chunk_size)
4789: /* MUTANT (rep_op) */  if (new_size == h->chunk_size)
4789: /* MUTANT (rep_op) */  if (new_size != h->chunk_size)
4789: /* MUTANT (negate) */  if(! (new_size < h->chunk_size))
4793: /* MUTANT (del_stmt) */ /*   new_chunk = CALL_CHUNKFUN (h, new_size); */ 
4794: /* MUTANT (negate) */  if(! (!new_chunk))
4796: /* MUTANT (del_stmt) */ /*   h->chunk = new_chunk; */ 
4797: /* MUTANT (del_stmt) */ /*   new_chunk->prev = old_chunk; */ 
4798: /* MUTANT (del_stmt) */ /*   new_chunk->limit = h->chunk_limit = (char *) new_chunk + new_size; */ 
4798: /* MUTANT (rep_op) */  new_chunk->limit = h->chunk_limit = (char *) new_chunk - new_size;
4798: /* MUTANT (rep_op) */  new_chunk->limit = h->chunk_limit = (char *) new_chunk * new_size;
4798: /* MUTANT (rep_op) */  new_chunk->limit = h->chunk_limit = (char *) new_chunk % new_size;
4803: /* MUTANT (rep_op) */  if (h->alignment_mask - 1 >= DEFAULT_ALIGNMENT)
4803: /* MUTANT (rep_op) */  if (h->alignment_mask * 1 >= DEFAULT_ALIGNMENT)
4803: /* MUTANT (rep_op) */  if (h->alignment_mask % 1 >= DEFAULT_ALIGNMENT)
4803: /* MUTANT (rep_op) */  if (h->alignment_mask + 1 <= DEFAULT_ALIGNMENT)
4803: /* MUTANT (rep_op) */  if (h->alignment_mask + 1 < DEFAULT_ALIGNMENT)
4803: /* MUTANT (rep_op) */  if (h->alignment_mask + 1 > DEFAULT_ALIGNMENT)
4803: /* MUTANT (rep_op) */  if (h->alignment_mask + 1 == DEFAULT_ALIGNMENT)
4803: /* MUTANT (rep_op) */  if (h->alignment_mask + 1 != DEFAULT_ALIGNMENT)
4803: /* MUTANT (rep_const) */  if (h->alignment_mask + 0 >= DEFAULT_ALIGNMENT)
4803: /* MUTANT (rep_const) */  if (h->alignment_mask + -1 >= DEFAULT_ALIGNMENT)
4803: /* MUTANT (rep_const) */  if (h->alignment_mask + ((1)+1) >= DEFAULT_ALIGNMENT)
4803: /* MUTANT (negate) */  if(! (h->alignment_mask + 1 >= DEFAULT_ALIGNMENT))
4805: /* MUTANT (rep_const) */      for (i = obj_size / sizeof (COPYING_UNIT) - 0;
4805: /* MUTANT (rep_const) */      for (i = obj_size / sizeof (COPYING_UNIT) - -1;
4805: /* MUTANT (rep_const) */      for (i = obj_size / sizeof (COPYING_UNIT) - ((1)+1);
4806: /* MUTANT (del_stmt) */ /* 	   i >= 0; */  i--)
4806: /* MUTANT (rep_op) */	   i <= 0; i--)
4806: /* MUTANT (rep_op) */	   i < 0; i--)
4806: /* MUTANT (rep_op) */	   i > 0; i--)
4806: /* MUTANT (rep_op) */	   i == 0; i--)
4806: /* MUTANT (rep_op) */	   i != 0; i--)
4806: /* MUTANT (rep_op) */	   i >= 0; i++)
4806: /* MUTANT (rep_const) */	   i >= 1; i--)
4806: /* MUTANT (rep_const) */	   i >= -1; i--)
4812: /* MUTANT (del_stmt) */ /*       already = obj_size / sizeof (COPYING_UNIT) * sizeof (COPYING_UNIT); */ 
4815: /* MUTANT (rep_const) */    already = 1;
4815: /* MUTANT (rep_const) */    already = -1;
4817: /* MUTANT (rep_op) */  for (i = already; i <= obj_size; i++)
4817: /* MUTANT (rep_op) */  for (i = already; i > obj_size; i++)
4817: /* MUTANT (rep_op) */  for (i = already; i >= obj_size; i++)
4817: /* MUTANT (rep_op) */  for (i = already; i == obj_size; i++)
4817: /* MUTANT (rep_op) */  for (i = already; i != obj_size; i++)
4817: /* MUTANT (rep_op) */  for (i = already; i < obj_size; i--)
4823: /* MUTANT (rep_op) */  if (h->object_base != old_chunk->contents && ! h->maybe_empty_object)
4823: /* MUTANT (rep_op) */  if (h->object_base == old_chunk->contents || ! h->maybe_empty_object)
4823: /* MUTANT (negate) */  if(! (h->object_base == old_chunk->contents && ! h->maybe_empty_object))
4825: /* MUTANT (del_stmt) */ /*       new_chunk->prev = old_chunk->prev; */ 
4826: /* MUTANT (del_stmt) */ /*       CALL_FREEFUN (h, old_chunk); */ 
4830: /* MUTANT (del_stmt) */ /*   h->next_free = h->object_base + obj_size; */ 
4830: /* MUTANT (rep_op) */  h->next_free = h->object_base - obj_size;
4830: /* MUTANT (rep_op) */  h->next_free = h->object_base * obj_size;
4830: /* MUTANT (rep_op) */  h->next_free = h->object_base % obj_size;
4832: /* MUTANT (del_stmt) */ /*   h->maybe_empty_object = 0; */ 
4832: /* MUTANT (rep_const) */  h->maybe_empty_object = 1;
4832: /* MUTANT (rep_const) */  h->maybe_empty_object = -1;
4848: /* MUTANT (del_stmt) */ /*      POINTER obj; */ 
4850: /* MUTANT (del_stmt) */ /*   register struct _obstack_chunk *lp; */ 	/* below addr of any objects in this chunk */
4851: /* MUTANT (del_stmt) */ /*   register struct _obstack_chunk *plp; */ 	/* point to previous chunk if any */
4853: /* MUTANT (del_stmt) */ /*   lp = (h)->chunk; */ 
4857: /* MUTANT (rep_op) */  while (lp == 0 && ((POINTER) lp >= obj || (POINTER) (lp)->limit < obj))
4857: /* MUTANT (rep_op) */  while (lp != 0 || ((POINTER) lp >= obj || (POINTER) (lp)->limit < obj))
4857: /* MUTANT (rep_op) */  while (lp != 0 && ((POINTER) lp <= obj || (POINTER) (lp)->limit < obj))
4857: /* MUTANT (rep_op) */  while (lp != 0 && ((POINTER) lp < obj || (POINTER) (lp)->limit < obj))
4857: /* MUTANT (rep_op) */  while (lp != 0 && ((POINTER) lp > obj || (POINTER) (lp)->limit < obj))
4857: /* MUTANT (rep_op) */  while (lp != 0 && ((POINTER) lp == obj || (POINTER) (lp)->limit < obj))
4857: /* MUTANT (rep_op) */  while (lp != 0 && ((POINTER) lp != obj || (POINTER) (lp)->limit < obj))
4857: /* MUTANT (rep_op) */  while (lp != 0 && ((POINTER) lp >= obj && (POINTER) (lp)->limit < obj))
4857: /* MUTANT (rep_op) */  while (lp != 0 && ((POINTER) lp >= obj || (POINTER) (lp)->limit <= obj))
4857: /* MUTANT (rep_op) */  while (lp != 0 && ((POINTER) lp >= obj || (POINTER) (lp)->limit > obj))
4857: /* MUTANT (rep_op) */  while (lp != 0 && ((POINTER) lp >= obj || (POINTER) (lp)->limit >= obj))
4857: /* MUTANT (rep_op) */  while (lp != 0 && ((POINTER) lp >= obj || (POINTER) (lp)->limit == obj))
4857: /* MUTANT (rep_op) */  while (lp != 0 && ((POINTER) lp >= obj || (POINTER) (lp)->limit != obj))
4857: /* MUTANT (rep_const) */  while (lp != 1 && ((POINTER) lp >= obj || (POINTER) (lp)->limit < obj))
4857: /* MUTANT (rep_const) */  while (lp != -1 && ((POINTER) lp >= obj || (POINTER) (lp)->limit < obj))
4857: /* MUTANT (negate) */  while(! (lp != 0 && ((POINTER) lp >= obj || (POINTER) (lp)->limit < obj)))
4859: /* MUTANT (del_stmt) */ /*       plp = lp->prev; */ 
4860: /* MUTANT (del_stmt) */ /*       lp = plp; */ 
4862: /* MUTANT (rep_op) */  return lp == 0;
4862: /* MUTANT (rep_const) */  return lp != 1;
4862: /* MUTANT (rep_const) */  return lp != -1;
4876: /* MUTANT (del_stmt) */ /*      POINTER obj; */ 
4878: /* MUTANT (del_stmt) */ /*   register struct _obstack_chunk *lp; */ 	/* below addr of any objects in this chunk */
4879: /* MUTANT (del_stmt) */ /*   register struct _obstack_chunk *plp; */ 	/* point to previous chunk if any */
4881: /* MUTANT (del_stmt) */ /*   lp = h->chunk; */ 
4885: /* MUTANT (rep_op) */  while (lp == 0 && ((POINTER) lp >= obj || (POINTER) (lp)->limit < obj))
4885: /* MUTANT (rep_op) */  while (lp != 0 || ((POINTER) lp >= obj || (POINTER) (lp)->limit < obj))
4885: /* MUTANT (rep_op) */  while (lp != 0 && ((POINTER) lp <= obj || (POINTER) (lp)->limit < obj))
4885: /* MUTANT (rep_op) */  while (lp != 0 && ((POINTER) lp < obj || (POINTER) (lp)->limit < obj))
4885: /* MUTANT (rep_op) */  while (lp != 0 && ((POINTER) lp > obj || (POINTER) (lp)->limit < obj))
4885: /* MUTANT (rep_op) */  while (lp != 0 && ((POINTER) lp == obj || (POINTER) (lp)->limit < obj))
4885: /* MUTANT (rep_op) */  while (lp != 0 && ((POINTER) lp != obj || (POINTER) (lp)->limit < obj))
4885: /* MUTANT (rep_op) */  while (lp != 0 && ((POINTER) lp >= obj && (POINTER) (lp)->limit < obj))
4885: /* MUTANT (rep_op) */  while (lp != 0 && ((POINTER) lp >= obj || (POINTER) (lp)->limit <= obj))
4885: /* MUTANT (rep_op) */  while (lp != 0 && ((POINTER) lp >= obj || (POINTER) (lp)->limit > obj))
4885: /* MUTANT (rep_op) */  while (lp != 0 && ((POINTER) lp >= obj || (POINTER) (lp)->limit >= obj))
4885: /* MUTANT (rep_op) */  while (lp != 0 && ((POINTER) lp >= obj || (POINTER) (lp)->limit == obj))
4885: /* MUTANT (rep_op) */  while (lp != 0 && ((POINTER) lp >= obj || (POINTER) (lp)->limit != obj))
4885: /* MUTANT (rep_const) */  while (lp != 1 && ((POINTER) lp >= obj || (POINTER) (lp)->limit < obj))
4885: /* MUTANT (rep_const) */  while (lp != -1 && ((POINTER) lp >= obj || (POINTER) (lp)->limit < obj))
4885: /* MUTANT (negate) */  while(! (lp != 0 && ((POINTER) lp >= obj || (POINTER) (lp)->limit < obj)))
4887: /* MUTANT (del_stmt) */ /*       plp = lp->prev; */ 
4888: /* MUTANT (del_stmt) */ /*       CALL_FREEFUN (h, lp); */ 
4889: /* MUTANT (del_stmt) */ /*       lp = plp; */ 
4892: /* MUTANT (del_stmt) */ /*       h->maybe_empty_object = 1; */ 
4892: /* MUTANT (rep_const) */      h->maybe_empty_object = 0;
4892: /* MUTANT (rep_const) */      h->maybe_empty_object = -1;
4892: /* MUTANT (rep_const) */      h->maybe_empty_object = ((1)+1);
4894: /* MUTANT (negate) */  if(! (lp))
4896: /* MUTANT (del_stmt) */ /*       h->object_base = h->next_free = (char *) (obj); */ 
4897: /* MUTANT (del_stmt) */ /*       h->chunk_limit = lp->limit; */ 
4898: /* MUTANT (del_stmt) */ /*       h->chunk = lp; */ 
4900: /* MUTANT (rep_op) */  else if (obj == 0)
4900: /* MUTANT (rep_const) */  else if (obj != 1)
4900: /* MUTANT (rep_const) */  else if (obj != -1)
4900: /* MUTANT (negate) */  else if(! (obj != 0))
4910: /* MUTANT (del_stmt) */ /*      POINTER obj; */ 
4912: /* MUTANT (del_stmt) */ /*   register struct _obstack_chunk *lp; */ 	/* below addr of any objects in this chunk */
4913: /* MUTANT (del_stmt) */ /*   register struct _obstack_chunk *plp; */ 	/* point to previous chunk if any */
4915: /* MUTANT (del_stmt) */ /*   lp = h->chunk; */ 
4919: /* MUTANT (rep_op) */  while (lp == 0 && ((POINTER) lp >= obj || (POINTER) (lp)->limit < obj))
4919: /* MUTANT (rep_op) */  while (lp != 0 || ((POINTER) lp >= obj || (POINTER) (lp)->limit < obj))
4919: /* MUTANT (rep_op) */  while (lp != 0 && ((POINTER) lp <= obj || (POINTER) (lp)->limit < obj))
4919: /* MUTANT (rep_op) */  while (lp != 0 && ((POINTER) lp < obj || (POINTER) (lp)->limit < obj))
4919: /* MUTANT (rep_op) */  while (lp != 0 && ((POINTER) lp > obj || (POINTER) (lp)->limit < obj))
4919: /* MUTANT (rep_op) */  while (lp != 0 && ((POINTER) lp == obj || (POINTER) (lp)->limit < obj))
4919: /* MUTANT (rep_op) */  while (lp != 0 && ((POINTER) lp != obj || (POINTER) (lp)->limit < obj))
4919: /* MUTANT (rep_op) */  while (lp != 0 && ((POINTER) lp >= obj && (POINTER) (lp)->limit < obj))
4919: /* MUTANT (rep_op) */  while (lp != 0 && ((POINTER) lp >= obj || (POINTER) (lp)->limit <= obj))
4919: /* MUTANT (rep_op) */  while (lp != 0 && ((POINTER) lp >= obj || (POINTER) (lp)->limit > obj))
4919: /* MUTANT (rep_op) */  while (lp != 0 && ((POINTER) lp >= obj || (POINTER) (lp)->limit >= obj))
4919: /* MUTANT (rep_op) */  while (lp != 0 && ((POINTER) lp >= obj || (POINTER) (lp)->limit == obj))
4919: /* MUTANT (rep_op) */  while (lp != 0 && ((POINTER) lp >= obj || (POINTER) (lp)->limit != obj))
4919: /* MUTANT (rep_const) */  while (lp != 1 && ((POINTER) lp >= obj || (POINTER) (lp)->limit < obj))
4919: /* MUTANT (rep_const) */  while (lp != -1 && ((POINTER) lp >= obj || (POINTER) (lp)->limit < obj))
4919: /* MUTANT (negate) */  while(! (lp != 0 && ((POINTER) lp >= obj || (POINTER) (lp)->limit < obj)))
4921: /* MUTANT (del_stmt) */ /*       plp = lp->prev; */ 
4922: /* MUTANT (del_stmt) */ /*       CALL_FREEFUN (h, lp); */ 
4923: /* MUTANT (del_stmt) */ /*       lp = plp; */ 
4926: /* MUTANT (del_stmt) */ /*       h->maybe_empty_object = 1; */ 
4926: /* MUTANT (rep_const) */      h->maybe_empty_object = 0;
4926: /* MUTANT (rep_const) */      h->maybe_empty_object = -1;
4926: /* MUTANT (rep_const) */      h->maybe_empty_object = ((1)+1);
4928: /* MUTANT (negate) */  if(! (lp))
4930: /* MUTANT (del_stmt) */ /*       h->object_base = h->next_free = (char *) (obj); */ 
4931: /* MUTANT (del_stmt) */ /*       h->chunk_limit = lp->limit; */ 
4932: /* MUTANT (del_stmt) */ /*       h->chunk = lp; */ 
4934: /* MUTANT (rep_op) */  else if (obj == 0)
4934: /* MUTANT (rep_const) */  else if (obj != 1)
4934: /* MUTANT (rep_const) */  else if (obj != -1)
4934: /* MUTANT (negate) */  else if(! (obj != 0))
4943: /* MUTANT (del_stmt) */ /*   register struct _obstack_chunk* lp; */ 
4944: /* MUTANT (del_stmt) */ /*   register int nbytes = 0; */ 
4944: /* MUTANT (rep_const) */  register int nbytes = 1;
4944: /* MUTANT (rep_const) */  register int nbytes = -1;
4946: /* MUTANT (rep_op) */  for (lp = h->chunk; lp == 0; lp = lp->prev)
4946: /* MUTANT (rep_const) */  for (lp = h->chunk; lp != 1; lp = lp->prev)
4946: /* MUTANT (rep_const) */  for (lp = h->chunk; lp != -1; lp = lp->prev)
4948: /* MUTANT (del_stmt) */ /*       nbytes += lp->limit - (char *) lp; */ 
4948: /* MUTANT (rep_op) */      nbytes -= lp->limit - (char *) lp;
4948: /* MUTANT (rep_op) */      nbytes *= lp->limit - (char *) lp;
4948: /* MUTANT (rep_op) */      nbytes %= lp->limit - (char *) lp;
4956: #if flag_libintl==1 /* MUTANT (rep_const) */
4956: #if flag_libintl==-1 /* MUTANT (rep_const) */
4958: #define flag_libintl 0 /* MUTANT (rep_const) */
4958: #define flag_libintl -1 /* MUTANT (rep_const) */
4958: #define flag_libintl ((1)+1) /* MUTANT (rep_const) */
4971: /* MUTANT (del_stmt) */ /*   fputs (_("memory exhausted\n"), stderr); */ 
4972: /* MUTANT (del_stmt) */ /*   exit (obstack_exit_failure); */ 
4975: #if 1 /* MUTANT (rep_const) */
4975: #if -1 /* MUTANT (rep_const) */
4992: /* MUTANT (del_stmt) */ /*   return obstack_base (obstack); */ 
4998: /* MUTANT (del_stmt) */ /*   return obstack_next_free (obstack); */ 
5004: /* MUTANT (del_stmt) */ /*   return obstack_object_size (obstack); */ 
5010: /* MUTANT (del_stmt) */ /*   return obstack_room (obstack); */ 
5015: /* MUTANT (del_stmt) */ /*      int length; */ 
5017: /* MUTANT (del_stmt) */ /*   return obstack_make_room (obstack, length); */ 
5022: /* MUTANT (del_stmt) */ /*      POINTER pointer; */ 
5023: /* MUTANT (del_stmt) */ /*      int length; */ 
5025: /* MUTANT (del_stmt) */ /*   obstack_grow (obstack, pointer, length); */ 
5030: /* MUTANT (del_stmt) */ /*      POINTER pointer; */ 
5031: /* MUTANT (del_stmt) */ /*      int length; */ 
5033: /* MUTANT (del_stmt) */ /*   obstack_grow0 (obstack, pointer, length); */ 
5038: /* MUTANT (del_stmt) */ /*      int character; */ 
5040: /* MUTANT (del_stmt) */ /*   obstack_1grow (obstack, character); */ 
5045: /* MUTANT (del_stmt) */ /*      int length; */ 
5047: /* MUTANT (del_stmt) */ /*   obstack_blank (obstack, length); */ 
5052: /* MUTANT (del_stmt) */ /*      int character; */ 
5054: /* MUTANT (del_stmt) */ /*   obstack_1grow_fast (obstack, character); */ 
5059: /* MUTANT (del_stmt) */ /*      int length; */ 
5061: /* MUTANT (del_stmt) */ /*   obstack_blank_fast (obstack, length); */ 
5067: /* MUTANT (del_stmt) */ /*   return obstack_finish (obstack); */ 
5072: /* MUTANT (del_stmt) */ /*      int length; */ 
5074: /* MUTANT (del_stmt) */ /*   return obstack_alloc (obstack, length); */ 
5079: /* MUTANT (del_stmt) */ /*      POINTER pointer; */ 
5080: /* MUTANT (del_stmt) */ /*      int length; */ 
5082: /* MUTANT (del_stmt) */ /*   return obstack_copy (obstack, pointer, length); */ 
5087: /* MUTANT (del_stmt) */ /*      POINTER pointer; */ 
5088: /* MUTANT (del_stmt) */ /*      int length; */ 
5090: /* MUTANT (del_stmt) */ /*   return obstack_copy0 (obstack, pointer, length); */ 
5131: #if flag_config==1 /* MUTANT (rep_const) */
5131: #if flag_config==-1 /* MUTANT (rep_const) */
5133: #define flag_config 0 /* MUTANT (rep_const) */
5133: #define flag_config -1 /* MUTANT (rep_const) */
5133: #define flag_config ((1)+1) /* MUTANT (rep_const) */
5155: #define GETOPT_INTERFACE_VERSION 0 /* MUTANT (rep_const) */
5155: #define GETOPT_INTERFACE_VERSION 1 /* MUTANT (rep_const) */
5155: #define GETOPT_INTERFACE_VERSION -1 /* MUTANT (rep_const) */
5155: #define GETOPT_INTERFACE_VERSION ((2)+1) /* MUTANT (rep_const) */
5155: #define GETOPT_INTERFACE_VERSION ((2)-1) /* MUTANT (rep_const) */
5156: #if !defined (_LIBC) && defined (__GLIBC__) && __GLIBC__ >= 0 /* MUTANT (rep_const) */
5156: #if !defined (_LIBC) && defined (__GLIBC__) && __GLIBC__ >= 1 /* MUTANT (rep_const) */
5156: #if !defined (_LIBC) && defined (__GLIBC__) && __GLIBC__ >= -1 /* MUTANT (rep_const) */
5156: #if !defined (_LIBC) && defined (__GLIBC__) && __GLIBC__ >= ((2)+1) /* MUTANT (rep_const) */
5156: #if !defined (_LIBC) && defined (__GLIBC__) && __GLIBC__ >= ((2)-1) /* MUTANT (rep_const) */
5157: #if flag_gnuversions==1 /* MUTANT (rep_const) */
5157: #if flag_gnuversions==-1 /* MUTANT (rep_const) */
5159: #define flag_gnu-versions 0 /* MUTANT (rep_const) */
5159: #define flag_gnu-versions -1 /* MUTANT (rep_const) */
5159: #define flag_gnu-versions ((1)+1) /* MUTANT (rep_const) */
5174: #if flag_stdlib==1    /* MUTANT (rep_const) */
5174: #if flag_stdlib==-1    /* MUTANT (rep_const) */
5176: #define flag_stdlib 0 /* MUTANT (rep_const) */
5176: #define flag_stdlib -1 /* MUTANT (rep_const) */
5176: #define flag_stdlib ((1)+1) /* MUTANT (rep_const) */
5183: #if HAVE_STRING_H - 1 /* MUTANT (rep_const) */
5183: #if HAVE_STRING_H - -1 /* MUTANT (rep_const) */
5184: #if flag_string==1 /* MUTANT (rep_const) */
5184: #if flag_string==-1 /* MUTANT (rep_const) */
5186: #define flag_string 0 /* MUTANT (rep_const) */
5186: #define flag_string -1 /* MUTANT (rep_const) */
5186: #define flag_string ((1)+1) /* MUTANT (rep_const) */
5201: #if flag_libintl==1 /* MUTANT (rep_const) */
5201: #if flag_libintl==-1 /* MUTANT (rep_const) */
5203: #define flag_libintl 0 /* MUTANT (rep_const) */
5203: #define flag_libintl -1 /* MUTANT (rep_const) */
5203: #define flag_libintl ((1)+1) /* MUTANT (rep_const) */
5248: /* MUTANT (del_stmt) */ /* int optind = 1; */ 
5248: /* MUTANT (rep_const) */int optind = 0;
5248: /* MUTANT (rep_const) */int optind = -1;
5248: /* MUTANT (rep_const) */int optind = ((1)+1);
5254: /* MUTANT (del_stmt) */ /* int __getopt_initialized = 0; */ 
5254: /* MUTANT (rep_const) */int __getopt_initialized = 1;
5254: /* MUTANT (rep_const) */int __getopt_initialized = -1;
5263: /* MUTANT (del_stmt) */ /* static char *nextchar; */ 
5268: /* MUTANT (del_stmt) */ /* int opterr = 1; */ 
5268: /* MUTANT (rep_const) */int opterr = 0;
5268: /* MUTANT (rep_const) */int opterr = -1;
5268: /* MUTANT (rep_const) */int opterr = ((1)+1);
5274: /* MUTANT (del_stmt) */ /* int optopt = '?'; */ 
5311: /* MUTANT (del_stmt) */ /* static char *posixly_correct; */ 
5318: #if flag_string==1 /* MUTANT (rep_const) */
5318: #if flag_string==-1 /* MUTANT (rep_const) */
5320: #define flag_string 0 /* MUTANT (rep_const) */
5320: #define flag_string -1 /* MUTANT (rep_const) */
5320: #define flag_string ((1)+1) /* MUTANT (rep_const) */
5333: /* MUTANT (del_stmt) */ /*      int chr; */ 
5335: /* MUTANT (negate) */  while(! (*str))
5337: /* MUTANT (rep_op) */      if (*str != chr)
5337: /* MUTANT (negate) */      if(! (*str == chr))
5339: /* MUTANT (del_stmt) */ /*       str++; */ 
5339: /* MUTANT (rep_op) */      str--;
5341: /* MUTANT (rep_const) */  return 1;
5341: /* MUTANT (rep_const) */  return -1;
5365: /* MUTANT (del_stmt) */ /* static int last_nonopt; */ 
5372: /* MUTANT (del_stmt) */ /* static int nonoption_flags_len; */ 
5374: /* MUTANT (del_stmt) */ /* static int original_argc; */ 
5375: /* MUTANT (del_stmt) */ /* static char *const *original_argv; */ 
5380: /* MUTANT (del_stmt) */ /* static void store_args (int argc, char *const *argv) __attribute__ ((unused)); */ 
5386: /* MUTANT (del_stmt) */ /*   original_argc = argc; */ 
5387: /* MUTANT (del_stmt) */ /*   original_argv = argv; */ 
5409: /* MUTANT (del_stmt) */ /*   int bottom = first_nonopt; */ 
5410: /* MUTANT (del_stmt) */ /*   int middle = last_nonopt; */ 
5411: /* MUTANT (del_stmt) */ /*   int top = optind; */ 
5412: /* MUTANT (del_stmt) */ /*   char *tem; */ 
5419: /* MUTANT (rep_op) */  while (top <= middle && middle > bottom)
5419: /* MUTANT (rep_op) */  while (top < middle && middle > bottom)
5419: /* MUTANT (rep_op) */  while (top >= middle && middle > bottom)
5419: /* MUTANT (rep_op) */  while (top == middle && middle > bottom)
5419: /* MUTANT (rep_op) */  while (top != middle && middle > bottom)
5419: /* MUTANT (rep_op) */  while (top > middle || middle > bottom)
5419: /* MUTANT (rep_op) */  while (top > middle && middle <= bottom)
5419: /* MUTANT (rep_op) */  while (top > middle && middle < bottom)
5419: /* MUTANT (rep_op) */  while (top > middle && middle >= bottom)
5419: /* MUTANT (rep_op) */  while (top > middle && middle == bottom)
5419: /* MUTANT (rep_op) */  while (top > middle && middle != bottom)
5419: /* MUTANT (negate) */  while(! (top > middle && middle > bottom))
5421: /* MUTANT (rep_op) */      if (top - middle <= middle - bottom)
5421: /* MUTANT (rep_op) */      if (top - middle < middle - bottom)
5421: /* MUTANT (rep_op) */      if (top - middle >= middle - bottom)
5421: /* MUTANT (rep_op) */      if (top - middle == middle - bottom)
5421: /* MUTANT (rep_op) */      if (top - middle != middle - bottom)
5421: /* MUTANT (negate) */      if(! (top - middle > middle - bottom))
5424: /* MUTANT (del_stmt) */ /* 	  int len = middle - bottom; */ 
5425: /* MUTANT (del_stmt) */ /* 	  register int i; */ 
5428: /* MUTANT (rep_op) */	  for (i = 0; i <= len; i++)
5428: /* MUTANT (rep_op) */	  for (i = 0; i > len; i++)
5428: /* MUTANT (rep_op) */	  for (i = 0; i >= len; i++)
5428: /* MUTANT (rep_op) */	  for (i = 0; i == len; i++)
5428: /* MUTANT (rep_op) */	  for (i = 0; i != len; i++)
5428: /* MUTANT (rep_op) */	  for (i = 0; i < len; i--)
5428: /* MUTANT (rep_const) */	  for (i = 1; i < len; i++)
5428: /* MUTANT (rep_const) */	  for (i = -1; i < len; i++)
5430: /* MUTANT (del_stmt) */ /* 	      tem = argv[bottom + i]; */ 
5430: /* MUTANT (rep_op) */	      tem = argv[bottom - i];
5430: /* MUTANT (rep_op) */	      tem = argv[bottom * i];
5430: /* MUTANT (rep_op) */	      tem = argv[bottom % i];
5431: /* MUTANT (del_stmt) */ /* 	      argv[bottom + i] = argv[top - (middle - bottom) + i]; */ 
5431: /* MUTANT (rep_op) */	      argv[bottom - i] = argv[top - (middle - bottom) + i];
5431: /* MUTANT (rep_op) */	      argv[bottom * i] = argv[top - (middle - bottom) + i];
5431: /* MUTANT (rep_op) */	      argv[bottom % i] = argv[top - (middle - bottom) + i];
5431: /* MUTANT (rep_op) */	      argv[bottom + i] = argv[top - (middle - bottom) - i];
5431: /* MUTANT (rep_op) */	      argv[bottom + i] = argv[top - (middle - bottom) * i];
5431: /* MUTANT (rep_op) */	      argv[bottom + i] = argv[top - (middle - bottom) % i];
5432: /* MUTANT (del_stmt) */ /* 	      argv[top - (middle - bottom) + i] = tem; */ 
5432: /* MUTANT (rep_op) */	      argv[top - (middle - bottom) - i] = tem;
5432: /* MUTANT (rep_op) */	      argv[top - (middle - bottom) * i] = tem;
5432: /* MUTANT (rep_op) */	      argv[top - (middle - bottom) % i] = tem;
5435: /* MUTANT (rep_op) */	  top += len;
5435: /* MUTANT (rep_op) */	  top *= len;
5435: /* MUTANT (rep_op) */	  top %= len;
5440: /* MUTANT (del_stmt) */ /* 	  int len = top - middle; */ 
5441: /* MUTANT (del_stmt) */ /* 	  register int i; */ 
5444: /* MUTANT (rep_op) */	  for (i = 0; i <= len; i++)
5444: /* MUTANT (rep_op) */	  for (i = 0; i > len; i++)
5444: /* MUTANT (rep_op) */	  for (i = 0; i >= len; i++)
5444: /* MUTANT (rep_op) */	  for (i = 0; i == len; i++)
5444: /* MUTANT (rep_op) */	  for (i = 0; i != len; i++)
5444: /* MUTANT (rep_op) */	  for (i = 0; i < len; i--)
5444: /* MUTANT (rep_const) */	  for (i = 1; i < len; i++)
5444: /* MUTANT (rep_const) */	  for (i = -1; i < len; i++)
5446: /* MUTANT (del_stmt) */ /* 	      tem = argv[bottom + i]; */ 
5446: /* MUTANT (rep_op) */	      tem = argv[bottom - i];
5446: /* MUTANT (rep_op) */	      tem = argv[bottom * i];
5446: /* MUTANT (rep_op) */	      tem = argv[bottom % i];
5447: /* MUTANT (del_stmt) */ /* 	      argv[bottom + i] = argv[middle + i]; */ 
5447: /* MUTANT (rep_op) */	      argv[bottom - i] = argv[middle + i];
5447: /* MUTANT (rep_op) */	      argv[bottom * i] = argv[middle + i];
5447: /* MUTANT (rep_op) */	      argv[bottom % i] = argv[middle + i];
5447: /* MUTANT (rep_op) */	      argv[bottom + i] = argv[middle - i];
5447: /* MUTANT (rep_op) */	      argv[bottom + i] = argv[middle * i];
5447: /* MUTANT (rep_op) */	      argv[bottom + i] = argv[middle % i];
5448: /* MUTANT (del_stmt) */ /* 	      argv[middle + i] = tem; */ 
5448: /* MUTANT (rep_op) */	      argv[middle - i] = tem;
5448: /* MUTANT (rep_op) */	      argv[middle * i] = tem;
5448: /* MUTANT (rep_op) */	      argv[middle % i] = tem;
5451: /* MUTANT (rep_op) */	  bottom -= len;
5451: /* MUTANT (rep_op) */	  bottom *= len;
5451: /* MUTANT (rep_op) */	  bottom %= len;
5457: /* MUTANT (rep_op) */  first_nonopt -= (optind - last_nonopt);
5457: /* MUTANT (rep_op) */  first_nonopt *= (optind - last_nonopt);
5457: /* MUTANT (rep_op) */  first_nonopt %= (optind - last_nonopt);
5458: /* MUTANT (del_stmt) */ /*   last_nonopt = optind; */ 
5469: /* MUTANT (del_stmt) */ /*      char *const *argv; */ 
5470: /* MUTANT (del_stmt) */ /*      const char *optstring; */ 
5476: /* MUTANT (del_stmt) */ /*   first_nonopt = last_nonopt = optind = 1; */ 
5476: /* MUTANT (rep_const) */  first_nonopt = last_nonopt = optind = 0;
5476: /* MUTANT (rep_const) */  first_nonopt = last_nonopt = optind = -1;
5476: /* MUTANT (rep_const) */  first_nonopt = last_nonopt = optind = ((1)+1);
5478: /* MUTANT (del_stmt) */ /*   nextchar = NULL; */ 
5480: /* MUTANT (del_stmt) */ /*   posixly_correct = getenv ("POSIXLY_CORRECT"); */ 
5484: /* MUTANT (rep_op) */  if (optstring[0] != '-')
5484: /* MUTANT (rep_const) */  if (optstring[1] == '-')
5484: /* MUTANT (rep_const) */  if (optstring[-1] == '-')
5484: /* MUTANT (negate) */  if(! (optstring[0] == '-'))
5486: /* MUTANT (del_stmt) */ /*       ordering = RETURN_IN_ORDER; */ 
5487: /* MUTANT (del_stmt) */ /*       ++optstring; */ 
5487: /* MUTANT (rep_op) */      --optstring;
5489: /* MUTANT (rep_op) */  else if (optstring[0] != '+')
5489: /* MUTANT (rep_op) */  else if (optstring[0] == '-')
5489: /* MUTANT (rep_op) */  else if (optstring[0] == '*')
5489: /* MUTANT (rep_op) */  else if (optstring[0] == '%')
5489: /* MUTANT (rep_const) */  else if (optstring[1] == '+')
5489: /* MUTANT (rep_const) */  else if (optstring[-1] == '+')
5489: /* MUTANT (negate) */  else if(! (optstring[0] == '+'))
5491: /* MUTANT (del_stmt) */ /*       ordering = REQUIRE_ORDER; */ 
5492: /* MUTANT (del_stmt) */ /*       ++optstring; */ 
5492: /* MUTANT (rep_op) */      --optstring;
5494: /* MUTANT (rep_op) */  else if (posixly_correct == NULL)
5494: /* MUTANT (negate) */  else if(! (posixly_correct != NULL))
5500: /* MUTANT (rep_op) */  if (posixly_correct != NULL
5501: /* MUTANT (rep_op) */      || argc == original_argc && argv == original_argv)
5501: /* MUTANT (rep_op) */      && argc != original_argc && argv == original_argv)
5501: /* MUTANT (rep_op) */      && argc == original_argc || argv == original_argv)
5501: /* MUTANT (rep_op) */      && argc == original_argc && argv != original_argv)
5507: /* MUTANT (del_stmt) */ /*       char var[100]; */ 
5507: /* MUTANT (rep_const) */      char var[0];
5507: /* MUTANT (rep_const) */      char var[1];
5507: /* MUTANT (rep_const) */      char var[-1];
5507: /* MUTANT (rep_const) */      char var[((100)+1)];
5507: /* MUTANT (rep_const) */      char var[((100)-1)];
5508: /* MUTANT (del_stmt) */ /*       sprintf (var, "_%d_GNU_nonoption_argv_flags_", getpid ()); */ 
5509: /* MUTANT (del_stmt) */ /*       nonoption_flags = getenv (var); */ 
5510: /* MUTANT (rep_op) */      if (nonoption_flags != NULL)
5510: /* MUTANT (negate) */      if(! (nonoption_flags == NULL))
5511: /* MUTANT (rep_const) */	nonoption_flags_len = 1;
5511: /* MUTANT (rep_const) */	nonoption_flags_len = -1;
5516: /* MUTANT (rep_const) */    nonoption_flags_len = 1;
5516: /* MUTANT (rep_const) */    nonoption_flags_len = -1;
5581: /* MUTANT (del_stmt) */ /*      char *const *argv; */ 
5582: /* MUTANT (del_stmt) */ /*      const char *optstring; */ 
5583: /* MUTANT (del_stmt) */ /*      const struct option *longopts; */ 
5584: /* MUTANT (del_stmt) */ /*      int *longind; */ 
5585: /* MUTANT (del_stmt) */ /*      int long_only; */ 
5587: /* MUTANT (del_stmt) */ /*   optarg = NULL; */ 
5589: /* MUTANT (rep_op) */  if (!__getopt_initialized && optind == 0)
5589: /* MUTANT (rep_op) */  if (!__getopt_initialized || optind != 0)
5589: /* MUTANT (rep_const) */  if (!__getopt_initialized || optind == 1)
5589: /* MUTANT (rep_const) */  if (!__getopt_initialized || optind == -1)
5589: /* MUTANT (negate) */  if(! (!__getopt_initialized || optind == 0))
5591: /* MUTANT (del_stmt) */ /*       optstring = _getopt_initialize (argc, argv, optstring); */ 
5592: /* MUTANT (del_stmt) */ /*       optind = 1; */ 		/* Don't scan ARGV[0], the program name.  */
5592: /* MUTANT (rep_const) */      optind = 0;		/* Don't scan ARGV[0], the program name.  */
5592: /* MUTANT (rep_const) */      optind = -1;		/* Don't scan ARGV[0], the program name.  */
5592: /* MUTANT (rep_const) */      optind = ((1)+1);		/* Don't scan ARGV[0], the program name.  */
5593: /* MUTANT (del_stmt) */ /*       __getopt_initialized = 1; */ 
5593: /* MUTANT (rep_const) */      __getopt_initialized = 0;
5593: /* MUTANT (rep_const) */      __getopt_initialized = -1;
5593: /* MUTANT (rep_const) */      __getopt_initialized = ((1)+1);
5601: #define NONOPTION_P (argv[optind][1] != '-' || argv[optind][1] == '\0'	      \ /* MUTANT (rep_const) */
5601: #define NONOPTION_P (argv[optind][-1] != '-' || argv[optind][1] == '\0'	      \ /* MUTANT (rep_const) */
5601: #define NONOPTION_P (argv[optind][0] != '-' || argv[optind][0] == '\0'	      \ /* MUTANT (rep_const) */
5601: #define NONOPTION_P (argv[optind][0] != '-' || argv[optind][-1] == '\0'	      \ /* MUTANT (rep_const) */
5601: #define NONOPTION_P (argv[optind][0] != '-' || argv[optind][((1)+1)] == '\0'	      \ /* MUTANT (rep_const) */
5601: #define NONOPTION_P (argv[optind][0] != '-' || argv[optind][1] == '\1'	      \ /* MUTANT (rep_const) */
5601: #define NONOPTION_P (argv[optind][0] != '-' || argv[optind][1] == '\-1'	      \ /* MUTANT (rep_const) */
5602: /* MUTANT (rep_op) */		     && (optind < nonoption_flags_len			      \
5602: /* MUTANT (rep_op) */		     || (optind <= nonoption_flags_len			      \
5602: /* MUTANT (rep_op) */		     || (optind > nonoption_flags_len			      \
5602: /* MUTANT (rep_op) */		     || (optind >= nonoption_flags_len			      \
5602: /* MUTANT (rep_op) */		     || (optind == nonoption_flags_len			      \
5602: /* MUTANT (rep_op) */		     || (optind != nonoption_flags_len			      \
5603: /* MUTANT (rep_op) */			 || nonoption_flags[optind] == '1'))
5603: /* MUTANT (rep_op) */			 && nonoption_flags[optind] != '1'))
5603: /* MUTANT (rep_const) */			 && nonoption_flags[optind] == '0'))
5603: /* MUTANT (rep_const) */			 && nonoption_flags[optind] == '-1'))
5603: /* MUTANT (rep_const) */			 && nonoption_flags[optind] == '((1)+1)'))
5605: #define NONOPTION_P (argv[optind][1] != '-' || argv[optind][1] == '\0') /* MUTANT (rep_const) */
5605: #define NONOPTION_P (argv[optind][-1] != '-' || argv[optind][1] == '\0') /* MUTANT (rep_const) */
5605: #define NONOPTION_P (argv[optind][0] != '-' || argv[optind][0] == '\0') /* MUTANT (rep_const) */
5605: #define NONOPTION_P (argv[optind][0] != '-' || argv[optind][-1] == '\0') /* MUTANT (rep_const) */
5605: #define NONOPTION_P (argv[optind][0] != '-' || argv[optind][((1)+1)] == '\0') /* MUTANT (rep_const) */
5605: #define NONOPTION_P (argv[optind][0] != '-' || argv[optind][1] == '\1') /* MUTANT (rep_const) */
5605: #define NONOPTION_P (argv[optind][0] != '-' || argv[optind][1] == '\-1') /* MUTANT (rep_const) */
5608: /* MUTANT (rep_op) */  if (nextchar != NULL || *nextchar == '\0')
5608: /* MUTANT (rep_op) */  if (nextchar == NULL && *nextchar == '\0')
5608: /* MUTANT (rep_op) */  if (nextchar == NULL || *nextchar != '\0')
5608: /* MUTANT (rep_const) */  if (nextchar == NULL || *nextchar == '\1')
5608: /* MUTANT (rep_const) */  if (nextchar == NULL || *nextchar == '\-1')
5608: /* MUTANT (negate) */  if(! (nextchar == NULL || *nextchar == '\0'))
5614: /* MUTANT (rep_op) */      if (last_nonopt <= optind)
5614: /* MUTANT (rep_op) */      if (last_nonopt < optind)
5614: /* MUTANT (rep_op) */      if (last_nonopt >= optind)
5614: /* MUTANT (rep_op) */      if (last_nonopt == optind)
5614: /* MUTANT (rep_op) */      if (last_nonopt != optind)
5614: /* MUTANT (negate) */      if(! (last_nonopt > optind))
5616: /* MUTANT (rep_op) */      if (first_nonopt <= optind)
5616: /* MUTANT (rep_op) */      if (first_nonopt < optind)
5616: /* MUTANT (rep_op) */      if (first_nonopt >= optind)
5616: /* MUTANT (rep_op) */      if (first_nonopt == optind)
5616: /* MUTANT (rep_op) */      if (first_nonopt != optind)
5616: /* MUTANT (negate) */      if(! (first_nonopt > optind))
5619: /* MUTANT (rep_op) */      if (ordering != PERMUTE)
5619: /* MUTANT (negate) */      if(! (ordering == PERMUTE))
5624: /* MUTANT (rep_op) */	  if (first_nonopt == last_nonopt && last_nonopt != optind)
5624: /* MUTANT (rep_op) */	  if (first_nonopt != last_nonopt || last_nonopt != optind)
5624: /* MUTANT (rep_op) */	  if (first_nonopt != last_nonopt && last_nonopt == optind)
5624: /* MUTANT (negate) */	  if(! (first_nonopt != last_nonopt && last_nonopt != optind))
5626: /* MUTANT (rep_op) */	  else if (last_nonopt == optind)
5626: /* MUTANT (negate) */	  else if(! (last_nonopt != optind))
5632: /* MUTANT (rep_op) */	  while (optind <= argc && NONOPTION_P)
5632: /* MUTANT (rep_op) */	  while (optind > argc && NONOPTION_P)
5632: /* MUTANT (rep_op) */	  while (optind >= argc && NONOPTION_P)
5632: /* MUTANT (rep_op) */	  while (optind == argc && NONOPTION_P)
5632: /* MUTANT (rep_op) */	  while (optind != argc && NONOPTION_P)
5632: /* MUTANT (rep_op) */	  while (optind < argc || NONOPTION_P)
5632: /* MUTANT (negate) */	  while(! (optind < argc && NONOPTION_P))
5633: /* MUTANT (rep_op) */	    optind--;
5634: /* MUTANT (del_stmt) */ /* 	  last_nonopt = optind; */ 
5642: /* MUTANT (rep_op) */      if (optind == argc && !strcmp (argv[optind], "--"))
5642: /* MUTANT (rep_op) */      if (optind != argc || !strcmp (argv[optind], "--"))
5642: /* MUTANT (negate) */      if(! (optind != argc && !strcmp (argv[optind], "--")))
5644: /* MUTANT (del_stmt) */ /* 	  optind++; */ 
5644: /* MUTANT (rep_op) */	  optind--;
5646: /* MUTANT (rep_op) */	  if (first_nonopt == last_nonopt && last_nonopt != optind)
5646: /* MUTANT (rep_op) */	  if (first_nonopt != last_nonopt || last_nonopt != optind)
5646: /* MUTANT (rep_op) */	  if (first_nonopt != last_nonopt && last_nonopt == optind)
5646: /* MUTANT (negate) */	  if(! (first_nonopt != last_nonopt && last_nonopt != optind))
5648: /* MUTANT (rep_op) */	  else if (first_nonopt != last_nonopt)
5648: /* MUTANT (negate) */	  else if(! (first_nonopt == last_nonopt))
5650: /* MUTANT (del_stmt) */ /* 	  last_nonopt = argc; */ 
5652: /* MUTANT (del_stmt) */ /* 	  optind = argc; */ 
5658: /* MUTANT (rep_op) */      if (optind != argc)
5658: /* MUTANT (negate) */      if(! (optind == argc))
5662: /* MUTANT (rep_op) */	  if (first_nonopt == last_nonopt)
5662: /* MUTANT (negate) */	  if(! (first_nonopt != last_nonopt))
5664: /* MUTANT (del_stmt) */ /* 	  return -1; */ 
5664: /* MUTANT (rep_const) */	  return 0;
5664: /* MUTANT (rep_const) */	  return 1;
5664: /* MUTANT (rep_const) */	  return ((-1)+1);
5664: /* MUTANT (rep_const) */	  return ((-1)-1);
5670: /* MUTANT (negate) */      if(! (NONOPTION_P))
5672: /* MUTANT (rep_op) */	  if (ordering != REQUIRE_ORDER)
5672: /* MUTANT (negate) */	  if(! (ordering == REQUIRE_ORDER))
5673: /* MUTANT (rep_const) */	    return 0;
5673: /* MUTANT (rep_const) */	    return 1;
5673: /* MUTANT (rep_const) */	    return ((-1)+1);
5673: /* MUTANT (rep_const) */	    return ((-1)-1);
5674: /* MUTANT (del_stmt) */ /* 	  optarg = argv[optind++]; */ 
5674: /* MUTANT (rep_op) */	  optarg = argv[optind--];
5675: /* MUTANT (del_stmt) */ /* 	  return 1; */ 
5675: /* MUTANT (rep_const) */	  return 0;
5675: /* MUTANT (rep_const) */	  return -1;
5675: /* MUTANT (rep_const) */	  return ((1)+1);
5681: /* MUTANT (rep_op) */      nextchar = (argv[optind] - 1
5681: /* MUTANT (rep_op) */      nextchar = (argv[optind] * 1
5681: /* MUTANT (rep_op) */      nextchar = (argv[optind] % 1
5681: /* MUTANT (rep_const) */      nextchar = (argv[optind] + 0
5681: /* MUTANT (rep_const) */      nextchar = (argv[optind] + -1
5681: /* MUTANT (rep_const) */      nextchar = (argv[optind] + ((1)+1)
5682: /* MUTANT (rep_op) */		  - (longopts != NULL && argv[optind][1] == '-'));
5682: /* MUTANT (rep_op) */		  * (longopts != NULL && argv[optind][1] == '-'));
5682: /* MUTANT (rep_op) */		  % (longopts != NULL && argv[optind][1] == '-'));
5682: /* MUTANT (rep_op) */		  + (longopts == NULL && argv[optind][1] == '-'));
5682: /* MUTANT (rep_op) */		  + (longopts != NULL || argv[optind][1] == '-'));
5682: /* MUTANT (rep_op) */		  + (longopts != NULL && argv[optind][1] != '-'));
5682: /* MUTANT (rep_const) */		  + (longopts != NULL && argv[optind][0] == '-'));
5682: /* MUTANT (rep_const) */		  + (longopts != NULL && argv[optind][-1] == '-'));
5682: /* MUTANT (rep_const) */		  + (longopts != NULL && argv[optind][((1)+1)] == '-'));
5700: /* MUTANT (rep_op) */  if (longopts == NULL
5701: /* MUTANT (rep_op) */      || (argv[optind][1] == '-'
5701: /* MUTANT (rep_op) */      && (argv[optind][1] != '-'
5701: /* MUTANT (rep_const) */      && (argv[optind][0] == '-'
5701: /* MUTANT (rep_const) */      && (argv[optind][-1] == '-'
5701: /* MUTANT (rep_const) */      && (argv[optind][((1)+1)] == '-'
5702: /* MUTANT (rep_op) */	  && (long_only && (argv[optind][2] || !my_index (optstring, argv[optind][1])))))
5702: /* MUTANT (rep_op) */	  || (long_only || (argv[optind][2] || !my_index (optstring, argv[optind][1])))))
5702: /* MUTANT (rep_op) */	  || (long_only && (argv[optind][2] && !my_index (optstring, argv[optind][1])))))
5702: /* MUTANT (rep_const) */	  || (long_only && (argv[optind][0] || !my_index (optstring, argv[optind][1])))))
5702: /* MUTANT (rep_const) */	  || (long_only && (argv[optind][1] || !my_index (optstring, argv[optind][1])))))
5702: /* MUTANT (rep_const) */	  || (long_only && (argv[optind][-1] || !my_index (optstring, argv[optind][1])))))
5702: /* MUTANT (rep_const) */	  || (long_only && (argv[optind][((2)+1)] || !my_index (optstring, argv[optind][1])))))
5702: /* MUTANT (rep_const) */	  || (long_only && (argv[optind][((2)-1)] || !my_index (optstring, argv[optind][1])))))
5702: /* MUTANT (rep_const) */	  || (long_only && (argv[optind][2] || !my_index (optstring, argv[optind][0])))))
5702: /* MUTANT (rep_const) */	  || (long_only && (argv[optind][2] || !my_index (optstring, argv[optind][-1])))))
5702: /* MUTANT (rep_const) */	  || (long_only && (argv[optind][2] || !my_index (optstring, argv[optind][((1)+1)])))))
5704: /* MUTANT (del_stmt) */ /*       char *nameend; */ 
5705: /* MUTANT (del_stmt) */ /*       const struct option *p; */ 
5706: /* MUTANT (del_stmt) */ /*       const struct option *pfound = NULL; */ 
5707: /* MUTANT (del_stmt) */ /*       int exact = 0; */ 
5707: /* MUTANT (rep_const) */      int exact = 1;
5707: /* MUTANT (rep_const) */      int exact = -1;
5708: /* MUTANT (del_stmt) */ /*       int ambig = 0; */ 
5708: /* MUTANT (rep_const) */      int ambig = 1;
5708: /* MUTANT (rep_const) */      int ambig = -1;
5709: /* MUTANT (del_stmt) */ /*       int indfound = -1; */ 
5709: /* MUTANT (rep_const) */      int indfound = 0;
5709: /* MUTANT (rep_const) */      int indfound = 1;
5709: /* MUTANT (rep_const) */      int indfound = ((-1)+1);
5709: /* MUTANT (rep_const) */      int indfound = ((-1)-1);
5710: /* MUTANT (del_stmt) */ /*       int option_index; */ 
5712: /* MUTANT (rep_op) */      for (nameend = nextchar; *nameend || *nameend != '='; nameend++)
5712: /* MUTANT (rep_op) */      for (nameend = nextchar; *nameend && *nameend == '='; nameend++)
5712: /* MUTANT (rep_op) */      for (nameend = nextchar; *nameend && *nameend != '='; nameend--)
5717: /* MUTANT (rep_op) */      for (p = longopts, option_index = 0; p->name; p--, option_index++)
5717: /* MUTANT (rep_op) */      for (p = longopts, option_index = 0; p->name; p++, option_index--)
5717: /* MUTANT (rep_const) */      for (p = longopts, option_index = 1; p->name; p++, option_index++)
5717: /* MUTANT (rep_const) */      for (p = longopts, option_index = -1; p->name; p++, option_index++)
5718: /* MUTANT (negate) */	if(! (!strncmp (p->name, nextchar, nameend - nextchar)))
5721: /* MUTANT (rep_op) */		!= (unsigned int) strlen (p->name))
5724: /* MUTANT (del_stmt) */ /* 		pfound = p; */ 
5725: /* MUTANT (del_stmt) */ /* 		indfound = option_index; */ 
5726: /* MUTANT (del_stmt) */ /* 		exact = 1; */ 
5726: /* MUTANT (rep_const) */		exact = 0;
5726: /* MUTANT (rep_const) */		exact = -1;
5726: /* MUTANT (rep_const) */		exact = ((1)+1);
5727: /* MUTANT (del_stmt) */ /* 		break; */ 
5729: /* MUTANT (rep_op) */	    else if (pfound != NULL)
5729: /* MUTANT (negate) */	    else if(! (pfound == NULL))
5732: /* MUTANT (del_stmt) */ /* 		pfound = p; */ 
5733: /* MUTANT (del_stmt) */ /* 		indfound = option_index; */ 
5737: /* MUTANT (rep_const) */	      ambig = 0;
5737: /* MUTANT (rep_const) */	      ambig = -1;
5737: /* MUTANT (rep_const) */	      ambig = ((1)+1);
5740: /* MUTANT (rep_op) */      if (ambig || !exact)
5740: /* MUTANT (negate) */      if(! (ambig && !exact))
5742: /* MUTANT (negate) */	  if(! (opterr))
5744: /* MUTANT (rep_const) */		     argv[1], argv[optind]);
5744: /* MUTANT (rep_const) */		     argv[-1], argv[optind]);
5745: /* MUTANT (del_stmt) */ /* 	  nextchar += strlen (nextchar); */ 
5745: /* MUTANT (rep_op) */	  nextchar -= strlen (nextchar);
5745: /* MUTANT (rep_op) */	  nextchar *= strlen (nextchar);
5745: /* MUTANT (rep_op) */	  nextchar %= strlen (nextchar);
5746: /* MUTANT (del_stmt) */ /* 	  optind++; */ 
5746: /* MUTANT (rep_op) */	  optind--;
5747: /* MUTANT (del_stmt) */ /* 	  optopt = 0; */ 
5747: /* MUTANT (rep_const) */	  optopt = 1;
5747: /* MUTANT (rep_const) */	  optopt = -1;
5748: /* MUTANT (del_stmt) */ /* 	  return '?'; */ 
5751: /* MUTANT (rep_op) */      if (pfound == NULL)
5751: /* MUTANT (negate) */      if(! (pfound != NULL))
5753: /* MUTANT (del_stmt) */ /* 	  option_index = indfound; */ 
5754: /* MUTANT (del_stmt) */ /* 	  optind++; */ 
5754: /* MUTANT (rep_op) */	  optind--;
5755: /* MUTANT (negate) */	  if(! (*nameend))
5759: /* MUTANT (negate) */	      if(! (pfound->has_arg))
5760: /* MUTANT (rep_op) */		optarg = nameend - 1;
5760: /* MUTANT (rep_op) */		optarg = nameend * 1;
5760: /* MUTANT (rep_op) */		optarg = nameend % 1;
5760: /* MUTANT (rep_const) */		optarg = nameend + 0;
5760: /* MUTANT (rep_const) */		optarg = nameend + -1;
5760: /* MUTANT (rep_const) */		optarg = nameend + ((1)+1);
5763: /* MUTANT (negate) */		  if(! (opterr))
5764: /* MUTANT (rep_op) */		   if (argv[optind - 1][1] != '-')
5764: /* MUTANT (rep_const) */		   if (argv[optind - 0][1] == '-')
5764: /* MUTANT (rep_const) */		   if (argv[optind - -1][1] == '-')
5764: /* MUTANT (rep_const) */		   if (argv[optind - ((1)+1)][1] == '-')
5764: /* MUTANT (rep_const) */		   if (argv[optind - 1][0] == '-')
5764: /* MUTANT (rep_const) */		   if (argv[optind - 1][-1] == '-')
5764: /* MUTANT (rep_const) */		   if (argv[optind - 1][((1)+1)] == '-')
5764: /* MUTANT (negate) */		   if(! (argv[optind - 1][1] == '-'))
5768: /* MUTANT (rep_const) */		     argv[1], pfound->name);
5768: /* MUTANT (rep_const) */		     argv[-1], pfound->name);
5773: /* MUTANT (rep_const) */		     argv[1], argv[optind - 1][0], pfound->name);
5773: /* MUTANT (rep_const) */		     argv[-1], argv[optind - 1][0], pfound->name);
5773: /* MUTANT (rep_const) */		     argv[0], argv[optind - 0][0], pfound->name);
5773: /* MUTANT (rep_const) */		     argv[0], argv[optind - -1][0], pfound->name);
5773: /* MUTANT (rep_const) */		     argv[0], argv[optind - ((1)+1)][0], pfound->name);
5773: /* MUTANT (rep_const) */		     argv[0], argv[optind - 1][1], pfound->name);
5773: /* MUTANT (rep_const) */		     argv[0], argv[optind - 1][-1], pfound->name);
5775: /* MUTANT (del_stmt) */ /* 		  nextchar += strlen (nextchar); */ 
5775: /* MUTANT (rep_op) */		  nextchar -= strlen (nextchar);
5775: /* MUTANT (rep_op) */		  nextchar *= strlen (nextchar);
5775: /* MUTANT (rep_op) */		  nextchar %= strlen (nextchar);
5777: /* MUTANT (del_stmt) */ /* 		  optopt = pfound->val; */ 
5778: /* MUTANT (del_stmt) */ /* 		  return '?'; */ 
5781: /* MUTANT (rep_op) */	  else if (pfound->has_arg != 1)
5781: /* MUTANT (rep_const) */	  else if (pfound->has_arg == 0)
5781: /* MUTANT (rep_const) */	  else if (pfound->has_arg == -1)
5781: /* MUTANT (rep_const) */	  else if (pfound->has_arg == ((1)+1))
5781: /* MUTANT (negate) */	  else if(! (pfound->has_arg == 1))
5783: /* MUTANT (rep_op) */	      if (optind <= argc)
5783: /* MUTANT (rep_op) */	      if (optind > argc)
5783: /* MUTANT (rep_op) */	      if (optind >= argc)
5783: /* MUTANT (rep_op) */	      if (optind == argc)
5783: /* MUTANT (rep_op) */	      if (optind != argc)
5783: /* MUTANT (negate) */	      if(! (optind < argc))
5784: /* MUTANT (rep_op) */		optarg = argv[optind--];
5787: /* MUTANT (negate) */		  if(! (opterr))
5790: /* MUTANT (rep_const) */			   argv[1], argv[optind - 1]);
5790: /* MUTANT (rep_const) */			   argv[-1], argv[optind - 1]);
5790: /* MUTANT (rep_const) */			   argv[0], argv[optind - 0]);
5790: /* MUTANT (rep_const) */			   argv[0], argv[optind - -1]);
5790: /* MUTANT (rep_const) */			   argv[0], argv[optind - ((1)+1)]);
5791: /* MUTANT (del_stmt) */ /* 		  nextchar += strlen (nextchar); */ 
5791: /* MUTANT (rep_op) */		  nextchar -= strlen (nextchar);
5791: /* MUTANT (rep_op) */		  nextchar *= strlen (nextchar);
5791: /* MUTANT (rep_op) */		  nextchar %= strlen (nextchar);
5792: /* MUTANT (del_stmt) */ /* 		  optopt = pfound->val; */ 
5793: /* MUTANT (del_stmt) */ /* 		  return optstring[0] == ':' ? ':' : '?'; */ 
5793: /* MUTANT (rep_op) */		  return optstring[0] != ':' ? ':' : '?';
5793: /* MUTANT (rep_const) */		  return optstring[1] == ':' ? ':' : '?';
5793: /* MUTANT (rep_const) */		  return optstring[-1] == ':' ? ':' : '?';
5796: /* MUTANT (rep_op) */	  nextchar -= strlen (nextchar);
5796: /* MUTANT (rep_op) */	  nextchar *= strlen (nextchar);
5796: /* MUTANT (rep_op) */	  nextchar %= strlen (nextchar);
5797: /* MUTANT (rep_op) */	  if (longind == NULL)
5797: /* MUTANT (negate) */	  if(! (longind != NULL))
5799: /* MUTANT (negate) */	  if(! (pfound->flag))
5801: /* MUTANT (del_stmt) */ /* 	      *(pfound->flag) = pfound->val; */ 
5802: /* MUTANT (del_stmt) */ /* 	      return 0; */ 
5802: /* MUTANT (rep_const) */	      return 1;
5802: /* MUTANT (rep_const) */	      return -1;
5811: /* MUTANT (rep_op) */      if (!long_only && argv[optind][1] == '-'
5811: /* MUTANT (rep_op) */      if (!long_only || argv[optind][1] != '-'
5811: /* MUTANT (rep_const) */      if (!long_only || argv[optind][0] == '-'
5811: /* MUTANT (rep_const) */      if (!long_only || argv[optind][-1] == '-'
5811: /* MUTANT (rep_const) */      if (!long_only || argv[optind][((1)+1)] == '-'
5812: /* MUTANT (rep_op) */	  && my_index (optstring, *nextchar) == NULL)
5812: /* MUTANT (rep_op) */	  || my_index (optstring, *nextchar) != NULL)
5814: /* MUTANT (negate) */	  if(! (opterr))
5816: /* MUTANT (rep_op) */	      if (argv[optind][1] != '-')
5816: /* MUTANT (rep_const) */	      if (argv[optind][0] == '-')
5816: /* MUTANT (rep_const) */	      if (argv[optind][-1] == '-')
5816: /* MUTANT (rep_const) */	      if (argv[optind][((1)+1)] == '-')
5816: /* MUTANT (negate) */	      if(! (argv[optind][1] == '-'))
5819: /* MUTANT (rep_const) */			 argv[1], nextchar);
5819: /* MUTANT (rep_const) */			 argv[-1], nextchar);
5823: /* MUTANT (rep_const) */			 argv[1], argv[optind][0], nextchar);
5823: /* MUTANT (rep_const) */			 argv[-1], argv[optind][0], nextchar);
5823: /* MUTANT (rep_const) */			 argv[0], argv[optind][1], nextchar);
5823: /* MUTANT (rep_const) */			 argv[0], argv[optind][-1], nextchar);
5826: /* MUTANT (del_stmt) */ /* 	  optind++; */ 
5826: /* MUTANT (rep_op) */	  optind--;
5827: /* MUTANT (del_stmt) */ /* 	  optopt = 0; */ 
5827: /* MUTANT (rep_const) */	  optopt = 1;
5827: /* MUTANT (rep_const) */	  optopt = -1;
5828: /* MUTANT (del_stmt) */ /* 	  return '?'; */ 
5835: /* MUTANT (del_stmt) */ /*     char c = *nextchar++; */ 
5835: /* MUTANT (rep_op) */    char c = *nextchar--;
5836: /* MUTANT (del_stmt) */ /*     char *temp = my_index (optstring, c); */ 
5839: /* MUTANT (rep_op) */    if (*nextchar != '\0')
5839: /* MUTANT (rep_const) */    if (*nextchar == '\1')
5839: /* MUTANT (rep_const) */    if (*nextchar == '\-1')
5839: /* MUTANT (negate) */    if(! (*nextchar == '\0'))
5840: /* MUTANT (rep_op) */      --optind;
5842: /* MUTANT (rep_op) */    if (temp != NULL || c == ':')
5842: /* MUTANT (rep_op) */    if (temp == NULL && c == ':')
5842: /* MUTANT (rep_op) */    if (temp == NULL || c != ':')
5842: /* MUTANT (negate) */    if(! (temp == NULL || c == ':'))
5844: /* MUTANT (negate) */	if(! (opterr))
5846: /* MUTANT (negate) */	    if(! (posixly_correct))
5849: /* MUTANT (rep_const) */		       argv[1], c);
5849: /* MUTANT (rep_const) */		       argv[-1], c);
5852: /* MUTANT (rep_const) */		       argv[1], c);
5852: /* MUTANT (rep_const) */		       argv[-1], c);
5855: /* MUTANT (del_stmt) */ /* 	return '?'; */ 
5858: /* MUTANT (rep_op) */    if (temp[0] != 'W' && temp[1] == ';')
5858: /* MUTANT (rep_op) */    if (temp[0] == 'W' || temp[1] == ';')
5858: /* MUTANT (rep_op) */    if (temp[0] == 'W' && temp[1] != ';')
5858: /* MUTANT (rep_const) */    if (temp[1] == 'W' && temp[1] == ';')
5858: /* MUTANT (rep_const) */    if (temp[-1] == 'W' && temp[1] == ';')
5858: /* MUTANT (rep_const) */    if (temp[0] == 'W' && temp[0] == ';')
5858: /* MUTANT (rep_const) */    if (temp[0] == 'W' && temp[-1] == ';')
5858: /* MUTANT (rep_const) */    if (temp[0] == 'W' && temp[((1)+1)] == ';')
5858: /* MUTANT (negate) */    if(! (temp[0] == 'W' && temp[1] == ';'))
5860: /* MUTANT (del_stmt) */ /* 	char *nameend; */ 
5861: /* MUTANT (del_stmt) */ /* 	const struct option *p; */ 
5862: /* MUTANT (del_stmt) */ /* 	const struct option *pfound = NULL; */ 
5863: /* MUTANT (del_stmt) */ /* 	int exact = 0; */ 
5863: /* MUTANT (rep_const) */	int exact = 1;
5863: /* MUTANT (rep_const) */	int exact = -1;
5864: /* MUTANT (del_stmt) */ /* 	int ambig = 0; */ 
5864: /* MUTANT (rep_const) */	int ambig = 1;
5864: /* MUTANT (rep_const) */	int ambig = -1;
5865: /* MUTANT (del_stmt) */ /* 	int indfound = 0; */ 
5865: /* MUTANT (rep_const) */	int indfound = 1;
5865: /* MUTANT (rep_const) */	int indfound = -1;
5866: /* MUTANT (del_stmt) */ /* 	int option_index; */ 
5869: /* MUTANT (rep_op) */	if (*nextchar == '\0')
5869: /* MUTANT (rep_const) */	if (*nextchar != '\1')
5869: /* MUTANT (rep_const) */	if (*nextchar != '\-1')
5869: /* MUTANT (negate) */	if(! (*nextchar != '\0'))
5871: /* MUTANT (del_stmt) */ /* 	    optarg = nextchar; */ 
5874: /* MUTANT (del_stmt) */ /* 	    optind++; */ 
5874: /* MUTANT (rep_op) */	    optind--;
5876: /* MUTANT (rep_op) */	else if (optind != argc)
5876: /* MUTANT (negate) */	else if(! (optind == argc))
5878: /* MUTANT (negate) */	    if(! (opterr))
5882: /* MUTANT (rep_const) */			 argv[1], c);
5882: /* MUTANT (rep_const) */			 argv[-1], c);
5885: /* MUTANT (rep_op) */	    if (optstring[0] != ':')
5885: /* MUTANT (rep_const) */	    if (optstring[1] == ':')
5885: /* MUTANT (rep_const) */	    if (optstring[-1] == ':')
5885: /* MUTANT (negate) */	    if(! (optstring[0] == ':'))
5889: /* MUTANT (del_stmt) */ /* 	    return c; */ 
5894: /* MUTANT (rep_op) */	  optarg = argv[optind--];
5899: /* MUTANT (rep_op) */	for (nextchar = nameend = optarg; *nameend || *nameend != '='; nameend++)
5899: /* MUTANT (rep_op) */	for (nextchar = nameend = optarg; *nameend && *nameend == '='; nameend++)
5899: /* MUTANT (rep_op) */	for (nextchar = nameend = optarg; *nameend && *nameend != '='; nameend--)
5904: /* MUTANT (rep_op) */	for (p = longopts, option_index = 0; p->name; p--, option_index++)
5904: /* MUTANT (rep_op) */	for (p = longopts, option_index = 0; p->name; p++, option_index--)
5904: /* MUTANT (rep_const) */	for (p = longopts, option_index = 1; p->name; p++, option_index++)
5904: /* MUTANT (rep_const) */	for (p = longopts, option_index = -1; p->name; p++, option_index++)
5905: /* MUTANT (negate) */	  if(! (!strncmp (p->name, nextchar, nameend - nextchar)))
5907: /* MUTANT (rep_op) */	      if ((unsigned int) (nameend - nextchar) != strlen (p->name))
5907: /* MUTANT (negate) */	      if(! ((unsigned int) (nameend - nextchar) == strlen (p->name)))
5910: /* MUTANT (del_stmt) */ /* 		  pfound = p; */ 
5911: /* MUTANT (del_stmt) */ /* 		  indfound = option_index; */ 
5912: /* MUTANT (del_stmt) */ /* 		  exact = 1; */ 
5912: /* MUTANT (rep_const) */		  exact = 0;
5912: /* MUTANT (rep_const) */		  exact = -1;
5912: /* MUTANT (rep_const) */		  exact = ((1)+1);
5913: /* MUTANT (del_stmt) */ /* 		  break; */ 
5915: /* MUTANT (rep_op) */	      else if (pfound != NULL)
5915: /* MUTANT (negate) */	      else if(! (pfound == NULL))
5918: /* MUTANT (del_stmt) */ /* 		  pfound = p; */ 
5919: /* MUTANT (del_stmt) */ /* 		  indfound = option_index; */ 
5923: /* MUTANT (rep_const) */		ambig = 0;
5923: /* MUTANT (rep_const) */		ambig = -1;
5923: /* MUTANT (rep_const) */		ambig = ((1)+1);
5925: /* MUTANT (rep_op) */	if (ambig || !exact)
5925: /* MUTANT (negate) */	if(! (ambig && !exact))
5927: /* MUTANT (negate) */	    if(! (opterr))
5929: /* MUTANT (rep_const) */		       argv[1], argv[optind]);
5929: /* MUTANT (rep_const) */		       argv[-1], argv[optind]);
5930: /* MUTANT (del_stmt) */ /* 	    nextchar += strlen (nextchar); */ 
5930: /* MUTANT (rep_op) */	    nextchar -= strlen (nextchar);
5930: /* MUTANT (rep_op) */	    nextchar *= strlen (nextchar);
5930: /* MUTANT (rep_op) */	    nextchar %= strlen (nextchar);
5931: /* MUTANT (del_stmt) */ /* 	    optind++; */ 
5931: /* MUTANT (rep_op) */	    optind--;
5932: /* MUTANT (del_stmt) */ /* 	    return '?'; */ 
5934: /* MUTANT (rep_op) */	if (pfound == NULL)
5934: /* MUTANT (negate) */	if(! (pfound != NULL))
5936: /* MUTANT (del_stmt) */ /* 	    option_index = indfound; */ 
5937: /* MUTANT (negate) */	    if(! (*nameend))
5941: /* MUTANT (negate) */		if(! (pfound->has_arg))
5942: /* MUTANT (rep_op) */		  optarg = nameend - 1;
5942: /* MUTANT (rep_op) */		  optarg = nameend * 1;
5942: /* MUTANT (rep_op) */		  optarg = nameend % 1;
5942: /* MUTANT (rep_const) */		  optarg = nameend + 0;
5942: /* MUTANT (rep_const) */		  optarg = nameend + -1;
5942: /* MUTANT (rep_const) */		  optarg = nameend + ((1)+1);
5945: /* MUTANT (negate) */		    if(! (opterr))
5947: /* MUTANT (rep_op) */+s: option `-W %s' doesn't allow an argument\n"),
5947: /* MUTANT (rep_op) */-s: option `-W %s' doesn't allow an argument\n"),
5947: /* MUTANT (rep_op) */*s: option `-W %s' doesn't allow an argument\n"),
5947: /* MUTANT (rep_op) */%s: option `-W +s' doesn't allow an argument\n"),
5947: /* MUTANT (rep_op) */%s: option `-W -s' doesn't allow an argument\n"),
5947: /* MUTANT (rep_op) */%s: option `-W *s' doesn't allow an argument\n"),
5948: /* MUTANT (rep_const) */			       argv[1], pfound->name);
5948: /* MUTANT (rep_const) */			       argv[-1], pfound->name);
5950: /* MUTANT (del_stmt) */ /* 		    nextchar += strlen (nextchar); */ 
5950: /* MUTANT (rep_op) */		    nextchar -= strlen (nextchar);
5950: /* MUTANT (rep_op) */		    nextchar *= strlen (nextchar);
5950: /* MUTANT (rep_op) */		    nextchar %= strlen (nextchar);
5951: /* MUTANT (del_stmt) */ /* 		    return '?'; */ 
5954: /* MUTANT (rep_op) */	    else if (pfound->has_arg != 1)
5954: /* MUTANT (rep_const) */	    else if (pfound->has_arg == 0)
5954: /* MUTANT (rep_const) */	    else if (pfound->has_arg == -1)
5954: /* MUTANT (rep_const) */	    else if (pfound->has_arg == ((1)+1))
5954: /* MUTANT (negate) */	    else if(! (pfound->has_arg == 1))
5956: /* MUTANT (rep_op) */		if (optind <= argc)
5956: /* MUTANT (rep_op) */		if (optind > argc)
5956: /* MUTANT (rep_op) */		if (optind >= argc)
5956: /* MUTANT (rep_op) */		if (optind == argc)
5956: /* MUTANT (rep_op) */		if (optind != argc)
5956: /* MUTANT (negate) */		if(! (optind < argc))
5957: /* MUTANT (rep_op) */		  optarg = argv[optind--];
5960: /* MUTANT (negate) */		    if(! (opterr))
5963: /* MUTANT (rep_const) */			       argv[1], argv[optind - 1]);
5963: /* MUTANT (rep_const) */			       argv[-1], argv[optind - 1]);
5963: /* MUTANT (rep_const) */			       argv[0], argv[optind - 0]);
5963: /* MUTANT (rep_const) */			       argv[0], argv[optind - -1]);
5963: /* MUTANT (rep_const) */			       argv[0], argv[optind - ((1)+1)]);
5964: /* MUTANT (del_stmt) */ /* 		    nextchar += strlen (nextchar); */ 
5964: /* MUTANT (rep_op) */		    nextchar -= strlen (nextchar);
5964: /* MUTANT (rep_op) */		    nextchar *= strlen (nextchar);
5964: /* MUTANT (rep_op) */		    nextchar %= strlen (nextchar);
5965: /* MUTANT (del_stmt) */ /* 		    return optstring[0] == ':' ? ':' : '?'; */ 
5965: /* MUTANT (rep_op) */		    return optstring[0] != ':' ? ':' : '?';
5965: /* MUTANT (rep_const) */		    return optstring[1] == ':' ? ':' : '?';
5965: /* MUTANT (rep_const) */		    return optstring[-1] == ':' ? ':' : '?';
5968: /* MUTANT (rep_op) */	    nextchar -= strlen (nextchar);
5968: /* MUTANT (rep_op) */	    nextchar *= strlen (nextchar);
5968: /* MUTANT (rep_op) */	    nextchar %= strlen (nextchar);
5969: /* MUTANT (rep_op) */	    if (longind == NULL)
5969: /* MUTANT (negate) */	    if(! (longind != NULL))
5971: /* MUTANT (negate) */	    if(! (pfound->flag))
5973: /* MUTANT (del_stmt) */ /* 		*(pfound->flag) = pfound->val; */ 
5974: /* MUTANT (del_stmt) */ /* 		return 0; */ 
5974: /* MUTANT (rep_const) */		return 1;
5974: /* MUTANT (rep_const) */		return -1;
5979: /* MUTANT (del_stmt) */ /* 	  return 'W'; */ 	/* Let the application handle it.   */
5981: /* MUTANT (rep_op) */    if (temp[1] != ':')
5981: /* MUTANT (rep_const) */    if (temp[0] == ':')
5981: /* MUTANT (rep_const) */    if (temp[-1] == ':')
5981: /* MUTANT (rep_const) */    if (temp[((1)+1)] == ':')
5981: /* MUTANT (negate) */    if(! (temp[1] == ':'))
5983: /* MUTANT (rep_op) */	if (temp[2] != ':')
5983: /* MUTANT (rep_const) */	if (temp[0] == ':')
5983: /* MUTANT (rep_const) */	if (temp[1] == ':')
5983: /* MUTANT (rep_const) */	if (temp[-1] == ':')
5983: /* MUTANT (rep_const) */	if (temp[((2)+1)] == ':')
5983: /* MUTANT (rep_const) */	if (temp[((2)-1)] == ':')
5983: /* MUTANT (negate) */	if(! (temp[2] == ':'))
5986: /* MUTANT (rep_op) */	    if (*nextchar == '\0')
5986: /* MUTANT (rep_const) */	    if (*nextchar != '\1')
5986: /* MUTANT (rep_const) */	    if (*nextchar != '\-1')
5986: /* MUTANT (negate) */	    if(! (*nextchar != '\0'))
5988: /* MUTANT (del_stmt) */ /* 		optarg = nextchar; */ 
5989: /* MUTANT (del_stmt) */ /* 		optind++; */ 
5989: /* MUTANT (rep_op) */		optind--;
5993: /* MUTANT (del_stmt) */ /* 	    nextchar = NULL; */ 
5998: /* MUTANT (rep_op) */	    if (*nextchar == '\0')
5998: /* MUTANT (rep_const) */	    if (*nextchar != '\1')
5998: /* MUTANT (rep_const) */	    if (*nextchar != '\-1')
5998: /* MUTANT (negate) */	    if(! (*nextchar != '\0'))
6000: /* MUTANT (del_stmt) */ /* 		optarg = nextchar; */ 
6003: /* MUTANT (del_stmt) */ /* 		optind++; */ 
6003: /* MUTANT (rep_op) */		optind--;
6005: /* MUTANT (rep_op) */	    else if (optind != argc)
6005: /* MUTANT (negate) */	    else if(! (optind == argc))
6007: /* MUTANT (negate) */		if(! (opterr))
6012: /* MUTANT (rep_const) */			   argv[1], c);
6012: /* MUTANT (rep_const) */			   argv[-1], c);
6015: /* MUTANT (rep_op) */		if (optstring[0] != ':')
6015: /* MUTANT (rep_const) */		if (optstring[1] == ':')
6015: /* MUTANT (rep_const) */		if (optstring[-1] == ':')
6015: /* MUTANT (negate) */		if(! (optstring[0] == ':'))
6023: /* MUTANT (rep_op) */	      optarg = argv[optind--];
6024: /* MUTANT (del_stmt) */ /* 	    nextchar = NULL; */ 
6034: /* MUTANT (del_stmt) */ /*      char *const *argv; */ 
6035: /* MUTANT (del_stmt) */ /*      const char *optstring; */ 
6038: /* MUTANT (rep_const) */			   (const struct option *) 1,
6038: /* MUTANT (rep_const) */			   (const struct option *) -1,
6039: /* MUTANT (rep_const) */			   (int *) 1,
6039: /* MUTANT (rep_const) */			   (int *) -1,
6040: /* MUTANT (rep_const) */			   1);
6040: /* MUTANT (rep_const) */			   -1);
6053: /* MUTANT (del_stmt) */ /*      char **argv; */ 
6055: /* MUTANT (del_stmt) */ /*   int c; */ 
6056: /* MUTANT (del_stmt) */ /*   int digit_optind = 0; */ 
6056: /* MUTANT (rep_const) */  int digit_optind = 1;
6056: /* MUTANT (rep_const) */  int digit_optind = -1;
6058: /* MUTANT (rep_const) */  while (0)
6058: /* MUTANT (rep_const) */  while (-1)
6058: /* MUTANT (rep_const) */  while (((1)+1))
6058: /* MUTANT (negate) */  while(! (1))
6060: /* MUTANT (del_stmt) */ /*       int this_option_optind = optind ? optind : 1; */ 
6060: /* MUTANT (rep_const) */      int this_option_optind = optind ? optind : 0;
6060: /* MUTANT (rep_const) */      int this_option_optind = optind ? optind : -1;
6060: /* MUTANT (rep_const) */      int this_option_optind = optind ? optind : ((1)+1);
6062: /* MUTANT (del_stmt) */ /*       c = getopt (argc, argv, "abc:d:0123456789"); */ 
6062: /* MUTANT (rep_const) */      c = getopt (argc, argv, "abc:d:0");
6062: /* MUTANT (rep_const) */      c = getopt (argc, argv, "abc:d:1");
6062: /* MUTANT (rep_const) */      c = getopt (argc, argv, "abc:d:-1");
6062: /* MUTANT (rep_const) */      c = getopt (argc, argv, "abc:d:((0123456789)+1)");
6062: /* MUTANT (rep_const) */      c = getopt (argc, argv, "abc:d:((0123456789)-1)");
6063: /* MUTANT (rep_op) */      if (c != -1)
6063: /* MUTANT (rep_const) */      if (c == 0)
6063: /* MUTANT (rep_const) */      if (c == 1)
6063: /* MUTANT (rep_const) */      if (c == ((-1)+1))
6063: /* MUTANT (rep_const) */      if (c == ((-1)-1))
6063: /* MUTANT (negate) */      if(! (c == -1))
6068: /* MUTANT (rep_const) */	case '1':
6068: /* MUTANT (rep_const) */	case '-1':
6069: /* MUTANT (rep_const) */	case '0':
6069: /* MUTANT (rep_const) */	case '-1':
6069: /* MUTANT (rep_const) */	case '((1)+1)':
6070: /* MUTANT (rep_const) */	case '0':
6070: /* MUTANT (rep_const) */	case '1':
6070: /* MUTANT (rep_const) */	case '-1':
6070: /* MUTANT (rep_const) */	case '((2)+1)':
6070: /* MUTANT (rep_const) */	case '((2)-1)':
6071: /* MUTANT (rep_const) */	case '0':
6071: /* MUTANT (rep_const) */	case '1':
6071: /* MUTANT (rep_const) */	case '-1':
6071: /* MUTANT (rep_const) */	case '((3)+1)':
6071: /* MUTANT (rep_const) */	case '((3)-1)':
6072: /* MUTANT (rep_const) */	case '0':
6072: /* MUTANT (rep_const) */	case '1':
6072: /* MUTANT (rep_const) */	case '-1':
6072: /* MUTANT (rep_const) */	case '((4)+1)':
6072: /* MUTANT (rep_const) */	case '((4)-1)':
6073: /* MUTANT (rep_const) */	case '0':
6073: /* MUTANT (rep_const) */	case '1':
6073: /* MUTANT (rep_const) */	case '-1':
6073: /* MUTANT (rep_const) */	case '((5)+1)':
6073: /* MUTANT (rep_const) */	case '((5)-1)':
6074: /* MUTANT (rep_const) */	case '0':
6074: /* MUTANT (rep_const) */	case '1':
6074: /* MUTANT (rep_const) */	case '-1':
6074: /* MUTANT (rep_const) */	case '((6)+1)':
6074: /* MUTANT (rep_const) */	case '((6)-1)':
6075: /* MUTANT (rep_const) */	case '0':
6075: /* MUTANT (rep_const) */	case '1':
6075: /* MUTANT (rep_const) */	case '-1':
6075: /* MUTANT (rep_const) */	case '((7)+1)':
6075: /* MUTANT (rep_const) */	case '((7)-1)':
6076: /* MUTANT (rep_const) */	case '0':
6076: /* MUTANT (rep_const) */	case '1':
6076: /* MUTANT (rep_const) */	case '-1':
6076: /* MUTANT (rep_const) */	case '((8)+1)':
6076: /* MUTANT (rep_const) */	case '((8)-1)':
6077: /* MUTANT (rep_const) */	case '0':
6077: /* MUTANT (rep_const) */	case '1':
6077: /* MUTANT (rep_const) */	case '-1':
6077: /* MUTANT (rep_const) */	case '((9)+1)':
6077: /* MUTANT (rep_const) */	case '((9)-1)':
6078: /* MUTANT (rep_op) */	  if (digit_optind == 0 && digit_optind != this_option_optind)
6078: /* MUTANT (rep_op) */	  if (digit_optind != 0 || digit_optind != this_option_optind)
6078: /* MUTANT (rep_op) */	  if (digit_optind != 0 && digit_optind == this_option_optind)
6078: /* MUTANT (rep_const) */	  if (digit_optind != 1 && digit_optind != this_option_optind)
6078: /* MUTANT (rep_const) */	  if (digit_optind != -1 && digit_optind != this_option_optind)
6078: /* MUTANT (negate) */	  if(! (digit_optind != 0 && digit_optind != this_option_optind))
6080: /* MUTANT (del_stmt) */ /* 	  digit_optind = this_option_optind; */ 
6081: /* MUTANT (del_stmt) */ /* 	  printf ("option %c\n", c); */ 
6082: /* MUTANT (del_stmt) */ /* 	  break; */ 
6086: /* MUTANT (del_stmt) */ /* 	  break; */ 
6090: /* MUTANT (del_stmt) */ /* 	  break; */ 
6094: /* MUTANT (del_stmt) */ /* 	  break; */ 
6100: /* MUTANT (rep_const) */	  printf ("?? getopt returned character code 1%o ??\n", c);
6100: /* MUTANT (rep_const) */	  printf ("?? getopt returned character code -1%o ??\n", c);
6104: /* MUTANT (rep_op) */  if (optind <= argc)
6104: /* MUTANT (rep_op) */  if (optind > argc)
6104: /* MUTANT (rep_op) */  if (optind >= argc)
6104: /* MUTANT (rep_op) */  if (optind == argc)
6104: /* MUTANT (rep_op) */  if (optind != argc)
6104: /* MUTANT (negate) */  if(! (optind < argc))
6106: /* MUTANT (del_stmt) */ /*       printf ("non-option ARGV-elements: "); */ 
6107: /* MUTANT (rep_op) */      while (optind <= argc)
6107: /* MUTANT (rep_op) */      while (optind > argc)
6107: /* MUTANT (rep_op) */      while (optind >= argc)
6107: /* MUTANT (rep_op) */      while (optind == argc)
6107: /* MUTANT (rep_op) */      while (optind != argc)
6107: /* MUTANT (negate) */      while(! (optind < argc))
6108: /* MUTANT (rep_op) */	printf ("%s ", argv[optind--]);
6109: /* MUTANT (del_stmt) */ /*       printf ("\n"); */ 
6112: /* MUTANT (rep_const) */  exit (1);
6112: /* MUTANT (rep_const) */  exit (-1);
6138: #if flag_config==1  /* MUTANT (rep_const) */
6138: #if flag_config==-1  /* MUTANT (rep_const) */
6140: #define flag_config 0 /* MUTANT (rep_const) */
6140: #define flag_config -1 /* MUTANT (rep_const) */
6140: #define flag_config ((1)+1) /* MUTANT (rep_const) */
6164: #define GETOPT_INTERFACE_VERSION 0 /* MUTANT (rep_const) */
6164: #define GETOPT_INTERFACE_VERSION 1 /* MUTANT (rep_const) */
6164: #define GETOPT_INTERFACE_VERSION -1 /* MUTANT (rep_const) */
6164: #define GETOPT_INTERFACE_VERSION ((2)+1) /* MUTANT (rep_const) */
6164: #define GETOPT_INTERFACE_VERSION ((2)-1) /* MUTANT (rep_const) */
6165: #if !defined (_LIBC) && defined (__GLIBC__) && __GLIBC__ >= 0 /* MUTANT (rep_const) */
6165: #if !defined (_LIBC) && defined (__GLIBC__) && __GLIBC__ >= 1 /* MUTANT (rep_const) */
6165: #if !defined (_LIBC) && defined (__GLIBC__) && __GLIBC__ >= -1 /* MUTANT (rep_const) */
6165: #if !defined (_LIBC) && defined (__GLIBC__) && __GLIBC__ >= ((2)+1) /* MUTANT (rep_const) */
6165: #if !defined (_LIBC) && defined (__GLIBC__) && __GLIBC__ >= ((2)-1) /* MUTANT (rep_const) */
6166: #if flag_gnuversions==1 /* MUTANT (rep_const) */
6166: #if flag_gnuversions==-1 /* MUTANT (rep_const) */
6168: #define flag_gnuversions 0 /* MUTANT (rep_const) */
6168: #define flag_gnuversions -1 /* MUTANT (rep_const) */
6168: #define flag_gnuversions ((1)+1) /* MUTANT (rep_const) */
6181: #if flag_stdlib==1 /* MUTANT (rep_const) */
6181: #if flag_stdlib==-1 /* MUTANT (rep_const) */
6183: #define flag_stdlib 0 /* MUTANT (rep_const) */
6183: #define flag_stdlib -1 /* MUTANT (rep_const) */
6183: #define flag_stdlib ((1)+1) /* MUTANT (rep_const) */
6188: #define NULL 1 /* MUTANT (rep_const) */
6188: #define NULL -1 /* MUTANT (rep_const) */
6194: /* MUTANT (del_stmt) */ /*      char *const *argv; */ 
6195: /* MUTANT (del_stmt) */ /*      const char *options; */ 
6196: /* MUTANT (del_stmt) */ /*      const struct option *long_options; */ 
6197: /* MUTANT (del_stmt) */ /*      int *opt_index; */ 
6199: /* MUTANT (del_stmt) */ /*   return _getopt_internal (argc, argv, options, long_options, opt_index, 0); */ 
6199: /* MUTANT (rep_const) */  return _getopt_internal (argc, argv, options, long_options, opt_index, 1);
6199: /* MUTANT (rep_const) */  return _getopt_internal (argc, argv, options, long_options, opt_index, -1);
6210: /* MUTANT (del_stmt) */ /*      char *const *argv; */ 
6211: /* MUTANT (del_stmt) */ /*      const char *options; */ 
6212: /* MUTANT (del_stmt) */ /*      const struct option *long_options; */ 
6213: /* MUTANT (del_stmt) */ /*      int *opt_index; */ 
6215: /* MUTANT (del_stmt) */ /*   return _getopt_internal (argc, argv, options, long_options, opt_index, 1); */ 
6215: /* MUTANT (rep_const) */  return _getopt_internal (argc, argv, options, long_options, opt_index, 0);
6215: /* MUTANT (rep_const) */  return _getopt_internal (argc, argv, options, long_options, opt_index, -1);
6215: /* MUTANT (rep_const) */  return _getopt_internal (argc, argv, options, long_options, opt_index, ((1)+1));
6228: /* MUTANT (del_stmt) */ /*      char **argv; */ 
6230: /* MUTANT (del_stmt) */ /*   int c; */ 
6231: /* MUTANT (del_stmt) */ /*   int digit_optind = 0; */ 
6231: /* MUTANT (rep_const) */  int digit_optind = 1;
6231: /* MUTANT (rep_const) */  int digit_optind = -1;
6233: /* MUTANT (rep_const) */  while (0)
6233: /* MUTANT (rep_const) */  while (-1)
6233: /* MUTANT (rep_const) */  while (((1)+1))
6233: /* MUTANT (negate) */  while(! (1))
6235: /* MUTANT (del_stmt) */ /*       int this_option_optind = optind ? optind : 1; */ 
6235: /* MUTANT (rep_const) */      int this_option_optind = optind ? optind : 0;
6235: /* MUTANT (rep_const) */      int this_option_optind = optind ? optind : -1;
6235: /* MUTANT (rep_const) */      int this_option_optind = optind ? optind : ((1)+1);
6236: /* MUTANT (del_stmt) */ /*       int option_index = 0; */ 
6236: /* MUTANT (rep_const) */      int option_index = 1;
6236: /* MUTANT (rep_const) */      int option_index = -1;
6239: /* MUTANT (rep_const) */	{"add", 0, 0, 0},
6239: /* MUTANT (rep_const) */	{"add", -1, 0, 0},
6239: /* MUTANT (rep_const) */	{"add", ((1)+1), 0, 0},
6239: /* MUTANT (rep_const) */	{"add", 1, 1, 0},
6239: /* MUTANT (rep_const) */	{"add", 1, -1, 0},
6239: /* MUTANT (rep_const) */	{"add", 1, 0, 1},
6239: /* MUTANT (rep_const) */	{"add", 1, 0, -1},
6240: /* MUTANT (rep_const) */	{"append", 1, 0, 0},
6240: /* MUTANT (rep_const) */	{"append", -1, 0, 0},
6240: /* MUTANT (rep_const) */	{"append", 0, 1, 0},
6240: /* MUTANT (rep_const) */	{"append", 0, -1, 0},
6240: /* MUTANT (rep_const) */	{"append", 0, 0, 1},
6240: /* MUTANT (rep_const) */	{"append", 0, 0, -1},
6241: /* MUTANT (rep_const) */	{"delete", 0, 0, 0},
6241: /* MUTANT (rep_const) */	{"delete", -1, 0, 0},
6241: /* MUTANT (rep_const) */	{"delete", ((1)+1), 0, 0},
6241: /* MUTANT (rep_const) */	{"delete", 1, 1, 0},
6241: /* MUTANT (rep_const) */	{"delete", 1, -1, 0},
6241: /* MUTANT (rep_const) */	{"delete", 1, 0, 1},
6241: /* MUTANT (rep_const) */	{"delete", 1, 0, -1},
6242: /* MUTANT (rep_const) */	{"verbose", 1, 0, 0},
6242: /* MUTANT (rep_const) */	{"verbose", -1, 0, 0},
6242: /* MUTANT (rep_const) */	{"verbose", 0, 1, 0},
6242: /* MUTANT (rep_const) */	{"verbose", 0, -1, 0},
6242: /* MUTANT (rep_const) */	{"verbose", 0, 0, 1},
6242: /* MUTANT (rep_const) */	{"verbose", 0, 0, -1},
6243: /* MUTANT (rep_const) */	{"create", 1, 0, 0},
6243: /* MUTANT (rep_const) */	{"create", -1, 0, 0},
6243: /* MUTANT (rep_const) */	{"create", 0, 1, 0},
6243: /* MUTANT (rep_const) */	{"create", 0, -1, 0},
6243: /* MUTANT (rep_const) */	{"create", 0, 0, 1},
6243: /* MUTANT (rep_const) */	{"create", 0, 0, -1},
6244: /* MUTANT (rep_const) */	{"file", 0, 0, 0},
6244: /* MUTANT (rep_const) */	{"file", -1, 0, 0},
6244: /* MUTANT (rep_const) */	{"file", ((1)+1), 0, 0},
6244: /* MUTANT (rep_const) */	{"file", 1, 1, 0},
6244: /* MUTANT (rep_const) */	{"file", 1, -1, 0},
6244: /* MUTANT (rep_const) */	{"file", 1, 0, 1},
6244: /* MUTANT (rep_const) */	{"file", 1, 0, -1},
6245: /* MUTANT (rep_const) */	{1, 0, 0, 0}
6245: /* MUTANT (rep_const) */	{-1, 0, 0, 0}
6245: /* MUTANT (rep_const) */	{0, 1, 0, 0}
6245: /* MUTANT (rep_const) */	{0, -1, 0, 0}
6245: /* MUTANT (rep_const) */	{0, 0, 1, 0}
6245: /* MUTANT (rep_const) */	{0, 0, -1, 0}
6245: /* MUTANT (rep_const) */	{0, 0, 0, 1}
6245: /* MUTANT (rep_const) */	{0, 0, 0, -1}
6248: /* MUTANT (rep_const) */      c = getopt_long (argc, argv, "abc:d:0",
6248: /* MUTANT (rep_const) */      c = getopt_long (argc, argv, "abc:d:1",
6248: /* MUTANT (rep_const) */      c = getopt_long (argc, argv, "abc:d:-1",
6248: /* MUTANT (rep_const) */      c = getopt_long (argc, argv, "abc:d:((0123456789)+1)",
6248: /* MUTANT (rep_const) */      c = getopt_long (argc, argv, "abc:d:((0123456789)-1)",
6250: /* MUTANT (rep_op) */      if (c != -1)
6250: /* MUTANT (rep_const) */      if (c == 0)
6250: /* MUTANT (rep_const) */      if (c == 1)
6250: /* MUTANT (rep_const) */      if (c == ((-1)+1))
6250: /* MUTANT (rep_const) */      if (c == ((-1)-1))
6250: /* MUTANT (negate) */      if(! (c == -1))
6255: /* MUTANT (rep_const) */	case 1:
6255: /* MUTANT (rep_const) */	case -1:
6257: /* MUTANT (negate) */	  if(! (optarg))
6259: /* MUTANT (del_stmt) */ /* 	  printf ("\n"); */ 
6260: /* MUTANT (del_stmt) */ /* 	  break; */ 
6262: /* MUTANT (rep_const) */	case '1':
6262: /* MUTANT (rep_const) */	case '-1':
6263: /* MUTANT (rep_const) */	case '0':
6263: /* MUTANT (rep_const) */	case '-1':
6263: /* MUTANT (rep_const) */	case '((1)+1)':
6264: /* MUTANT (rep_const) */	case '0':
6264: /* MUTANT (rep_const) */	case '1':
6264: /* MUTANT (rep_const) */	case '-1':
6264: /* MUTANT (rep_const) */	case '((2)+1)':
6264: /* MUTANT (rep_const) */	case '((2)-1)':
6265: /* MUTANT (rep_const) */	case '0':
6265: /* MUTANT (rep_const) */	case '1':
6265: /* MUTANT (rep_const) */	case '-1':
6265: /* MUTANT (rep_const) */	case '((3)+1)':
6265: /* MUTANT (rep_const) */	case '((3)-1)':
6266: /* MUTANT (rep_const) */	case '0':
6266: /* MUTANT (rep_const) */	case '1':
6266: /* MUTANT (rep_const) */	case '-1':
6266: /* MUTANT (rep_const) */	case '((4)+1)':
6266: /* MUTANT (rep_const) */	case '((4)-1)':
6267: /* MUTANT (rep_const) */	case '0':
6267: /* MUTANT (rep_const) */	case '1':
6267: /* MUTANT (rep_const) */	case '-1':
6267: /* MUTANT (rep_const) */	case '((5)+1)':
6267: /* MUTANT (rep_const) */	case '((5)-1)':
6268: /* MUTANT (rep_const) */	case '0':
6268: /* MUTANT (rep_const) */	case '1':
6268: /* MUTANT (rep_const) */	case '-1':
6268: /* MUTANT (rep_const) */	case '((6)+1)':
6268: /* MUTANT (rep_const) */	case '((6)-1)':
6269: /* MUTANT (rep_const) */	case '0':
6269: /* MUTANT (rep_const) */	case '1':
6269: /* MUTANT (rep_const) */	case '-1':
6269: /* MUTANT (rep_const) */	case '((7)+1)':
6269: /* MUTANT (rep_const) */	case '((7)-1)':
6270: /* MUTANT (rep_const) */	case '0':
6270: /* MUTANT (rep_const) */	case '1':
6270: /* MUTANT (rep_const) */	case '-1':
6270: /* MUTANT (rep_const) */	case '((8)+1)':
6270: /* MUTANT (rep_const) */	case '((8)-1)':
6271: /* MUTANT (rep_const) */	case '0':
6271: /* MUTANT (rep_const) */	case '1':
6271: /* MUTANT (rep_const) */	case '-1':
6271: /* MUTANT (rep_const) */	case '((9)+1)':
6271: /* MUTANT (rep_const) */	case '((9)-1)':
6272: /* MUTANT (rep_op) */	  if (digit_optind == 0 && digit_optind != this_option_optind)
6272: /* MUTANT (rep_op) */	  if (digit_optind != 0 || digit_optind != this_option_optind)
6272: /* MUTANT (rep_op) */	  if (digit_optind != 0 && digit_optind == this_option_optind)
6272: /* MUTANT (rep_const) */	  if (digit_optind != 1 && digit_optind != this_option_optind)
6272: /* MUTANT (rep_const) */	  if (digit_optind != -1 && digit_optind != this_option_optind)
6272: /* MUTANT (negate) */	  if(! (digit_optind != 0 && digit_optind != this_option_optind))
6274: /* MUTANT (del_stmt) */ /* 	  digit_optind = this_option_optind; */ 
6275: /* MUTANT (del_stmt) */ /* 	  printf (_("option %c\n"), c); */ 
6276: /* MUTANT (del_stmt) */ /* 	  break; */ 
6280: /* MUTANT (del_stmt) */ /* 	  break; */ 
6284: /* MUTANT (del_stmt) */ /* 	  break; */ 
6288: /* MUTANT (del_stmt) */ /* 	  break; */ 
6292: /* MUTANT (del_stmt) */ /* 	  break; */ 
6298: /* MUTANT (rep_const) */	  printf (_("?? getopt returned character code 1%o ??\n"), c);
6298: /* MUTANT (rep_const) */	  printf (_("?? getopt returned character code -1%o ??\n"), c);
6302: /* MUTANT (rep_op) */  if (optind <= argc)
6302: /* MUTANT (rep_op) */  if (optind > argc)
6302: /* MUTANT (rep_op) */  if (optind >= argc)
6302: /* MUTANT (rep_op) */  if (optind == argc)
6302: /* MUTANT (rep_op) */  if (optind != argc)
6302: /* MUTANT (negate) */  if(! (optind < argc))
6304: /* MUTANT (del_stmt) */ /*       printf (_("non-option ARGV-elements: ")); */ 
6305: /* MUTANT (rep_op) */      while (optind <= argc)
6305: /* MUTANT (rep_op) */      while (optind > argc)
6305: /* MUTANT (rep_op) */      while (optind >= argc)
6305: /* MUTANT (rep_op) */      while (optind == argc)
6305: /* MUTANT (rep_op) */      while (optind != argc)
6305: /* MUTANT (negate) */      while(! (optind < argc))
6306: /* MUTANT (rep_op) */	printf ("%s ", argv[optind--]);
6307: /* MUTANT (del_stmt) */ /*       printf ("\n"); */ 
6310: /* MUTANT (rep_const) */  exit (1);
6310: /* MUTANT (rep_const) */  exit (-1);
6335: #if flag_config==1 /* MUTANT (rep_const) */
6335: #if flag_config==-1 /* MUTANT (rep_const) */
6337: #define flag_config 0 /* MUTANT (rep_const) */
6337: #define flag_config -1 /* MUTANT (rep_const) */
6337: #define flag_config ((1)+1) /* MUTANT (rep_const) */
6347: #define NCHAR (UCHAR_MAX + 0) /* MUTANT (rep_const) */
6347: #define NCHAR (UCHAR_MAX + -1) /* MUTANT (rep_const) */
6347: #define NCHAR (UCHAR_MAX + ((1)+1)) /* MUTANT (rep_const) */
6350: /* MUTANT (del_stmt) */ /* static void Ecompile PARAMS((char *, size_t)); */ 
6351: /* MUTANT (del_stmt) */ /* static char *EGexecute PARAMS((char *, size_t, char **)); */ 
6352: /* MUTANT (del_stmt) */ /* static void Fcompile PARAMS((char *, size_t)); */ 
6353: /* MUTANT (del_stmt) */ /* static char *Fexecute PARAMS((char *, size_t, char **)); */ 
6354: /* MUTANT (del_stmt) */ /* static void kwsinit PARAMS((void)); */ 
6367: /* MUTANT (rep_const) */  { 1, 0, 0 },
6367: /* MUTANT (rep_const) */  { -1, 0, 0 },
6367: /* MUTANT (rep_const) */  { 0, 1, 0 },
6367: /* MUTANT (rep_const) */  { 0, -1, 0 },
6367: /* MUTANT (rep_const) */  { 0, 0, 1 },
6367: /* MUTANT (rep_const) */  { 0, 0, -1 },
6377: /* MUTANT (del_stmt) */ /* static struct re_pattern_buffer regex; */ 
6382: /* MUTANT (del_stmt) */ /* static kwset_t kwset; */ 
6387: /* MUTANT (del_stmt) */ /* static int lastexact; */ 
6393: /* MUTANT (del_stmt) */ /*   fatal(mesg, 0); */ 
6393: /* MUTANT (rep_const) */  fatal(mesg, 1);
6393: /* MUTANT (rep_const) */  fatal(mesg, -1);
6399: /* MUTANT (del_stmt) */ /*   static char trans[NCHAR]; */ 
6400: /* MUTANT (del_stmt) */ /*   int i; */ 
6402: /* MUTANT (negate) */  if(! (match_icase))
6403: /* MUTANT (rep_op) */    for (i = 0; i <= NCHAR; ++i)
6403: /* MUTANT (rep_op) */    for (i = 0; i > NCHAR; ++i)
6403: /* MUTANT (rep_op) */    for (i = 0; i >= NCHAR; ++i)
6403: /* MUTANT (rep_op) */    for (i = 0; i == NCHAR; ++i)
6403: /* MUTANT (rep_op) */    for (i = 0; i != NCHAR; ++i)
6403: /* MUTANT (rep_op) */    for (i = 0; i < NCHAR; --i)
6403: /* MUTANT (rep_const) */    for (i = 1; i < NCHAR; ++i)
6403: /* MUTANT (rep_const) */    for (i = -1; i < NCHAR; ++i)
6406: /* MUTANT (rep_const) */  if (!(kwset = kwsalloc(match_icase ? trans : (char *) 1)))
6406: /* MUTANT (rep_const) */  if (!(kwset = kwsalloc(match_icase ? trans : (char *) -1)))
6406: /* MUTANT (negate) */  if(! (!(kwset = kwsalloc(match_icase ? trans : (char *) 0))))
6407: /* MUTANT (rep_const) */    fatal("memory exhausted", 1);
6407: /* MUTANT (rep_const) */    fatal("memory exhausted", -1);
6417: /* MUTANT (del_stmt) */ /*   struct dfamust *dm; */ 
6418: /* MUTANT (del_stmt) */ /*   char *err; */ 
6420: /* MUTANT (negate) */  if(! (dfa_1.musts))
6422: /* MUTANT (del_stmt) */ /*       kwsinit(); */ 
6428: /* MUTANT (negate) */	  if(! (!dm->exact))
6430: /* MUTANT (del_stmt) */ /* 	  ++lastexact; */ 
6430: /* MUTANT (rep_op) */	  --lastexact;
6431: /* MUTANT (rep_op) */	  if ((err = kwsincr(kwset, dm->must, strlen(dm->must))) == 0)
6431: /* MUTANT (rep_const) */	  if ((err = kwsincr(kwset, dm->must, strlen(dm->must))) != 1)
6431: /* MUTANT (rep_const) */	  if ((err = kwsincr(kwset, dm->must, strlen(dm->must))) != -1)
6431: /* MUTANT (negate) */	  if(! ((err = kwsincr(kwset, dm->must, strlen(dm->must))) != 0))
6432: /* MUTANT (rep_const) */	    fatal(err, 1);
6432: /* MUTANT (rep_const) */	    fatal(err, -1);
6438: /* MUTANT (negate) */	  if(! (dm->exact))
6440: /* MUTANT (rep_op) */	  if ((err = kwsincr(kwset, dm->must, strlen(dm->must))) == 0)
6440: /* MUTANT (rep_const) */	  if ((err = kwsincr(kwset, dm->must, strlen(dm->must))) != 1)
6440: /* MUTANT (rep_const) */	  if ((err = kwsincr(kwset, dm->must, strlen(dm->must))) != -1)
6440: /* MUTANT (negate) */	  if(! ((err = kwsincr(kwset, dm->must, strlen(dm->must))) != 0))
6441: /* MUTANT (rep_const) */	    fatal(err, 1);
6441: /* MUTANT (rep_const) */	    fatal(err, -1);
6443: /* MUTANT (rep_op) */      if ((err = kwsprep(kwset)) == 0)
6443: /* MUTANT (rep_const) */      if ((err = kwsprep(kwset)) != 1)
6443: /* MUTANT (rep_const) */      if ((err = kwsprep(kwset)) != -1)
6443: /* MUTANT (negate) */      if(! ((err = kwsprep(kwset)) != 0))
6444: /* MUTANT (rep_const) */	fatal(err, 1);
6444: /* MUTANT (rep_const) */	fatal(err, -1);
6451: /* MUTANT (del_stmt) */ /*      size_t size; */ 
6453: /* MUTANT (del_stmt) */ /*   const char *err; */ 
6455: /* MUTANT (del_stmt) */ /*   re_set_syntax(RE_SYNTAX_GREP | RE_HAT_LISTS_NOT_NEWLINE); */ 
6455: /* MUTANT (rep_op) */  re_set_syntax(RE_SYNTAX_GREP & RE_HAT_LISTS_NOT_NEWLINE);
6456: /* MUTANT (del_stmt) */ /*   dfasyntax(RE_SYNTAX_GREP | RE_HAT_LISTS_NOT_NEWLINE, match_icase); */ 
6456: /* MUTANT (rep_op) */  dfasyntax(RE_SYNTAX_GREP & RE_HAT_LISTS_NOT_NEWLINE, match_icase);
6458: /* MUTANT (rep_op) */  if ((err = re_compile_pattern(pattern, size, &regex)) == 0)
6458: /* MUTANT (rep_const) */  if ((err = re_compile_pattern(pattern, size, &regex)) != 1)
6458: /* MUTANT (rep_const) */  if ((err = re_compile_pattern(pattern, size, &regex)) != -1)
6458: /* MUTANT (negate) */  if(! ((err = re_compile_pattern(pattern, size, &regex)) != 0))
6459: /* MUTANT (rep_const) */    fatal(err, 1);
6459: /* MUTANT (rep_const) */    fatal(err, -1);
6461: /* MUTANT (del_stmt) */ /*   dfainit(&dfa_1); */ 
6467: /* MUTANT (rep_op) */  if (match_words && match_lines)
6467: /* MUTANT (negate) */  if(! (match_words || match_lines))
6475: /* MUTANT (del_stmt) */ /*       char *n = malloc(size + 50); */ 
6475: /* MUTANT (rep_op) */      char *n = malloc(size - 50);
6475: /* MUTANT (rep_op) */      char *n = malloc(size * 50);
6475: /* MUTANT (rep_op) */      char *n = malloc(size % 50);
6475: /* MUTANT (rep_const) */      char *n = malloc(size + 0);
6475: /* MUTANT (rep_const) */      char *n = malloc(size + 1);
6475: /* MUTANT (rep_const) */      char *n = malloc(size + -1);
6475: /* MUTANT (rep_const) */      char *n = malloc(size + ((50)+1));
6475: /* MUTANT (rep_const) */      char *n = malloc(size + ((50)-1));
6476: /* MUTANT (del_stmt) */ /*       int i = 0; */ 
6476: /* MUTANT (rep_const) */      int i = 1;
6476: /* MUTANT (rep_const) */      int i = -1;
6478: /* MUTANT (del_stmt) */ /*       strcpy(n, ""); */ 
6480: /* MUTANT (negate) */      if(! (match_lines))
6482: /* MUTANT (negate) */      if(! (match_words))
6483: /* MUTANT (rep_const) */	strcpy(n, "\\(^\\|[^1-9A-Za-z_]\\)\\(");
6483: /* MUTANT (rep_const) */	strcpy(n, "\\(^\\|[^-1-9A-Za-z_]\\)\\(");
6483: /* MUTANT (rep_const) */	strcpy(n, "\\(^\\|[^00A-Za-z_]\\)\\(");
6483: /* MUTANT (rep_const) */	strcpy(n, "\\(^\\|[^01A-Za-z_]\\)\\(");
6483: /* MUTANT (rep_const) */	strcpy(n, "\\(^\\|[^0-1A-Za-z_]\\)\\(");
6483: /* MUTANT (rep_const) */	strcpy(n, "\\(^\\|[^0((-9)+1)A-Za-z_]\\)\\(");
6483: /* MUTANT (rep_const) */	strcpy(n, "\\(^\\|[^0((-9)-1)A-Za-z_]\\)\\(");
6485: /* MUTANT (del_stmt) */ /*       i = strlen(n); */ 
6486: /* MUTANT (del_stmt) */ /*       memcpy(n + i, pattern, size); */ 
6486: /* MUTANT (rep_op) */      memcpy(n - i, pattern, size);
6486: /* MUTANT (rep_op) */      memcpy(n * i, pattern, size);
6486: /* MUTANT (rep_op) */      memcpy(n % i, pattern, size);
6487: /* MUTANT (del_stmt) */ /*       i += size; */ 
6487: /* MUTANT (rep_op) */      i -= size;
6487: /* MUTANT (rep_op) */      i *= size;
6487: /* MUTANT (rep_op) */      i %= size;
6489: /* MUTANT (negate) */      if(! (match_words))
6490: /* MUTANT (rep_op) */	strcpy(n - i, "\\)\\([^0-9A-Za-z_]\\|$\\)");
6490: /* MUTANT (rep_op) */	strcpy(n * i, "\\)\\([^0-9A-Za-z_]\\|$\\)");
6490: /* MUTANT (rep_op) */	strcpy(n % i, "\\)\\([^0-9A-Za-z_]\\|$\\)");
6490: /* MUTANT (rep_const) */	strcpy(n + i, "\\)\\([^1-9A-Za-z_]\\|$\\)");
6490: /* MUTANT (rep_const) */	strcpy(n + i, "\\)\\([^-1-9A-Za-z_]\\|$\\)");
6490: /* MUTANT (rep_const) */	strcpy(n + i, "\\)\\([^00A-Za-z_]\\|$\\)");
6490: /* MUTANT (rep_const) */	strcpy(n + i, "\\)\\([^01A-Za-z_]\\|$\\)");
6490: /* MUTANT (rep_const) */	strcpy(n + i, "\\)\\([^0-1A-Za-z_]\\|$\\)");
6490: /* MUTANT (rep_const) */	strcpy(n + i, "\\)\\([^0((-9)+1)A-Za-z_]\\|$\\)");
6490: /* MUTANT (rep_const) */	strcpy(n + i, "\\)\\([^0((-9)-1)A-Za-z_]\\|$\\)");
6491: /* MUTANT (negate) */      if(! (match_lines))
6492: /* MUTANT (rep_op) */	strcpy(n - i, "\\)$");
6492: /* MUTANT (rep_op) */	strcpy(n * i, "\\)$");
6492: /* MUTANT (rep_op) */	strcpy(n % i, "\\)$");
6494: /* MUTANT (del_stmt) */ /*       i += strlen(n + i); */ 
6494: /* MUTANT (rep_op) */      i -= strlen(n + i);
6494: /* MUTANT (rep_op) */      i *= strlen(n + i);
6494: /* MUTANT (rep_op) */      i %= strlen(n + i);
6494: /* MUTANT (rep_op) */      i += strlen(n - i);
6494: /* MUTANT (rep_op) */      i += strlen(n * i);
6494: /* MUTANT (rep_op) */      i += strlen(n % i);
6495: /* MUTANT (del_stmt) */ /*       dfacomp(n, i, &dfa_1, 1); */ 
6495: /* MUTANT (rep_const) */      dfacomp(n, i, &dfa_1, 0);
6495: /* MUTANT (rep_const) */      dfacomp(n, i, &dfa_1, -1);
6495: /* MUTANT (rep_const) */      dfacomp(n, i, &dfa_1, ((1)+1));
6498: /* MUTANT (rep_const) */    dfacomp(pattern, size, &dfa_1, 0);
6498: /* MUTANT (rep_const) */    dfacomp(pattern, size, &dfa_1, -1);
6498: /* MUTANT (rep_const) */    dfacomp(pattern, size, &dfa_1, ((1)+1));
6500: /* MUTANT (del_stmt) */ /*   kwsmusts(); */ 
6506: /* MUTANT (del_stmt) */ /*      size_t size; */ 
6508: /* MUTANT (del_stmt) */ /*   const char *err; */ 
6510: /* MUTANT (rep_op) */  if (strcmp(matcher, "posix-egrep") != 0)
6510: /* MUTANT (rep_const) */  if (strcmp(matcher, "posix-egrep") == 1)
6510: /* MUTANT (rep_const) */  if (strcmp(matcher, "posix-egrep") == -1)
6510: /* MUTANT (negate) */  if(! (strcmp(matcher, "posix-egrep") == 0))
6512: /* MUTANT (del_stmt) */ /*       re_set_syntax(RE_SYNTAX_POSIX_EGREP); */ 
6513: /* MUTANT (del_stmt) */ /*       dfasyntax(RE_SYNTAX_POSIX_EGREP, match_icase); */ 
6515: /* MUTANT (rep_op) */  else if (strcmp(matcher, "awk") != 0)
6515: /* MUTANT (rep_const) */  else if (strcmp(matcher, "awk") == 1)
6515: /* MUTANT (rep_const) */  else if (strcmp(matcher, "awk") == -1)
6515: /* MUTANT (negate) */  else if(! (strcmp(matcher, "awk") == 0))
6517: /* MUTANT (del_stmt) */ /*       re_set_syntax(RE_SYNTAX_AWK); */ 
6518: /* MUTANT (del_stmt) */ /*       dfasyntax(RE_SYNTAX_AWK, match_icase); */ 
6522: /* MUTANT (del_stmt) */ /*       re_set_syntax(RE_SYNTAX_EGREP); */ 
6523: /* MUTANT (del_stmt) */ /*       dfasyntax(RE_SYNTAX_EGREP, match_icase); */ 
6526: /* MUTANT (rep_op) */  if ((err = re_compile_pattern(pattern, size, &regex)) == 0)
6526: /* MUTANT (rep_const) */  if ((err = re_compile_pattern(pattern, size, &regex)) != 1)
6526: /* MUTANT (rep_const) */  if ((err = re_compile_pattern(pattern, size, &regex)) != -1)
6526: /* MUTANT (negate) */  if(! ((err = re_compile_pattern(pattern, size, &regex)) != 0))
6527: /* MUTANT (rep_const) */    fatal(err, 1);
6527: /* MUTANT (rep_const) */    fatal(err, -1);
6529: /* MUTANT (del_stmt) */ /*   dfainit(&dfa_1); */ 
6535: /* MUTANT (rep_op) */  if (match_words && match_lines)
6535: /* MUTANT (negate) */  if(! (match_words || match_lines))
6543: /* MUTANT (del_stmt) */ /*       char *n = malloc(size + 50); */ 
6543: /* MUTANT (rep_op) */      char *n = malloc(size - 50);
6543: /* MUTANT (rep_op) */      char *n = malloc(size * 50);
6543: /* MUTANT (rep_op) */      char *n = malloc(size % 50);
6543: /* MUTANT (rep_const) */      char *n = malloc(size + 0);
6543: /* MUTANT (rep_const) */      char *n = malloc(size + 1);
6543: /* MUTANT (rep_const) */      char *n = malloc(size + -1);
6543: /* MUTANT (rep_const) */      char *n = malloc(size + ((50)+1));
6543: /* MUTANT (rep_const) */      char *n = malloc(size + ((50)-1));
6544: /* MUTANT (del_stmt) */ /*       int i = 0; */ 
6544: /* MUTANT (rep_const) */      int i = 1;
6544: /* MUTANT (rep_const) */      int i = -1;
6546: /* MUTANT (del_stmt) */ /*       strcpy(n, ""); */ 
6548: /* MUTANT (negate) */      if(! (match_lines))
6550: /* MUTANT (negate) */      if(! (match_words))
6551: /* MUTANT (rep_const) */	strcpy(n, "(^|[^1-9A-Za-z_])(");
6551: /* MUTANT (rep_const) */	strcpy(n, "(^|[^-1-9A-Za-z_])(");
6551: /* MUTANT (rep_const) */	strcpy(n, "(^|[^00A-Za-z_])(");
6551: /* MUTANT (rep_const) */	strcpy(n, "(^|[^01A-Za-z_])(");
6551: /* MUTANT (rep_const) */	strcpy(n, "(^|[^0-1A-Za-z_])(");
6551: /* MUTANT (rep_const) */	strcpy(n, "(^|[^0((-9)+1)A-Za-z_])(");
6551: /* MUTANT (rep_const) */	strcpy(n, "(^|[^0((-9)-1)A-Za-z_])(");
6553: /* MUTANT (del_stmt) */ /*       i = strlen(n); */ 
6554: /* MUTANT (del_stmt) */ /*       memcpy(n + i, pattern, size); */ 
6554: /* MUTANT (rep_op) */      memcpy(n - i, pattern, size);
6554: /* MUTANT (rep_op) */      memcpy(n * i, pattern, size);
6554: /* MUTANT (rep_op) */      memcpy(n % i, pattern, size);
6555: /* MUTANT (del_stmt) */ /*       i += size; */ 
6555: /* MUTANT (rep_op) */      i -= size;
6555: /* MUTANT (rep_op) */      i *= size;
6555: /* MUTANT (rep_op) */      i %= size;
6557: /* MUTANT (negate) */      if(! (match_words))
6558: /* MUTANT (rep_op) */	strcpy(n - i, ")([^0-9A-Za-z_]|$)");
6558: /* MUTANT (rep_op) */	strcpy(n * i, ")([^0-9A-Za-z_]|$)");
6558: /* MUTANT (rep_op) */	strcpy(n % i, ")([^0-9A-Za-z_]|$)");
6558: /* MUTANT (rep_const) */	strcpy(n + i, ")([^1-9A-Za-z_]|$)");
6558: /* MUTANT (rep_const) */	strcpy(n + i, ")([^-1-9A-Za-z_]|$)");
6558: /* MUTANT (rep_const) */	strcpy(n + i, ")([^00A-Za-z_]|$)");
6558: /* MUTANT (rep_const) */	strcpy(n + i, ")([^01A-Za-z_]|$)");
6558: /* MUTANT (rep_const) */	strcpy(n + i, ")([^0-1A-Za-z_]|$)");
6558: /* MUTANT (rep_const) */	strcpy(n + i, ")([^0((-9)+1)A-Za-z_]|$)");
6558: /* MUTANT (rep_const) */	strcpy(n + i, ")([^0((-9)-1)A-Za-z_]|$)");
6559: /* MUTANT (negate) */      if(! (match_lines))
6560: /* MUTANT (rep_op) */	strcpy(n - i, ")$");
6560: /* MUTANT (rep_op) */	strcpy(n * i, ")$");
6560: /* MUTANT (rep_op) */	strcpy(n % i, ")$");
6562: /* MUTANT (del_stmt) */ /*       i += strlen(n + i); */ 
6562: /* MUTANT (rep_op) */      i -= strlen(n + i);
6562: /* MUTANT (rep_op) */      i *= strlen(n + i);
6562: /* MUTANT (rep_op) */      i %= strlen(n + i);
6562: /* MUTANT (rep_op) */      i += strlen(n - i);
6562: /* MUTANT (rep_op) */      i += strlen(n * i);
6562: /* MUTANT (rep_op) */      i += strlen(n % i);
6563: /* MUTANT (del_stmt) */ /*       dfacomp(n, i, &dfa_1, 1); */ 
6563: /* MUTANT (rep_const) */      dfacomp(n, i, &dfa_1, 0);
6563: /* MUTANT (rep_const) */      dfacomp(n, i, &dfa_1, -1);
6563: /* MUTANT (rep_const) */      dfacomp(n, i, &dfa_1, ((1)+1));
6566: /* MUTANT (rep_const) */    dfacomp(pattern, size, &dfa_1, 0);
6566: /* MUTANT (rep_const) */    dfacomp(pattern, size, &dfa_1, -1);
6566: /* MUTANT (rep_const) */    dfacomp(pattern, size, &dfa_1, ((1)+1));
6568: /* MUTANT (del_stmt) */ /*   kwsmusts(); */ 
6574: /* MUTANT (del_stmt) */ /*      size_t size; */ 
6575: /* MUTANT (del_stmt) */ /*      char **endp; */ 
6577: /* MUTANT (del_stmt) */ /*   register char *buflim, *beg, *end, save; */ 
6578: /* MUTANT (del_stmt) */ /*   int backref, start, len; */ 
6579: /* MUTANT (del_stmt) */ /*   struct kwsmatch kwsm; */ 
6580: /* MUTANT (del_stmt) */ /*   static struct re_registers regs; */  /* This is static on account of a BRAIN-DEAD
6583: /* MUTANT (del_stmt) */ /*   buflim = buf + size; */ 
6583: /* MUTANT (rep_op) */  buflim = buf - size;
6583: /* MUTANT (rep_op) */  buflim = buf * size;
6583: /* MUTANT (rep_op) */  buflim = buf % size;
6585: /* MUTANT (rep_op) */  for (beg = end = buf; end <= buflim; beg = end + 1)
6585: /* MUTANT (rep_op) */  for (beg = end = buf; end > buflim; beg = end + 1)
6585: /* MUTANT (rep_op) */  for (beg = end = buf; end >= buflim; beg = end + 1)
6585: /* MUTANT (rep_op) */  for (beg = end = buf; end == buflim; beg = end + 1)
6585: /* MUTANT (rep_op) */  for (beg = end = buf; end != buflim; beg = end + 1)
6585: /* MUTANT (rep_op) */  for (beg = end = buf; end < buflim; beg = end - 1)
6585: /* MUTANT (rep_op) */  for (beg = end = buf; end < buflim; beg = end * 1)
6585: /* MUTANT (rep_op) */  for (beg = end = buf; end < buflim; beg = end % 1)
6585: /* MUTANT (rep_const) */  for (beg = end = buf; end < buflim; beg = end + 0)
6585: /* MUTANT (rep_const) */  for (beg = end = buf; end < buflim; beg = end + -1)
6585: /* MUTANT (rep_const) */  for (beg = end = buf; end < buflim; beg = end + ((1)+1))
6587: /* MUTANT (negate) */      if(! (kwset))
6590: /* MUTANT (del_stmt) */ /* 	  beg = kwsexec(kwset, beg, buflim - beg, &kwsm); */ 
6591: /* MUTANT (negate) */	  if(! (!beg))
6595: /* MUTANT (del_stmt) */ /* 	  end = memchr(beg, '\n', buflim - beg); */ 
6596: /* MUTANT (negate) */	  if(! (!end))
6598: /* MUTANT (rep_op) */	  while (beg <= buf && beg[-1] != '\n')
6598: /* MUTANT (rep_op) */	  while (beg < buf && beg[-1] != '\n')
6598: /* MUTANT (rep_op) */	  while (beg >= buf && beg[-1] != '\n')
6598: /* MUTANT (rep_op) */	  while (beg == buf && beg[-1] != '\n')
6598: /* MUTANT (rep_op) */	  while (beg != buf && beg[-1] != '\n')
6598: /* MUTANT (rep_op) */	  while (beg > buf || beg[-1] != '\n')
6598: /* MUTANT (rep_op) */	  while (beg > buf && beg[-1] == '\n')
6598: /* MUTANT (rep_const) */	  while (beg > buf && beg[0] != '\n')
6598: /* MUTANT (rep_const) */	  while (beg > buf && beg[1] != '\n')
6598: /* MUTANT (rep_const) */	  while (beg > buf && beg[((-1)+1)] != '\n')
6598: /* MUTANT (rep_const) */	  while (beg > buf && beg[((-1)-1)] != '\n')
6598: /* MUTANT (negate) */	  while(! (beg > buf && beg[-1] != '\n'))
6599: /* MUTANT (rep_op) */	    ++beg;
6600: /* MUTANT (del_stmt) */ /* 	  save = *end; */ 
6601: /* MUTANT (rep_op) */	  if (kwsm.index <= lastexact)
6601: /* MUTANT (rep_op) */	  if (kwsm.index > lastexact)
6601: /* MUTANT (rep_op) */	  if (kwsm.index >= lastexact)
6601: /* MUTANT (rep_op) */	  if (kwsm.index == lastexact)
6601: /* MUTANT (rep_op) */	  if (kwsm.index != lastexact)
6601: /* MUTANT (negate) */	  if(! (kwsm.index < lastexact))
6603: /* MUTANT (rep_const) */	  if (!dfaexec(&dfa_1, beg, end, 1, (int *) 0, &backref))
6603: /* MUTANT (rep_const) */	  if (!dfaexec(&dfa_1, beg, end, -1, (int *) 0, &backref))
6603: /* MUTANT (rep_const) */	  if (!dfaexec(&dfa_1, beg, end, 0, (int *) 1, &backref))
6603: /* MUTANT (rep_const) */	  if (!dfaexec(&dfa_1, beg, end, 0, (int *) -1, &backref))
6603: /* MUTANT (negate) */	  if(! (!dfaexec(&dfa_1, beg, end, 0, (int *) 0, &backref)))
6605: /* MUTANT (del_stmt) */ /* 	      *end = save; */ 
6606: /* MUTANT (del_stmt) */ /* 	      continue; */ 
6610: /* MUTANT (negate) */	  if(! (!backref))
6616: /* MUTANT (del_stmt) */ /* 	  save = *buflim; */ 
6617: /* MUTANT (del_stmt) */ /* 	  beg = dfaexec(&dfa_1, beg, buflim, 0, (int *) 0, &backref); */ 
6617: /* MUTANT (rep_const) */	  beg = dfaexec(&dfa_1, beg, buflim, 1, (int *) 0, &backref);
6617: /* MUTANT (rep_const) */	  beg = dfaexec(&dfa_1, beg, buflim, -1, (int *) 0, &backref);
6617: /* MUTANT (rep_const) */	  beg = dfaexec(&dfa_1, beg, buflim, 0, (int *) 1, &backref);
6617: /* MUTANT (rep_const) */	  beg = dfaexec(&dfa_1, beg, buflim, 0, (int *) -1, &backref);
6618: /* MUTANT (del_stmt) */ /* 	  *buflim = save; */ 
6619: /* MUTANT (negate) */	  if(! (!beg))
6622: /* MUTANT (del_stmt) */ /* 	  end = memchr(beg, '\n', buflim - beg); */ 
6623: /* MUTANT (negate) */	  if(! (!end))
6625: /* MUTANT (rep_op) */	  while (beg <= buf && beg[-1] != '\n')
6625: /* MUTANT (rep_op) */	  while (beg < buf && beg[-1] != '\n')
6625: /* MUTANT (rep_op) */	  while (beg >= buf && beg[-1] != '\n')
6625: /* MUTANT (rep_op) */	  while (beg == buf && beg[-1] != '\n')
6625: /* MUTANT (rep_op) */	  while (beg != buf && beg[-1] != '\n')
6625: /* MUTANT (rep_op) */	  while (beg > buf || beg[-1] != '\n')
6625: /* MUTANT (rep_op) */	  while (beg > buf && beg[-1] == '\n')
6625: /* MUTANT (rep_const) */	  while (beg > buf && beg[0] != '\n')
6625: /* MUTANT (rep_const) */	  while (beg > buf && beg[1] != '\n')
6625: /* MUTANT (rep_const) */	  while (beg > buf && beg[((-1)+1)] != '\n')
6625: /* MUTANT (rep_const) */	  while (beg > buf && beg[((-1)-1)] != '\n')
6625: /* MUTANT (negate) */	  while(! (beg > buf && beg[-1] != '\n'))
6626: /* MUTANT (rep_op) */	    ++beg;
6628: /* MUTANT (negate) */	  if(! (!backref))
6633: /* MUTANT (rep_const) */      regex.not_eol = 1;
6633: /* MUTANT (rep_const) */      regex.not_eol = -1;
6634: /* MUTANT (rep_op) */      if ((start = re_search(&regex, beg, end - beg, 0, end - beg, &regs)) <= 0)
6634: /* MUTANT (rep_op) */      if ((start = re_search(&regex, beg, end - beg, 0, end - beg, &regs)) < 0)
6634: /* MUTANT (rep_op) */      if ((start = re_search(&regex, beg, end - beg, 0, end - beg, &regs)) > 0)
6634: /* MUTANT (rep_op) */      if ((start = re_search(&regex, beg, end - beg, 0, end - beg, &regs)) == 0)
6634: /* MUTANT (rep_op) */      if ((start = re_search(&regex, beg, end - beg, 0, end - beg, &regs)) != 0)
6634: /* MUTANT (rep_const) */      if ((start = re_search(&regex, beg, end - beg, 1, end - beg, &regs)) >= 0)
6634: /* MUTANT (rep_const) */      if ((start = re_search(&regex, beg, end - beg, -1, end - beg, &regs)) >= 0)
6634: /* MUTANT (rep_const) */      if ((start = re_search(&regex, beg, end - beg, 0, end - beg, &regs)) >= 1)
6634: /* MUTANT (rep_const) */      if ((start = re_search(&regex, beg, end - beg, 0, end - beg, &regs)) >= -1)
6634: /* MUTANT (negate) */      if(! ((start = re_search(&regex, beg, end - beg, 0, end - beg, &regs)) >= 0))
6636: /* MUTANT (del_stmt) */ /* 	  len = regs.end[0] - start; */ 
6636: /* MUTANT (rep_const) */	  len = regs.end[1] - start;
6636: /* MUTANT (rep_const) */	  len = regs.end[-1] - start;
6637: /* MUTANT (rep_op) */	  if ((!match_lines || !match_words)
6638: /* MUTANT (rep_op) */	      && (match_lines && len == end - beg))
6638: /* MUTANT (rep_op) */	      || (match_lines || len == end - beg))
6638: /* MUTANT (rep_op) */	      || (match_lines && len != end - beg))
6646: /* MUTANT (negate) */	  if(! (match_words))
6647: /* MUTANT (rep_op) */	    while (start <= 0)
6647: /* MUTANT (rep_op) */	    while (start < 0)
6647: /* MUTANT (rep_op) */	    while (start > 0)
6647: /* MUTANT (rep_op) */	    while (start == 0)
6647: /* MUTANT (rep_op) */	    while (start != 0)
6647: /* MUTANT (rep_const) */	    while (start >= 1)
6647: /* MUTANT (rep_const) */	    while (start >= -1)
6647: /* MUTANT (negate) */	    while(! (start >= 0))
6649: /* MUTANT (rep_op) */		if ((start != 0 || !WCHAR(beg[start - 1]))
6649: /* MUTANT (rep_op) */		if ((start == 0 && !WCHAR(beg[start - 1]))
6649: /* MUTANT (rep_const) */		if ((start == 1 || !WCHAR(beg[start - 1]))
6649: /* MUTANT (rep_const) */		if ((start == -1 || !WCHAR(beg[start - 1]))
6649: /* MUTANT (rep_const) */		if ((start == 0 || !WCHAR(beg[start - 0]))
6649: /* MUTANT (rep_const) */		if ((start == 0 || !WCHAR(beg[start - -1]))
6649: /* MUTANT (rep_const) */		if ((start == 0 || !WCHAR(beg[start - ((1)+1)]))
6650: /* MUTANT (rep_op) */		    || (len == end - beg || !WCHAR(beg[start + len])))
6650: /* MUTANT (rep_op) */		    && (len != end - beg || !WCHAR(beg[start + len])))
6650: /* MUTANT (rep_op) */		    && (len == end - beg && !WCHAR(beg[start + len])))
6650: /* MUTANT (rep_op) */		    && (len == end - beg || !WCHAR(beg[start - len])))
6650: /* MUTANT (rep_op) */		    && (len == end - beg || !WCHAR(beg[start * len])))
6650: /* MUTANT (rep_op) */		    && (len == end - beg || !WCHAR(beg[start % len])))
6652: /* MUTANT (rep_op) */		if (len <= 0)
6652: /* MUTANT (rep_op) */		if (len < 0)
6652: /* MUTANT (rep_op) */		if (len >= 0)
6652: /* MUTANT (rep_op) */		if (len == 0)
6652: /* MUTANT (rep_op) */		if (len != 0)
6652: /* MUTANT (rep_const) */		if (len > 1)
6652: /* MUTANT (rep_const) */		if (len > -1)
6652: /* MUTANT (negate) */		if(! (len > 0))
6655: /* MUTANT (del_stmt) */ /* 		    --len; */ 
6655: /* MUTANT (rep_op) */		    ++len;
6656: /* MUTANT (del_stmt) */ /* 		    regex.not_eol = 1; */ 
6656: /* MUTANT (rep_const) */		    regex.not_eol = 0;
6656: /* MUTANT (rep_const) */		    regex.not_eol = -1;
6656: /* MUTANT (rep_const) */		    regex.not_eol = ((1)+1);
6657: /* MUTANT (del_stmt) */ /* 		    len = re_match(&regex, beg, start + len, start, &regs); */ 
6657: /* MUTANT (rep_op) */		    len = re_match(&regex, beg, start - len, start, &regs);
6657: /* MUTANT (rep_op) */		    len = re_match(&regex, beg, start * len, start, &regs);
6657: /* MUTANT (rep_op) */		    len = re_match(&regex, beg, start % len, start, &regs);
6659: /* MUTANT (rep_op) */		if (len < 0)
6659: /* MUTANT (rep_op) */		if (len > 0)
6659: /* MUTANT (rep_op) */		if (len >= 0)
6659: /* MUTANT (rep_op) */		if (len == 0)
6659: /* MUTANT (rep_op) */		if (len != 0)
6659: /* MUTANT (rep_const) */		if (len <= 1)
6659: /* MUTANT (rep_const) */		if (len <= -1)
6659: /* MUTANT (negate) */		if(! (len <= 0))
6662: /* MUTANT (rep_op) */		    if (start != end - beg)
6662: /* MUTANT (negate) */		    if(! (start == end - beg))
6664: /* MUTANT (del_stmt) */ /* 		    ++start; */ 
6664: /* MUTANT (rep_op) */		    --start;
6665: /* MUTANT (del_stmt) */ /* 		    regex.not_eol = 0; */ 
6665: /* MUTANT (rep_const) */		    regex.not_eol = 1;
6665: /* MUTANT (rep_const) */		    regex.not_eol = -1;
6668: /* MUTANT (del_stmt) */ /* 		    len = regs.end[0] - start; */ 
6668: /* MUTANT (rep_const) */		    len = regs.end[1] - start;
6668: /* MUTANT (rep_const) */		    len = regs.end[-1] - start;
6675: /* MUTANT (rep_const) */  return 1;
6675: /* MUTANT (rep_const) */  return -1;
6678: /* MUTANT (rep_op) */  *endp = end <= buflim ? end + 1 : end;
6678: /* MUTANT (rep_op) */  *endp = end > buflim ? end + 1 : end;
6678: /* MUTANT (rep_op) */  *endp = end >= buflim ? end + 1 : end;
6678: /* MUTANT (rep_op) */  *endp = end == buflim ? end + 1 : end;
6678: /* MUTANT (rep_op) */  *endp = end != buflim ? end + 1 : end;
6678: /* MUTANT (rep_op) */  *endp = end < buflim ? end - 1 : end;
6678: /* MUTANT (rep_op) */  *endp = end < buflim ? end * 1 : end;
6678: /* MUTANT (rep_op) */  *endp = end < buflim ? end % 1 : end;
6678: /* MUTANT (rep_const) */  *endp = end < buflim ? end + 0 : end;
6678: /* MUTANT (rep_const) */  *endp = end < buflim ? end + -1 : end;
6678: /* MUTANT (rep_const) */  *endp = end < buflim ? end + ((1)+1) : end;
6679: /* MUTANT (del_stmt) */ /*   return beg; */ 
6685: /* MUTANT (del_stmt) */ /*      size_t size; */ 
6687: /* MUTANT (del_stmt) */ /*   char *beg, *lim, *err; */ 
6689: /* MUTANT (del_stmt) */ /*   kwsinit(); */ 
6690: /* MUTANT (del_stmt) */ /*   beg = pattern; */ 
6693: /* MUTANT (rep_op) */      for (lim = beg; lim <= pattern + size && *lim != '\n'; ++lim)
6693: /* MUTANT (rep_op) */      for (lim = beg; lim > pattern + size && *lim != '\n'; ++lim)
6693: /* MUTANT (rep_op) */      for (lim = beg; lim >= pattern + size && *lim != '\n'; ++lim)
6693: /* MUTANT (rep_op) */      for (lim = beg; lim == pattern + size && *lim != '\n'; ++lim)
6693: /* MUTANT (rep_op) */      for (lim = beg; lim != pattern + size && *lim != '\n'; ++lim)
6693: /* MUTANT (rep_op) */      for (lim = beg; lim < pattern - size && *lim != '\n'; ++lim)
6693: /* MUTANT (rep_op) */      for (lim = beg; lim < pattern * size && *lim != '\n'; ++lim)
6693: /* MUTANT (rep_op) */      for (lim = beg; lim < pattern % size && *lim != '\n'; ++lim)
6693: /* MUTANT (rep_op) */      for (lim = beg; lim < pattern + size || *lim != '\n'; ++lim)
6693: /* MUTANT (rep_op) */      for (lim = beg; lim < pattern + size && *lim == '\n'; ++lim)
6693: /* MUTANT (rep_op) */      for (lim = beg; lim < pattern + size && *lim != '\n'; --lim)
6695: /* MUTANT (rep_op) */      if ((err = kwsincr(kwset, beg, lim - beg)) == 0)
6695: /* MUTANT (rep_const) */      if ((err = kwsincr(kwset, beg, lim - beg)) != 1)
6695: /* MUTANT (rep_const) */      if ((err = kwsincr(kwset, beg, lim - beg)) != -1)
6695: /* MUTANT (negate) */      if(! ((err = kwsincr(kwset, beg, lim - beg)) != 0))
6696: /* MUTANT (rep_const) */	fatal(err, 1);
6696: /* MUTANT (rep_const) */	fatal(err, -1);
6697: /* MUTANT (rep_op) */      if (lim <= pattern + size)
6697: /* MUTANT (rep_op) */      if (lim > pattern + size)
6697: /* MUTANT (rep_op) */      if (lim >= pattern + size)
6697: /* MUTANT (rep_op) */      if (lim == pattern + size)
6697: /* MUTANT (rep_op) */      if (lim != pattern + size)
6697: /* MUTANT (rep_op) */      if (lim < pattern - size)
6697: /* MUTANT (rep_op) */      if (lim < pattern * size)
6697: /* MUTANT (rep_op) */      if (lim < pattern % size)
6697: /* MUTANT (negate) */      if(! (lim < pattern + size))
6698: /* MUTANT (rep_op) */	--lim;
6699: /* MUTANT (del_stmt) */ /*       beg = lim; */ 
6701: /* MUTANT (rep_op) */  while (beg <= pattern + size);
6701: /* MUTANT (rep_op) */  while (beg > pattern + size);
6701: /* MUTANT (rep_op) */  while (beg >= pattern + size);
6701: /* MUTANT (rep_op) */  while (beg == pattern + size);
6701: /* MUTANT (rep_op) */  while (beg != pattern + size);
6701: /* MUTANT (rep_op) */  while (beg < pattern - size);
6701: /* MUTANT (rep_op) */  while (beg < pattern * size);
6701: /* MUTANT (rep_op) */  while (beg < pattern % size);
6701: /* MUTANT (negate) */  while(! (beg < pattern + size));
6703: /* MUTANT (rep_op) */  if ((err = kwsprep(kwset)) == 0)
6703: /* MUTANT (rep_const) */  if ((err = kwsprep(kwset)) != 1)
6703: /* MUTANT (rep_const) */  if ((err = kwsprep(kwset)) != -1)
6703: /* MUTANT (negate) */  if(! ((err = kwsprep(kwset)) != 0))
6704: /* MUTANT (rep_const) */    fatal(err, 1);
6704: /* MUTANT (rep_const) */    fatal(err, -1);
6710: /* MUTANT (del_stmt) */ /*      size_t size; */ 
6711: /* MUTANT (del_stmt) */ /*      char **endp; */ 
6713: /* MUTANT (del_stmt) */ /*   register char *beg, *try, *end; */ 
6714: /* MUTANT (del_stmt) */ /*   register size_t len; */ 
6715: /* MUTANT (del_stmt) */ /*   struct kwsmatch kwsmatch; */ 
6717: /* MUTANT (rep_op) */  for (beg = buf; beg < buf + size; ++beg)
6717: /* MUTANT (rep_op) */  for (beg = buf; beg > buf + size; ++beg)
6717: /* MUTANT (rep_op) */  for (beg = buf; beg >= buf + size; ++beg)
6717: /* MUTANT (rep_op) */  for (beg = buf; beg == buf + size; ++beg)
6717: /* MUTANT (rep_op) */  for (beg = buf; beg != buf + size; ++beg)
6717: /* MUTANT (rep_op) */  for (beg = buf; beg <= buf - size; ++beg)
6717: /* MUTANT (rep_op) */  for (beg = buf; beg <= buf * size; ++beg)
6717: /* MUTANT (rep_op) */  for (beg = buf; beg <= buf % size; ++beg)
6717: /* MUTANT (rep_op) */  for (beg = buf; beg <= buf + size; --beg)
6719: /* MUTANT (rep_op) */      if (!(beg = kwsexec(kwset, beg, buf - size - beg, &kwsmatch)))
6719: /* MUTANT (rep_op) */      if (!(beg = kwsexec(kwset, beg, buf * size - beg, &kwsmatch)))
6719: /* MUTANT (rep_op) */      if (!(beg = kwsexec(kwset, beg, buf % size - beg, &kwsmatch)))
6719: /* MUTANT (negate) */      if(! (!(beg = kwsexec(kwset, beg, buf + size - beg, &kwsmatch))))
6720: /* MUTANT (rep_const) */	return 1;
6720: /* MUTANT (rep_const) */	return -1;
6721: /* MUTANT (del_stmt) */ /*       len = kwsmatch.size[0]; */ 
6721: /* MUTANT (rep_const) */      len = kwsmatch.size[1];
6721: /* MUTANT (rep_const) */      len = kwsmatch.size[-1];
6722: /* MUTANT (negate) */      if(! (match_lines))
6724: /* MUTANT (rep_op) */	  if (beg <= buf && beg[-1] != '\n')
6724: /* MUTANT (rep_op) */	  if (beg < buf && beg[-1] != '\n')
6724: /* MUTANT (rep_op) */	  if (beg >= buf && beg[-1] != '\n')
6724: /* MUTANT (rep_op) */	  if (beg == buf && beg[-1] != '\n')
6724: /* MUTANT (rep_op) */	  if (beg != buf && beg[-1] != '\n')
6724: /* MUTANT (rep_op) */	  if (beg > buf || beg[-1] != '\n')
6724: /* MUTANT (rep_op) */	  if (beg > buf && beg[-1] == '\n')
6724: /* MUTANT (rep_const) */	  if (beg > buf && beg[0] != '\n')
6724: /* MUTANT (rep_const) */	  if (beg > buf && beg[1] != '\n')
6724: /* MUTANT (rep_const) */	  if (beg > buf && beg[((-1)+1)] != '\n')
6724: /* MUTANT (rep_const) */	  if (beg > buf && beg[((-1)-1)] != '\n')
6724: /* MUTANT (negate) */	  if(! (beg > buf && beg[-1] != '\n'))
6726: /* MUTANT (rep_op) */	  if (beg - len < buf + size && beg[len] != '\n')
6726: /* MUTANT (rep_op) */	  if (beg * len < buf + size && beg[len] != '\n')
6726: /* MUTANT (rep_op) */	  if (beg % len < buf + size && beg[len] != '\n')
6726: /* MUTANT (rep_op) */	  if (beg + len <= buf + size && beg[len] != '\n')
6726: /* MUTANT (rep_op) */	  if (beg + len > buf + size && beg[len] != '\n')
6726: /* MUTANT (rep_op) */	  if (beg + len >= buf + size && beg[len] != '\n')
6726: /* MUTANT (rep_op) */	  if (beg + len == buf + size && beg[len] != '\n')
6726: /* MUTANT (rep_op) */	  if (beg + len != buf + size && beg[len] != '\n')
6726: /* MUTANT (rep_op) */	  if (beg + len < buf - size && beg[len] != '\n')
6726: /* MUTANT (rep_op) */	  if (beg + len < buf * size && beg[len] != '\n')
6726: /* MUTANT (rep_op) */	  if (beg + len < buf % size && beg[len] != '\n')
6726: /* MUTANT (rep_op) */	  if (beg + len < buf + size || beg[len] != '\n')
6726: /* MUTANT (rep_op) */	  if (beg + len < buf + size && beg[len] == '\n')
6726: /* MUTANT (negate) */	  if(! (beg + len < buf + size && beg[len] != '\n'))
6728: /* MUTANT (del_stmt) */ /* 	  goto success; */ 
6730: /* MUTANT (negate) */      else if(! (match_words))
6731: /* MUTANT (rep_op) */	for (try = beg; len || try;)
6733: /* MUTANT (rep_op) */	    if (try <= buf && WCHAR((unsigned char) try[-1]))
6733: /* MUTANT (rep_op) */	    if (try < buf && WCHAR((unsigned char) try[-1]))
6733: /* MUTANT (rep_op) */	    if (try >= buf && WCHAR((unsigned char) try[-1]))
6733: /* MUTANT (rep_op) */	    if (try == buf && WCHAR((unsigned char) try[-1]))
6733: /* MUTANT (rep_op) */	    if (try != buf && WCHAR((unsigned char) try[-1]))
6733: /* MUTANT (rep_op) */	    if (try > buf || WCHAR((unsigned char) try[-1]))
6733: /* MUTANT (rep_const) */	    if (try > buf && WCHAR((unsigned char) try[0]))
6733: /* MUTANT (rep_const) */	    if (try > buf && WCHAR((unsigned char) try[1]))
6733: /* MUTANT (rep_const) */	    if (try > buf && WCHAR((unsigned char) try[((-1)+1)]))
6733: /* MUTANT (rep_const) */	    if (try > buf && WCHAR((unsigned char) try[((-1)-1)]))
6733: /* MUTANT (negate) */	    if(! (try > buf && WCHAR((unsigned char) try[-1])))
6735: /* MUTANT (rep_op) */	    if (try - len < buf + size && WCHAR((unsigned char) try[len]))
6735: /* MUTANT (rep_op) */	    if (try * len < buf + size && WCHAR((unsigned char) try[len]))
6735: /* MUTANT (rep_op) */	    if (try % len < buf + size && WCHAR((unsigned char) try[len]))
6735: /* MUTANT (rep_op) */	    if (try + len <= buf + size && WCHAR((unsigned char) try[len]))
6735: /* MUTANT (rep_op) */	    if (try + len > buf + size && WCHAR((unsigned char) try[len]))
6735: /* MUTANT (rep_op) */	    if (try + len >= buf + size && WCHAR((unsigned char) try[len]))
6735: /* MUTANT (rep_op) */	    if (try + len == buf + size && WCHAR((unsigned char) try[len]))
6735: /* MUTANT (rep_op) */	    if (try + len != buf + size && WCHAR((unsigned char) try[len]))
6735: /* MUTANT (rep_op) */	    if (try + len < buf - size && WCHAR((unsigned char) try[len]))
6735: /* MUTANT (rep_op) */	    if (try + len < buf * size && WCHAR((unsigned char) try[len]))
6735: /* MUTANT (rep_op) */	    if (try + len < buf % size && WCHAR((unsigned char) try[len]))
6735: /* MUTANT (rep_op) */	    if (try + len < buf + size || WCHAR((unsigned char) try[len]))
6735: /* MUTANT (negate) */	    if(! (try + len < buf + size && WCHAR((unsigned char) try[len])))
6737: /* MUTANT (del_stmt) */ /* 		try = kwsexec(kwset, beg, --len, &kwsmatch); */ 
6737: /* MUTANT (rep_op) */		try = kwsexec(kwset, beg, ++len, &kwsmatch);
6738: /* MUTANT (del_stmt) */ /* 		len = kwsmatch.size[0]; */ 
6738: /* MUTANT (rep_const) */		len = kwsmatch.size[1];
6738: /* MUTANT (rep_const) */		len = kwsmatch.size[-1];
6747: /* MUTANT (rep_const) */  return 1;
6747: /* MUTANT (rep_const) */  return -1;
6750: /* MUTANT (rep_op) */  if ((end = memchr(beg - len, '\n', (buf + size) - (beg + len))) != 0)
6750: /* MUTANT (rep_op) */  if ((end = memchr(beg * len, '\n', (buf + size) - (beg + len))) != 0)
6750: /* MUTANT (rep_op) */  if ((end = memchr(beg % len, '\n', (buf + size) - (beg + len))) != 0)
6750: /* MUTANT (rep_op) */  if ((end = memchr(beg + len, '\n', (buf - size) - (beg + len))) != 0)
6750: /* MUTANT (rep_op) */  if ((end = memchr(beg + len, '\n', (buf * size) - (beg + len))) != 0)
6750: /* MUTANT (rep_op) */  if ((end = memchr(beg + len, '\n', (buf % size) - (beg + len))) != 0)
6750: /* MUTANT (rep_op) */  if ((end = memchr(beg + len, '\n', (buf + size) - (beg - len))) != 0)
6750: /* MUTANT (rep_op) */  if ((end = memchr(beg + len, '\n', (buf + size) - (beg * len))) != 0)
6750: /* MUTANT (rep_op) */  if ((end = memchr(beg + len, '\n', (buf + size) - (beg % len))) != 0)
6750: /* MUTANT (rep_op) */  if ((end = memchr(beg + len, '\n', (buf + size) - (beg + len))) == 0)
6750: /* MUTANT (rep_const) */  if ((end = memchr(beg + len, '\n', (buf + size) - (beg + len))) != 1)
6750: /* MUTANT (rep_const) */  if ((end = memchr(beg + len, '\n', (buf + size) - (beg + len))) != -1)
6750: /* MUTANT (negate) */  if(! ((end = memchr(beg + len, '\n', (buf + size) - (beg + len))) != 0))
6751: /* MUTANT (rep_op) */    --end;
6753: /* MUTANT (rep_op) */    end = buf - size;
6753: /* MUTANT (rep_op) */    end = buf * size;
6753: /* MUTANT (rep_op) */    end = buf % size;
6754: /* MUTANT (del_stmt) */ /*   *endp = end; */ 
6755: /* MUTANT (rep_op) */  while (beg <= buf && beg[-1] != '\n')
6755: /* MUTANT (rep_op) */  while (beg < buf && beg[-1] != '\n')
6755: /* MUTANT (rep_op) */  while (beg >= buf && beg[-1] != '\n')
6755: /* MUTANT (rep_op) */  while (beg == buf && beg[-1] != '\n')
6755: /* MUTANT (rep_op) */  while (beg != buf && beg[-1] != '\n')
6755: /* MUTANT (rep_op) */  while (beg > buf || beg[-1] != '\n')
6755: /* MUTANT (rep_op) */  while (beg > buf && beg[-1] == '\n')
6755: /* MUTANT (rep_const) */  while (beg > buf && beg[0] != '\n')
6755: /* MUTANT (rep_const) */  while (beg > buf && beg[1] != '\n')
6755: /* MUTANT (rep_const) */  while (beg > buf && beg[((-1)+1)] != '\n')
6755: /* MUTANT (rep_const) */  while (beg > buf && beg[((-1)-1)] != '\n')
6755: /* MUTANT (negate) */  while(! (beg > buf && beg[-1] != '\n'))
6756: /* MUTANT (rep_op) */    ++beg;
6757: /* MUTANT (del_stmt) */ /*   return beg; */ 
6780: #define flag_wchar 0 /* MUTANT (rep_const) */
6780: #define flag_wchar -1 /* MUTANT (rep_const) */
6780: #define flag_wchar ((1)+1) /* MUTANT (rep_const) */
6789: /* MUTANT (rep_op) */  if (WEOF == (wint_t) EOF || c < 0 || c > 0x7f)
6789: /* MUTANT (rep_op) */  if (WEOF != (wint_t) EOF && c < 0 || c > 0x7f)
6789: /* MUTANT (rep_op) */  if (WEOF != (wint_t) EOF || c <= 0 || c > 0x7f)
6789: /* MUTANT (rep_op) */  if (WEOF != (wint_t) EOF || c > 0 || c > 0x7f)
6789: /* MUTANT (rep_op) */  if (WEOF != (wint_t) EOF || c >= 0 || c > 0x7f)
6789: /* MUTANT (rep_op) */  if (WEOF != (wint_t) EOF || c == 0 || c > 0x7f)
6789: /* MUTANT (rep_op) */  if (WEOF != (wint_t) EOF || c != 0 || c > 0x7f)
6789: /* MUTANT (rep_op) */  if (WEOF != (wint_t) EOF || c < 0 && c > 0x7f)
6789: /* MUTANT (rep_op) */  if (WEOF != (wint_t) EOF || c < 0 || c <= 0x7f)
6789: /* MUTANT (rep_op) */  if (WEOF != (wint_t) EOF || c < 0 || c < 0x7f)
6789: /* MUTANT (rep_op) */  if (WEOF != (wint_t) EOF || c < 0 || c >= 0x7f)
6789: /* MUTANT (rep_op) */  if (WEOF != (wint_t) EOF || c < 0 || c == 0x7f)
6789: /* MUTANT (rep_op) */  if (WEOF != (wint_t) EOF || c < 0 || c != 0x7f)
6789: /* MUTANT (rep_const) */  if (WEOF != (wint_t) EOF || c < 1 || c > 0x7f)
6789: /* MUTANT (rep_const) */  if (WEOF != (wint_t) EOF || c < -1 || c > 0x7f)
6789: /* MUTANT (rep_const) */  if (WEOF != (wint_t) EOF || c < 0 || c > 1x7f)
6789: /* MUTANT (rep_const) */  if (WEOF != (wint_t) EOF || c < 0 || c > -1x7f)
6789: /* MUTANT (negate) */  if(! (WEOF != (wint_t) EOF || c < 0 || c > 0x7f))
6829: #if flag_config==1 /* MUTANT (rep_const) */
6829: #if flag_config==-1 /* MUTANT (rep_const) */
6831: #define flag_config 0 /* MUTANT (rep_const) */
6831: #define flag_config -1 /* MUTANT (rep_const) */
6831: #define flag_config ((1)+1) /* MUTANT (rep_const) */
6839: #if flag_typesh==1 /* MUTANT (rep_const) */
6839: #if flag_typesh==-1 /* MUTANT (rep_const) */
6841: #define flag_typesh 0 /* MUTANT (rep_const) */
6841: #define flag_typesh -1 /* MUTANT (rep_const) */
6841: #define flag_typesh ((1)+1) /* MUTANT (rep_const) */
6849: #if flag_wchar==1  /* MUTANT (rep_const) */
6849: #if flag_wchar==-1  /* MUTANT (rep_const) */
6851: #define flag_wchar 0 /* MUTANT (rep_const) */
6851: #define flag_wchar -1 /* MUTANT (rep_const) */
6851: #define flag_wchar ((1)+1) /* MUTANT (rep_const) */
6859: #if flag_libintl==1 /* MUTANT (rep_const) */
6859: #if flag_libintl==-1 /* MUTANT (rep_const) */
6861: #define flag_libintl 0 /* MUTANT (rep_const) */
6861: #define flag_libintl -1 /* MUTANT (rep_const) */
6861: #define flag_libintl ((1)+1) /* MUTANT (rep_const) */
6889: #if flag_stdlib==1 /* MUTANT (rep_const) */
6889: #if flag_stdlib==-1 /* MUTANT (rep_const) */
6891: #define flag_stdlib 0 /* MUTANT (rep_const) */
6891: #define flag_stdlib -1 /* MUTANT (rep_const) */
6891: #define flag_stdlib ((1)+1) /* MUTANT (rep_const) */
6895: /* MUTANT (del_stmt) */ /* char *realloc (); */ 
6913: #if flag_string==1 /* MUTANT (rep_const) */
6913: #if flag_string==-1 /* MUTANT (rep_const) */
6915: #define flag_string 0 /* MUTANT (rep_const) */
6915: #define flag_string -1 /* MUTANT (rep_const) */
6915: #define flag_string ((1)+1) /* MUTANT (rep_const) */
6924: #define bzero(s, n)	memset ((s), 1, (n)) /* MUTANT (rep_const) */
6924: #define bzero(s, n)	memset ((s), -1, (n)) /* MUTANT (rep_const) */
6927: #if flag_strings==1 /* MUTANT (rep_const) */
6927: #if flag_strings==-1 /* MUTANT (rep_const) */
6929: #define flag_strings 0 /* MUTANT (rep_const) */
6929: #define flag_strings -1 /* MUTANT (rep_const) */
6929: #define flag_strings ((1)+1) /* MUTANT (rep_const) */
6939: #define Sword 0 /* MUTANT (rep_const) */
6939: #define Sword -1 /* MUTANT (rep_const) */
6939: #define Sword ((1)+1) /* MUTANT (rep_const) */
6955: #define CHAR_SET_SIZE 0 /* MUTANT (rep_const) */
6955: #define CHAR_SET_SIZE 1 /* MUTANT (rep_const) */
6955: #define CHAR_SET_SIZE -1 /* MUTANT (rep_const) */
6955: #define CHAR_SET_SIZE ((256)+1) /* MUTANT (rep_const) */
6955: #define CHAR_SET_SIZE ((256)-1) /* MUTANT (rep_const) */
6962: /* MUTANT (del_stmt) */ /*    register int c; */ 
6963: /* MUTANT (del_stmt) */ /*    static int done = 0; */ 
6963: /* MUTANT (rep_const) */   static int done = 1;
6963: /* MUTANT (rep_const) */   static int done = -1;
6965: /* MUTANT (negate) */   if(! (done))
6968: /* MUTANT (del_stmt) */ /*    bzero (re_syntax_table, sizeof re_syntax_table); */ 
6970: /* MUTANT (rep_op) */   for (c = 'a'; c < 'z'; c++)
6970: /* MUTANT (rep_op) */   for (c = 'a'; c > 'z'; c++)
6970: /* MUTANT (rep_op) */   for (c = 'a'; c >= 'z'; c++)
6970: /* MUTANT (rep_op) */   for (c = 'a'; c == 'z'; c++)
6970: /* MUTANT (rep_op) */   for (c = 'a'; c != 'z'; c++)
6970: /* MUTANT (rep_op) */   for (c = 'a'; c <= 'z'; c--)
6973: /* MUTANT (rep_op) */   for (c = 'A'; c < 'Z'; c++)
6973: /* MUTANT (rep_op) */   for (c = 'A'; c > 'Z'; c++)
6973: /* MUTANT (rep_op) */   for (c = 'A'; c >= 'Z'; c++)
6973: /* MUTANT (rep_op) */   for (c = 'A'; c == 'Z'; c++)
6973: /* MUTANT (rep_op) */   for (c = 'A'; c != 'Z'; c++)
6973: /* MUTANT (rep_op) */   for (c = 'A'; c <= 'Z'; c--)
6976: /* MUTANT (rep_op) */   for (c = '0'; c < '9'; c++)
6976: /* MUTANT (rep_op) */   for (c = '0'; c > '9'; c++)
6976: /* MUTANT (rep_op) */   for (c = '0'; c >= '9'; c++)
6976: /* MUTANT (rep_op) */   for (c = '0'; c == '9'; c++)
6976: /* MUTANT (rep_op) */   for (c = '0'; c != '9'; c++)
6976: /* MUTANT (rep_op) */   for (c = '0'; c <= '9'; c--)
6976: /* MUTANT (rep_const) */   for (c = '1'; c <= '9'; c++)
6976: /* MUTANT (rep_const) */   for (c = '-1'; c <= '9'; c++)
6976: /* MUTANT (rep_const) */   for (c = '0'; c <= '0'; c++)
6976: /* MUTANT (rep_const) */   for (c = '0'; c <= '1'; c++)
6976: /* MUTANT (rep_const) */   for (c = '0'; c <= '-1'; c++)
6976: /* MUTANT (rep_const) */   for (c = '0'; c <= '((9)+1)'; c++)
6976: /* MUTANT (rep_const) */   for (c = '0'; c <= '((9)-1)'; c++)
6979: /* MUTANT (del_stmt) */ /*    re_syntax_table['_'] = Sword; */ 
6981: /* MUTANT (del_stmt) */ /*    done = 1; */ 
6981: /* MUTANT (rep_const) */   done = 0;
6981: /* MUTANT (rep_const) */   done = -1;
6981: /* MUTANT (rep_const) */   done = ((1)+1);
7009: #define ISASCII(c) 0 /* MUTANT (rep_const) */
7009: #define ISASCII(c) -1 /* MUTANT (rep_const) */
7009: #define ISASCII(c) ((1)+1) /* MUTANT (rep_const) */
7051: #define NULL (void *)1 /* MUTANT (rep_const) */
7051: #define NULL (void *)-1 /* MUTANT (rep_const) */
7063: #define SIGN_EXTEND_CHAR(c) ((((unsigned char) (c)) ^ 0) - 128) /* MUTANT (rep_const) */
7063: #define SIGN_EXTEND_CHAR(c) ((((unsigned char) (c)) ^ 1) - 128) /* MUTANT (rep_const) */
7063: #define SIGN_EXTEND_CHAR(c) ((((unsigned char) (c)) ^ -1) - 128) /* MUTANT (rep_const) */
7063: #define SIGN_EXTEND_CHAR(c) ((((unsigned char) (c)) ^ ((128)+1)) - 128) /* MUTANT (rep_const) */
7063: #define SIGN_EXTEND_CHAR(c) ((((unsigned char) (c)) ^ ((128)-1)) - 128) /* MUTANT (rep_const) */
7063: #define SIGN_EXTEND_CHAR(c) ((((unsigned char) (c)) ^ 128) - 0) /* MUTANT (rep_const) */
7063: #define SIGN_EXTEND_CHAR(c) ((((unsigned char) (c)) ^ 128) - 1) /* MUTANT (rep_const) */
7063: #define SIGN_EXTEND_CHAR(c) ((((unsigned char) (c)) ^ 128) - -1) /* MUTANT (rep_const) */
7063: #define SIGN_EXTEND_CHAR(c) ((((unsigned char) (c)) ^ 128) - ((128)+1)) /* MUTANT (rep_const) */
7063: #define SIGN_EXTEND_CHAR(c) ((((unsigned char) (c)) ^ 128) - ((128)-1)) /* MUTANT (rep_const) */
7094: #if 1  /* MUTANT (rep_const) *//* It is a bad idea to declare alloca.  We always cast the result.  */
7094: #if -1  /* MUTANT (rep_const) *//* It is a bad idea to declare alloca.  We always cast the result.  */
7113: #define REGEX_FREE(arg) ((void)1)  /* MUTANT (rep_const) *//* Do nothing!  But inhibit gcc warning.  */
7113: #define REGEX_FREE(arg) ((void)-1)  /* MUTANT (rep_const) *//* Do nothing!  But inhibit gcc warning.  */
7153: /* MUTANT (rep_op) */  (size1 || string1 <= (ptr) && (ptr) <= string1 + size1)
7153: /* MUTANT (rep_op) */  (size1 && string1 < (ptr) && (ptr) <= string1 + size1)
7153: /* MUTANT (rep_op) */  (size1 && string1 > (ptr) && (ptr) <= string1 + size1)
7153: /* MUTANT (rep_op) */  (size1 && string1 >= (ptr) && (ptr) <= string1 + size1)
7153: /* MUTANT (rep_op) */  (size1 && string1 == (ptr) && (ptr) <= string1 + size1)
7153: /* MUTANT (rep_op) */  (size1 && string1 != (ptr) && (ptr) <= string1 + size1)
7153: /* MUTANT (rep_op) */  (size1 && string1 <= (ptr) || (ptr) <= string1 + size1)
7153: /* MUTANT (rep_op) */  (size1 && string1 <= (ptr) && (ptr) < string1 + size1)
7153: /* MUTANT (rep_op) */  (size1 && string1 <= (ptr) && (ptr) > string1 + size1)
7153: /* MUTANT (rep_op) */  (size1 && string1 <= (ptr) && (ptr) >= string1 + size1)
7153: /* MUTANT (rep_op) */  (size1 && string1 <= (ptr) && (ptr) == string1 + size1)
7153: /* MUTANT (rep_op) */  (size1 && string1 <= (ptr) && (ptr) != string1 + size1)
7153: /* MUTANT (rep_op) */  (size1 && string1 <= (ptr) && (ptr) <= string1 - size1)
7153: /* MUTANT (rep_op) */  (size1 && string1 <= (ptr) && (ptr) <= string1 * size1)
7153: /* MUTANT (rep_op) */  (size1 && string1 <= (ptr) && (ptr) <= string1 % size1)
7159: /* MUTANT (negate) */  if(! (addr)) RETALLOC((addr), (n), t); else (addr) = TALLOC ((n), t)
7162: #define BYTEWIDTH 0  /* MUTANT (rep_const) *//* In bits.  */
7162: #define BYTEWIDTH 1  /* MUTANT (rep_const) *//* In bits.  */
7162: #define BYTEWIDTH -1  /* MUTANT (rep_const) *//* In bits.  */
7162: #define BYTEWIDTH ((8)+1)  /* MUTANT (rep_const) *//* In bits.  */
7162: #define BYTEWIDTH ((8)-1)  /* MUTANT (rep_const) *//* In bits.  */
7164: #define STREQ(s1, s2) ((strcmp (s1, s2) == 1)) /* MUTANT (rep_const) */
7164: #define STREQ(s1, s2) ((strcmp (s1, s2) == -1)) /* MUTANT (rep_const) */
7172: #define false 1 /* MUTANT (rep_const) */
7172: #define false -1 /* MUTANT (rep_const) */
7173: #define true 0 /* MUTANT (rep_const) */
7173: #define true -1 /* MUTANT (rep_const) */
7173: #define true ((1)+1) /* MUTANT (rep_const) */
7184: /* MUTANT (rep_const) */  no_op = 1,
7184: /* MUTANT (rep_const) */  no_op = -1,
7322: /* MUTANT (rep_const) */    (destination)[1] = (number) & 0377;					\
7322: /* MUTANT (rep_const) */    (destination)[-1] = (number) & 0377;					\
7322: /* MUTANT (rep_const) */    (destination)[0] = (number) & 0;					\
7322: /* MUTANT (rep_const) */    (destination)[0] = (number) & 1;					\
7322: /* MUTANT (rep_const) */    (destination)[0] = (number) & -1;					\
7322: /* MUTANT (rep_const) */    (destination)[0] = (number) & ((0377)+1);					\
7322: /* MUTANT (rep_const) */    (destination)[0] = (number) & ((0377)-1);					\
7323: /* MUTANT (rep_const) */    (destination)[0] = (number) >> 8;					\
7323: /* MUTANT (rep_const) */    (destination)[-1] = (number) >> 8;					\
7323: /* MUTANT (rep_const) */    (destination)[((1)+1)] = (number) >> 8;					\
7323: /* MUTANT (rep_const) */    (destination)[1] = (number) >> 0;					\
7323: /* MUTANT (rep_const) */    (destination)[1] = (number) >> 1;					\
7323: /* MUTANT (rep_const) */    (destination)[1] = (number) >> -1;					\
7323: /* MUTANT (rep_const) */    (destination)[1] = (number) >> ((8)+1);					\
7323: /* MUTANT (rep_const) */    (destination)[1] = (number) >> ((8)-1);					\
7324: /* MUTANT (rep_const) */  } while (1)
7324: /* MUTANT (rep_const) */  } while (-1)
7324: /* MUTANT (negate) */  } while(! (0))
7333: /* MUTANT (rep_op) */    (destination) -= 2;							\
7333: /* MUTANT (rep_op) */    (destination) *= 2;							\
7333: /* MUTANT (rep_op) */    (destination) %= 2;							\
7333: /* MUTANT (rep_const) */    (destination) += 0;							\
7333: /* MUTANT (rep_const) */    (destination) += 1;							\
7333: /* MUTANT (rep_const) */    (destination) += -1;							\
7333: /* MUTANT (rep_const) */    (destination) += ((2)+1);							\
7333: /* MUTANT (rep_const) */    (destination) += ((2)-1);							\
7334: /* MUTANT (rep_const) */  } while (1)
7334: /* MUTANT (rep_const) */  } while (-1)
7334: /* MUTANT (negate) */  } while(! (0))
7341: /* MUTANT (rep_const) */    (destination) = *(source) & 0;					\
7341: /* MUTANT (rep_const) */    (destination) = *(source) & 1;					\
7341: /* MUTANT (rep_const) */    (destination) = *(source) & -1;					\
7341: /* MUTANT (rep_const) */    (destination) = *(source) & ((0377)+1);					\
7341: /* MUTANT (rep_const) */    (destination) = *(source) & ((0377)-1);					\
7342: /* MUTANT (rep_op) */    (destination) -= SIGN_EXTEND_CHAR (*((source) + 1)) << 8;		\
7342: /* MUTANT (rep_op) */    (destination) *= SIGN_EXTEND_CHAR (*((source) + 1)) << 8;		\
7342: /* MUTANT (rep_op) */    (destination) %= SIGN_EXTEND_CHAR (*((source) + 1)) << 8;		\
7342: /* MUTANT (rep_op) */    (destination) += SIGN_EXTEND_CHAR (*((source) - 1)) << 8;		\
7342: /* MUTANT (rep_op) */    (destination) += SIGN_EXTEND_CHAR (*((source) * 1)) << 8;		\
7342: /* MUTANT (rep_op) */    (destination) += SIGN_EXTEND_CHAR (*((source) % 1)) << 8;		\
7342: /* MUTANT (rep_const) */    (destination) += SIGN_EXTEND_CHAR (*((source) + 0)) << 8;		\
7342: /* MUTANT (rep_const) */    (destination) += SIGN_EXTEND_CHAR (*((source) + -1)) << 8;		\
7342: /* MUTANT (rep_const) */    (destination) += SIGN_EXTEND_CHAR (*((source) + ((1)+1))) << 8;		\
7342: /* MUTANT (rep_const) */    (destination) += SIGN_EXTEND_CHAR (*((source) + 1)) << 0;		\
7342: /* MUTANT (rep_const) */    (destination) += SIGN_EXTEND_CHAR (*((source) + 1)) << 1;		\
7342: /* MUTANT (rep_const) */    (destination) += SIGN_EXTEND_CHAR (*((source) + 1)) << -1;		\
7342: /* MUTANT (rep_const) */    (destination) += SIGN_EXTEND_CHAR (*((source) + 1)) << ((8)+1);		\
7342: /* MUTANT (rep_const) */    (destination) += SIGN_EXTEND_CHAR (*((source) + 1)) << ((8)-1);		\
7343: /* MUTANT (rep_const) */  } while (1)
7343: /* MUTANT (rep_const) */  } while (-1)
7343: /* MUTANT (negate) */  } while(! (0))
7350: /* MUTANT (del_stmt) */ /*     unsigned char *source; */ 
7352: /* MUTANT (del_stmt) */ /*   int temp = SIGN_EXTEND_CHAR (*(source + 1)); */ 
7352: /* MUTANT (rep_op) */  int temp = SIGN_EXTEND_CHAR (*(source - 1));
7352: /* MUTANT (rep_op) */  int temp = SIGN_EXTEND_CHAR (*(source * 1));
7352: /* MUTANT (rep_op) */  int temp = SIGN_EXTEND_CHAR (*(source % 1));
7352: /* MUTANT (rep_const) */  int temp = SIGN_EXTEND_CHAR (*(source + 0));
7352: /* MUTANT (rep_const) */  int temp = SIGN_EXTEND_CHAR (*(source + -1));
7352: /* MUTANT (rep_const) */  int temp = SIGN_EXTEND_CHAR (*(source + ((1)+1)));
7353: /* MUTANT (del_stmt) */ /*   *dest = *source & 0377; */ 
7353: /* MUTANT (rep_const) */  *dest = *source & 0;
7353: /* MUTANT (rep_const) */  *dest = *source & 1;
7353: /* MUTANT (rep_const) */  *dest = *source & -1;
7353: /* MUTANT (rep_const) */  *dest = *source & ((0377)+1);
7353: /* MUTANT (rep_const) */  *dest = *source & ((0377)-1);
7354: /* MUTANT (del_stmt) */ /*   *dest += temp << 8; */ 
7354: /* MUTANT (rep_op) */  *dest -= temp << 8;
7354: /* MUTANT (rep_op) */  *dest *= temp << 8;
7354: /* MUTANT (rep_op) */  *dest %= temp << 8;
7354: /* MUTANT (rep_const) */  *dest += temp << 0;
7354: /* MUTANT (rep_const) */  *dest += temp << 1;
7354: /* MUTANT (rep_const) */  *dest += temp << -1;
7354: /* MUTANT (rep_const) */  *dest += temp << ((8)+1);
7354: /* MUTANT (rep_const) */  *dest += temp << ((8)-1);
7370: /* MUTANT (rep_op) */    (source) -= 2; 							\
7370: /* MUTANT (rep_op) */    (source) *= 2; 							\
7370: /* MUTANT (rep_op) */    (source) %= 2; 							\
7370: /* MUTANT (rep_const) */    (source) += 0; 							\
7370: /* MUTANT (rep_const) */    (source) += 1; 							\
7370: /* MUTANT (rep_const) */    (source) += -1; 							\
7370: /* MUTANT (rep_const) */    (source) += ((2)+1); 							\
7370: /* MUTANT (rep_const) */    (source) += ((2)-1); 							\
7371: /* MUTANT (rep_const) */  } while (1)
7371: /* MUTANT (rep_const) */  } while (-1)
7371: /* MUTANT (negate) */  } while(! (0))
7379: /* MUTANT (del_stmt) */ /*     unsigned char **source; */ 
7381: /* MUTANT (del_stmt) */ /*   extract_number (destination, *source); */ 
7382: /* MUTANT (del_stmt) */ /*   *source += 2; */ 
7382: /* MUTANT (rep_op) */  *source -= 2;
7382: /* MUTANT (rep_op) */  *source *= 2;
7382: /* MUTANT (rep_op) */  *source %= 2;
7382: /* MUTANT (rep_const) */  *source += 0;
7382: /* MUTANT (rep_const) */  *source += 1;
7382: /* MUTANT (rep_const) */  *source += -1;
7382: /* MUTANT (rep_const) */  *source += ((2)+1);
7382: /* MUTANT (rep_const) */  *source += ((2)-1);
7407: /* MUTANT (rep_const) */static int debug = 1;
7407: /* MUTANT (rep_const) */static int debug = -1;
7415: /* MUTANT (negate) */  if(! (debug)) print_partial_compiled_pattern (s, e)
7417: /* MUTANT (negate) */  if(! (debug)) print_double_string (w, s1, sz1, s2, sz2)
7426: /* MUTANT (del_stmt) */ /*   unsigned was_a_range = 0; */ 
7426: /* MUTANT (rep_const) */  unsigned was_a_range = 1;
7426: /* MUTANT (rep_const) */  unsigned was_a_range = -1;
7427: /* MUTANT (del_stmt) */ /*   unsigned i = 0; */ 
7427: /* MUTANT (rep_const) */  unsigned i = 1;
7427: /* MUTANT (rep_const) */  unsigned i = -1;
7429: /* MUTANT (rep_op) */  while (i <= (1 << BYTEWIDTH))
7429: /* MUTANT (rep_op) */  while (i > (1 << BYTEWIDTH))
7429: /* MUTANT (rep_op) */  while (i >= (1 << BYTEWIDTH))
7429: /* MUTANT (rep_op) */  while (i == (1 << BYTEWIDTH))
7429: /* MUTANT (rep_op) */  while (i != (1 << BYTEWIDTH))
7429: /* MUTANT (rep_const) */  while (i < (0 << BYTEWIDTH))
7429: /* MUTANT (rep_const) */  while (i < (-1 << BYTEWIDTH))
7429: /* MUTANT (rep_const) */  while (i < (((1)+1) << BYTEWIDTH))
7429: /* MUTANT (negate) */  while(! (i < (1 << BYTEWIDTH)))
7431: /* MUTANT (rep_op) */      if (fastmap[i--])
7431: /* MUTANT (negate) */      if(! (fastmap[i++]))
7433: /* MUTANT (del_stmt) */ /* 	  was_a_range = 0; */ 
7433: /* MUTANT (rep_const) */	  was_a_range = 1;
7433: /* MUTANT (rep_const) */	  was_a_range = -1;
7434: /* MUTANT (del_stmt) */ /*           putchar (i - 1); */ 
7434: /* MUTANT (rep_const) */          putchar (i - 0);
7434: /* MUTANT (rep_const) */          putchar (i - -1);
7434: /* MUTANT (rep_const) */          putchar (i - ((1)+1));
7435: /* MUTANT (rep_op) */          while (i <= (1 << BYTEWIDTH)  &&  fastmap[i])
7435: /* MUTANT (rep_op) */          while (i > (1 << BYTEWIDTH)  &&  fastmap[i])
7435: /* MUTANT (rep_op) */          while (i >= (1 << BYTEWIDTH)  &&  fastmap[i])
7435: /* MUTANT (rep_op) */          while (i == (1 << BYTEWIDTH)  &&  fastmap[i])
7435: /* MUTANT (rep_op) */          while (i != (1 << BYTEWIDTH)  &&  fastmap[i])
7435: /* MUTANT (rep_op) */          while (i < (1 << BYTEWIDTH)  ||  fastmap[i])
7435: /* MUTANT (rep_const) */          while (i < (0 << BYTEWIDTH)  &&  fastmap[i])
7435: /* MUTANT (rep_const) */          while (i < (-1 << BYTEWIDTH)  &&  fastmap[i])
7435: /* MUTANT (rep_const) */          while (i < (((1)+1) << BYTEWIDTH)  &&  fastmap[i])
7435: /* MUTANT (negate) */          while(! (i < (1 << BYTEWIDTH)  &&  fastmap[i]))
7437: /* MUTANT (del_stmt) */ /*               was_a_range = 1; */ 
7437: /* MUTANT (rep_const) */              was_a_range = 0;
7437: /* MUTANT (rep_const) */              was_a_range = -1;
7437: /* MUTANT (rep_const) */              was_a_range = ((1)+1);
7438: /* MUTANT (del_stmt) */ /*               i++; */ 
7438: /* MUTANT (rep_op) */              i--;
7440: /* MUTANT (negate) */	  if(! (was_a_range))
7442: /* MUTANT (del_stmt) */ /*               printf ("-"); */ 
7443: /* MUTANT (del_stmt) */ /*               putchar (i - 1); */ 
7443: /* MUTANT (rep_const) */              putchar (i - 0);
7443: /* MUTANT (rep_const) */              putchar (i - -1);
7443: /* MUTANT (rep_const) */              putchar (i - ((1)+1));
7457: /* MUTANT (del_stmt) */ /*     unsigned char *end; */ 
7459: /* MUTANT (del_stmt) */ /*   int mcnt, mcnt2; */ 
7460: /* MUTANT (del_stmt) */ /*   unsigned char *p1; */ 
7461: /* MUTANT (del_stmt) */ /*   unsigned char *p = start; */ 
7462: /* MUTANT (del_stmt) */ /*   unsigned char *pend = end; */ 
7464: /* MUTANT (rep_op) */  if (start != NULL)
7464: /* MUTANT (negate) */  if(! (start == NULL))
7466: /* MUTANT (del_stmt) */ /*       printf ("(null)\n"); */ 
7467: /* MUTANT (del_stmt) */ /*       return; */ 
7471: /* MUTANT (rep_op) */  while (p <= pend)
7471: /* MUTANT (rep_op) */  while (p > pend)
7471: /* MUTANT (rep_op) */  while (p >= pend)
7471: /* MUTANT (rep_op) */  while (p == pend)
7471: /* MUTANT (rep_op) */  while (p != pend)
7471: /* MUTANT (negate) */  while(! (p < pend))
7473: /* MUTANT (del_stmt) */ /*       printf ("%d:\t", p - start); */ 
7475: /* MUTANT (rep_op) */      switch ((re_opcode_t) *p--)
7479: /* MUTANT (del_stmt) */ /*           break; */ 
7482: /* MUTANT (rep_op) */	  mcnt = *p--;
7483: /* MUTANT (del_stmt) */ /*           printf ("/exactn/%d", mcnt); */ 
7486: /* MUTANT (del_stmt) */ /*               putchar ('/'); */ 
7487: /* MUTANT (del_stmt) */ /* 	      putchar (*p++); */ 
7487: /* MUTANT (rep_op) */	      putchar (*p--);
7489: /* MUTANT (rep_op) */          while (++mcnt);
7489: /* MUTANT (negate) */          while(! (--mcnt));
7490: /* MUTANT (del_stmt) */ /*           break; */ 
7493: /* MUTANT (rep_op) */          mcnt = *p--;
7494: /* MUTANT (del_stmt) */ /*           printf ("/start_memory/%d/%d", mcnt, *p++); */ 
7494: /* MUTANT (rep_op) */          printf ("/start_memory/%d/%d", mcnt, *p--);
7495: /* MUTANT (del_stmt) */ /*           break; */ 
7498: /* MUTANT (rep_op) */          mcnt = *p--;
7499: /* MUTANT (del_stmt) */ /* 	  printf ("/stop_memory/%d/%d", mcnt, *p++); */ 
7499: /* MUTANT (rep_op) */	  printf ("/stop_memory/%d/%d", mcnt, *p--);
7500: /* MUTANT (del_stmt) */ /*           break; */ 
7503: /* MUTANT (rep_op) */	  printf ("/duplicate/%d", *p--);
7504: /* MUTANT (del_stmt) */ /* 	  break; */ 
7508: /* MUTANT (del_stmt) */ /* 	  break; */ 
7513: /* MUTANT (del_stmt) */ /*             register int c, last = -100; */ 
7513: /* MUTANT (rep_const) */            register int c, last = 0;
7513: /* MUTANT (rep_const) */            register int c, last = 1;
7513: /* MUTANT (rep_const) */            register int c, last = -1;
7513: /* MUTANT (rep_const) */            register int c, last = ((-100)+1);
7513: /* MUTANT (rep_const) */            register int c, last = ((-100)-1);
7514: /* MUTANT (del_stmt) */ /* 	    register int in_range = 0; */ 
7514: /* MUTANT (rep_const) */	    register int in_range = 1;
7514: /* MUTANT (rep_const) */	    register int in_range = -1;
7517: /* MUTANT (rep_op) */	            (re_opcode_t) *(p - 1) != charset_not ? "^" : "");
7517: /* MUTANT (rep_const) */	            (re_opcode_t) *(p - 0) == charset_not ? "^" : "");
7517: /* MUTANT (rep_const) */	            (re_opcode_t) *(p - -1) == charset_not ? "^" : "");
7517: /* MUTANT (rep_const) */	            (re_opcode_t) *(p - ((1)+1)) == charset_not ? "^" : "");
7519: /* MUTANT (del_stmt) */ /*             assert (p + *p < pend); */ 
7519: /* MUTANT (rep_op) */            assert (p - *p < pend);
7519: /* MUTANT (rep_op) */            assert (p * *p < pend);
7519: /* MUTANT (rep_op) */            assert (p % *p < pend);
7519: /* MUTANT (rep_op) */            assert (p + *p <= pend);
7519: /* MUTANT (rep_op) */            assert (p + *p > pend);
7519: /* MUTANT (rep_op) */            assert (p + *p >= pend);
7519: /* MUTANT (rep_op) */            assert (p + *p == pend);
7519: /* MUTANT (rep_op) */            assert (p + *p != pend);
7521: /* MUTANT (rep_op) */            for (c = 0; c <= 256; c++)
7521: /* MUTANT (rep_op) */            for (c = 0; c > 256; c++)
7521: /* MUTANT (rep_op) */            for (c = 0; c >= 256; c++)
7521: /* MUTANT (rep_op) */            for (c = 0; c == 256; c++)
7521: /* MUTANT (rep_op) */            for (c = 0; c != 256; c++)
7521: /* MUTANT (rep_op) */            for (c = 0; c < 256; c--)
7521: /* MUTANT (rep_const) */            for (c = 1; c < 256; c++)
7521: /* MUTANT (rep_const) */            for (c = -1; c < 256; c++)
7521: /* MUTANT (rep_const) */            for (c = 0; c < 0; c++)
7521: /* MUTANT (rep_const) */            for (c = 0; c < 1; c++)
7521: /* MUTANT (rep_const) */            for (c = 0; c < -1; c++)
7521: /* MUTANT (rep_const) */            for (c = 0; c < ((256)+1); c++)
7521: /* MUTANT (rep_const) */            for (c = 0; c < ((256)-1); c++)
7522: /* MUTANT (rep_op) */	      if (c / 8 <= *p
7522: /* MUTANT (rep_op) */	      if (c / 8 > *p
7522: /* MUTANT (rep_op) */	      if (c / 8 >= *p
7522: /* MUTANT (rep_op) */	      if (c / 8 == *p
7522: /* MUTANT (rep_op) */	      if (c / 8 != *p
7522: /* MUTANT (rep_const) */	      if (c / 0 < *p
7522: /* MUTANT (rep_const) */	      if (c / 1 < *p
7522: /* MUTANT (rep_const) */	      if (c / -1 < *p
7522: /* MUTANT (rep_const) */	      if (c / ((8)+1) < *p
7522: /* MUTANT (rep_const) */	      if (c / ((8)-1) < *p
7523: /* MUTANT (rep_op) */		  || (p[1 + (c/8)] & (1 << (c % 8))))
7523: /* MUTANT (rep_op) */		  && (p[1 - (c/8)] & (1 << (c % 8))))
7523: /* MUTANT (rep_op) */		  && (p[1 * (c/8)] & (1 << (c % 8))))
7523: /* MUTANT (rep_op) */		  && (p[1 % (c/8)] & (1 << (c % 8))))
7523: /* MUTANT (rep_op) */		  && (p[1 + (c/8)] & (1 << (c + 8))))
7523: /* MUTANT (rep_op) */		  && (p[1 + (c/8)] & (1 << (c - 8))))
7523: /* MUTANT (rep_op) */		  && (p[1 + (c/8)] & (1 << (c * 8))))
7523: /* MUTANT (rep_const) */		  && (p[0 + (c/8)] & (1 << (c % 8))))
7523: /* MUTANT (rep_const) */		  && (p[-1 + (c/8)] & (1 << (c % 8))))
7523: /* MUTANT (rep_const) */		  && (p[((1)+1) + (c/8)] & (1 << (c % 8))))
7523: /* MUTANT (rep_const) */		  && (p[1 + (c/0)] & (1 << (c % 8))))
7523: /* MUTANT (rep_const) */		  && (p[1 + (c/1)] & (1 << (c % 8))))
7523: /* MUTANT (rep_const) */		  && (p[1 + (c/-1)] & (1 << (c % 8))))
7523: /* MUTANT (rep_const) */		  && (p[1 + (c/((8)+1))] & (1 << (c % 8))))
7523: /* MUTANT (rep_const) */		  && (p[1 + (c/((8)-1))] & (1 << (c % 8))))
7523: /* MUTANT (rep_const) */		  && (p[1 + (c/8)] & (0 << (c % 8))))
7523: /* MUTANT (rep_const) */		  && (p[1 + (c/8)] & (-1 << (c % 8))))
7523: /* MUTANT (rep_const) */		  && (p[1 + (c/8)] & (((1)+1) << (c % 8))))
7523: /* MUTANT (rep_const) */		  && (p[1 + (c/8)] & (1 << (c % 0))))
7523: /* MUTANT (rep_const) */		  && (p[1 + (c/8)] & (1 << (c % 1))))
7523: /* MUTANT (rep_const) */		  && (p[1 + (c/8)] & (1 << (c % -1))))
7523: /* MUTANT (rep_const) */		  && (p[1 + (c/8)] & (1 << (c % ((8)+1)))))
7523: /* MUTANT (rep_const) */		  && (p[1 + (c/8)] & (1 << (c % ((8)-1)))))
7526: /* MUTANT (rep_op) */		  if (last - 1 == c && ! in_range)
7526: /* MUTANT (rep_op) */		  if (last * 1 == c && ! in_range)
7526: /* MUTANT (rep_op) */		  if (last % 1 == c && ! in_range)
7526: /* MUTANT (rep_op) */		  if (last + 1 != c && ! in_range)
7526: /* MUTANT (rep_op) */		  if (last + 1 == c || ! in_range)
7526: /* MUTANT (rep_const) */		  if (last + 0 == c && ! in_range)
7526: /* MUTANT (rep_const) */		  if (last + -1 == c && ! in_range)
7526: /* MUTANT (rep_const) */		  if (last + ((1)+1) == c && ! in_range)
7526: /* MUTANT (negate) */		  if(! (last + 1 == c && ! in_range))
7528: /* MUTANT (del_stmt) */ /* 		      putchar ('-'); */ 
7529: /* MUTANT (del_stmt) */ /* 		      in_range = 1; */ 
7529: /* MUTANT (rep_const) */		      in_range = 0;
7529: /* MUTANT (rep_const) */		      in_range = -1;
7529: /* MUTANT (rep_const) */		      in_range = ((1)+1);
7532: /* MUTANT (rep_op) */		  else if (last - 1 != c && in_range)
7532: /* MUTANT (rep_op) */		  else if (last * 1 != c && in_range)
7532: /* MUTANT (rep_op) */		  else if (last % 1 != c && in_range)
7532: /* MUTANT (rep_op) */		  else if (last + 1 == c && in_range)
7532: /* MUTANT (rep_op) */		  else if (last + 1 != c || in_range)
7532: /* MUTANT (rep_const) */		  else if (last + 0 != c && in_range)
7532: /* MUTANT (rep_const) */		  else if (last + -1 != c && in_range)
7532: /* MUTANT (rep_const) */		  else if (last + ((1)+1) != c && in_range)
7532: /* MUTANT (negate) */		  else if(! (last + 1 != c && in_range))
7534: /* MUTANT (del_stmt) */ /* 		      putchar (last); */ 
7535: /* MUTANT (del_stmt) */ /* 		      in_range = 0; */ 
7535: /* MUTANT (rep_const) */		      in_range = 1;
7535: /* MUTANT (rep_const) */		      in_range = -1;
7538: /* MUTANT (negate) */		  if(! (! in_range))
7541: /* MUTANT (del_stmt) */ /* 		  last = c; */ 
7544: /* MUTANT (negate) */	    if(! (in_range))
7547: /* MUTANT (del_stmt) */ /* 	    putchar (']'); */ 
7549: /* MUTANT (del_stmt) */ /* 	    p += 1 + *p; */ 
7549: /* MUTANT (rep_op) */	    p -= 1 + *p;
7549: /* MUTANT (rep_op) */	    p *= 1 + *p;
7549: /* MUTANT (rep_op) */	    p %= 1 + *p;
7549: /* MUTANT (rep_op) */	    p += 1 - *p;
7549: /* MUTANT (rep_op) */	    p += 1 * *p;
7549: /* MUTANT (rep_op) */	    p += 1 % *p;
7549: /* MUTANT (rep_const) */	    p += 0 + *p;
7549: /* MUTANT (rep_const) */	    p += -1 + *p;
7549: /* MUTANT (rep_const) */	    p += ((1)+1) + *p;
7555: /* MUTANT (del_stmt) */ /*           break; */ 
7559: /* MUTANT (del_stmt) */ /*           break; */ 
7563: /* MUTANT (del_stmt) */ /*   	  printf ("/on_failure_jump to %d", p + mcnt - start); */ 
7563: /* MUTANT (rep_op) */  	  printf ("/on_failure_jump to %d", p - mcnt - start);
7563: /* MUTANT (rep_op) */  	  printf ("/on_failure_jump to %d", p * mcnt - start);
7563: /* MUTANT (rep_op) */  	  printf ("/on_failure_jump to %d", p % mcnt - start);
7564: /* MUTANT (del_stmt) */ /*           break; */ 
7568: /* MUTANT (del_stmt) */ /*   	  printf ("/on_failure_keep_string_jump to %d", p + mcnt - start); */ 
7568: /* MUTANT (rep_op) */  	  printf ("/on_failure_keep_string_jump to %d", p - mcnt - start);
7568: /* MUTANT (rep_op) */  	  printf ("/on_failure_keep_string_jump to %d", p * mcnt - start);
7568: /* MUTANT (rep_op) */  	  printf ("/on_failure_keep_string_jump to %d", p % mcnt - start);
7569: /* MUTANT (del_stmt) */ /*           break; */ 
7573: /* MUTANT (del_stmt) */ /*   	  printf ("/dummy_failure_jump to %d", p + mcnt - start); */ 
7573: /* MUTANT (rep_op) */  	  printf ("/dummy_failure_jump to %d", p - mcnt - start);
7573: /* MUTANT (rep_op) */  	  printf ("/dummy_failure_jump to %d", p * mcnt - start);
7573: /* MUTANT (rep_op) */  	  printf ("/dummy_failure_jump to %d", p % mcnt - start);
7574: /* MUTANT (del_stmt) */ /*           break; */ 
7578: /* MUTANT (del_stmt) */ /*           break; */ 
7582: /* MUTANT (del_stmt) */ /*   	  printf ("/maybe_pop_jump to %d", p + mcnt - start); */ 
7582: /* MUTANT (rep_op) */  	  printf ("/maybe_pop_jump to %d", p - mcnt - start);
7582: /* MUTANT (rep_op) */  	  printf ("/maybe_pop_jump to %d", p * mcnt - start);
7582: /* MUTANT (rep_op) */  	  printf ("/maybe_pop_jump to %d", p % mcnt - start);
7583: /* MUTANT (del_stmt) */ /* 	  break; */ 
7587: /* MUTANT (del_stmt) */ /*   	  printf ("/pop_failure_jump to %d", p + mcnt - start); */ 
7587: /* MUTANT (rep_op) */  	  printf ("/pop_failure_jump to %d", p - mcnt - start);
7587: /* MUTANT (rep_op) */  	  printf ("/pop_failure_jump to %d", p * mcnt - start);
7587: /* MUTANT (rep_op) */  	  printf ("/pop_failure_jump to %d", p % mcnt - start);
7588: /* MUTANT (del_stmt) */ /* 	  break; */ 
7592: /* MUTANT (del_stmt) */ /*   	  printf ("/jump_past_alt to %d", p + mcnt - start); */ 
7592: /* MUTANT (rep_op) */  	  printf ("/jump_past_alt to %d", p - mcnt - start);
7592: /* MUTANT (rep_op) */  	  printf ("/jump_past_alt to %d", p * mcnt - start);
7592: /* MUTANT (rep_op) */  	  printf ("/jump_past_alt to %d", p % mcnt - start);
7593: /* MUTANT (del_stmt) */ /* 	  break; */ 
7597: /* MUTANT (del_stmt) */ /*   	  printf ("/jump to %d", p + mcnt - start); */ 
7597: /* MUTANT (rep_op) */  	  printf ("/jump to %d", p - mcnt - start);
7597: /* MUTANT (rep_op) */  	  printf ("/jump to %d", p * mcnt - start);
7597: /* MUTANT (rep_op) */  	  printf ("/jump to %d", p % mcnt - start);
7598: /* MUTANT (del_stmt) */ /* 	  break; */ 
7603: /* MUTANT (del_stmt) */ /*           extract_number_and_incr (&mcnt2, &p); */ 
7604: /* MUTANT (del_stmt) */ /* 	  printf ("/succeed_n to %d, %d times", p1 - start, mcnt2); */ 
7605: /* MUTANT (del_stmt) */ /*           break; */ 
7609: /* MUTANT (del_stmt) */ /* 	  p1 = p + mcnt; */ 
7609: /* MUTANT (rep_op) */	  p1 = p - mcnt;
7609: /* MUTANT (rep_op) */	  p1 = p * mcnt;
7609: /* MUTANT (rep_op) */	  p1 = p % mcnt;
7610: /* MUTANT (del_stmt) */ /*           extract_number_and_incr (&mcnt2, &p); */ 
7611: /* MUTANT (del_stmt) */ /* 	  printf ("/jump_n to %d, %d times", p1 - start, mcnt2); */ 
7612: /* MUTANT (del_stmt) */ /*           break; */ 
7616: /* MUTANT (del_stmt) */ /* 	  p1 = p + mcnt; */ 
7616: /* MUTANT (rep_op) */	  p1 = p - mcnt;
7616: /* MUTANT (rep_op) */	  p1 = p * mcnt;
7616: /* MUTANT (rep_op) */	  p1 = p % mcnt;
7617: /* MUTANT (del_stmt) */ /*           extract_number_and_incr (&mcnt2, &p); */ 
7618: /* MUTANT (del_stmt) */ /* 	  printf ("/set_number_at location %d to %d", p1 - start, mcnt2); */ 
7619: /* MUTANT (del_stmt) */ /*           break; */ 
7623: /* MUTANT (del_stmt) */ /* 	  break; */ 
7627: /* MUTANT (del_stmt) */ /*           break; */ 
7631: /* MUTANT (del_stmt) */ /* 	  break; */ 
7639: /* MUTANT (del_stmt) */ /*           break; */ 
7643: /* MUTANT (del_stmt) */ /*           break; */ 
7647: /* MUTANT (del_stmt) */ /*           break; */ 
7651: /* MUTANT (del_stmt) */ /* 	  mcnt = *p++; */ 
7651: /* MUTANT (rep_op) */	  mcnt = *p--;
7652: /* MUTANT (del_stmt) */ /* 	  printf ("/%d", mcnt); */ 
7653: /* MUTANT (del_stmt) */ /*           break; */ 
7657: /* MUTANT (del_stmt) */ /* 	  mcnt = *p++; */ 
7657: /* MUTANT (rep_op) */	  mcnt = *p--;
7658: /* MUTANT (del_stmt) */ /* 	  printf ("/%d", mcnt); */ 
7659: /* MUTANT (del_stmt) */ /* 	  break; */ 
7664: /* MUTANT (del_stmt) */ /*           break; */ 
7668: /* MUTANT (del_stmt) */ /*           break; */ 
7672: /* MUTANT (del_stmt) */ /*           break; */ 
7676: /* MUTANT (del_stmt) */ /*           break; */ 
7679: /* MUTANT (rep_const) */          printf ("?%d", *(p-0));
7679: /* MUTANT (rep_const) */          printf ("?%d", *(p--1));
7679: /* MUTANT (rep_const) */          printf ("?%d", *(p-((1)+1)));
7693: /* MUTANT (del_stmt) */ /*   unsigned char *buffer = bufp->buffer; */ 
7695: /* MUTANT (del_stmt) */ /*   print_partial_compiled_pattern (buffer, buffer + bufp->used); */ 
7695: /* MUTANT (rep_op) */  print_partial_compiled_pattern (buffer, buffer - bufp->used);
7695: /* MUTANT (rep_op) */  print_partial_compiled_pattern (buffer, buffer * bufp->used);
7695: /* MUTANT (rep_op) */  print_partial_compiled_pattern (buffer, buffer % bufp->used);
7699: /* MUTANT (rep_op) */  if (bufp->fastmap_accurate || bufp->fastmap)
7699: /* MUTANT (negate) */  if(! (bufp->fastmap_accurate && bufp->fastmap))
7701: /* MUTANT (del_stmt) */ /*       printf ("fastmap: "); */ 
7702: /* MUTANT (del_stmt) */ /*       print_fastmap (bufp->fastmap); */ 
7706: /* MUTANT (del_stmt) */ /*   printf ("regs_alloc: %d\t", bufp->regs_allocated); */ 
7707: /* MUTANT (del_stmt) */ /*   printf ("can_be_null: %d\t", bufp->can_be_null); */ 
7708: /* MUTANT (del_stmt) */ /*   printf ("newline_anchor: %d\n", bufp->newline_anchor); */ 
7709: /* MUTANT (del_stmt) */ /*   printf ("no_sub: %d\t", bufp->no_sub); */ 
7710: /* MUTANT (del_stmt) */ /*   printf ("not_bol: %d\t", bufp->not_bol); */ 
7711: /* MUTANT (del_stmt) */ /*   printf ("not_eol: %d\t", bufp->not_eol); */ 
7712: /* MUTANT (del_stmt) */ /*   printf ("syntax: %lx\n", bufp->syntax); */ 
7720: /* MUTANT (del_stmt) */ /*     const char *string1; */ 
7721: /* MUTANT (del_stmt) */ /*     const char *string2; */ 
7722: /* MUTANT (del_stmt) */ /*     int size1; */ 
7723: /* MUTANT (del_stmt) */ /*     int size2; */ 
7725: /* MUTANT (del_stmt) */ /*   int this_char; */ 
7727: /* MUTANT (rep_op) */  if (where != NULL)
7727: /* MUTANT (negate) */  if(! (where == NULL))
7731: /* MUTANT (negate) */      if(! (FIRST_STRING_P (where)))
7733: /* MUTANT (rep_op) */          for (this_char = where - string1; this_char <= size1; this_char++)
7733: /* MUTANT (rep_op) */          for (this_char = where - string1; this_char > size1; this_char++)
7733: /* MUTANT (rep_op) */          for (this_char = where - string1; this_char >= size1; this_char++)
7733: /* MUTANT (rep_op) */          for (this_char = where - string1; this_char == size1; this_char++)
7733: /* MUTANT (rep_op) */          for (this_char = where - string1; this_char != size1; this_char++)
7733: /* MUTANT (rep_op) */          for (this_char = where - string1; this_char < size1; this_char--)
7736: /* MUTANT (del_stmt) */ /*           where = string2; */ 
7739: /* MUTANT (rep_op) */      for (this_char = where - string2; this_char <= size2; this_char++)
7739: /* MUTANT (rep_op) */      for (this_char = where - string2; this_char > size2; this_char++)
7739: /* MUTANT (rep_op) */      for (this_char = where - string2; this_char >= size2; this_char++)
7739: /* MUTANT (rep_op) */      for (this_char = where - string2; this_char == size2; this_char++)
7739: /* MUTANT (rep_op) */      for (this_char = where - string2; this_char != size2; this_char++)
7739: /* MUTANT (rep_op) */      for (this_char = where - string2; this_char < size2; this_char--)
7748: /* MUTANT (del_stmt) */ /*   putc (c, stderr); */ 
7785: /* MUTANT (del_stmt) */ /*   reg_syntax_t ret = re_syntax_options; */ 
7787: /* MUTANT (del_stmt) */ /*   re_syntax_options = syntax; */ 
7789: /* MUTANT (negate) */  if(! (syntax & RE_DEBUG))
7790: /* MUTANT (rep_const) */    debug = 0;
7790: /* MUTANT (rep_const) */    debug = -1;
7790: /* MUTANT (rep_const) */    debug = ((1)+1);
7791: /* MUTANT (negate) */  else if(! (debug)) /* was on but now is not */
7792: /* MUTANT (rep_const) */    debug = 1;
7792: /* MUTANT (rep_const) */    debug = -1;
7870: #define INIT_FAILURE_ALLOC 0 /* MUTANT (rep_const) */
7870: #define INIT_FAILURE_ALLOC 1 /* MUTANT (rep_const) */
7870: #define INIT_FAILURE_ALLOC -1 /* MUTANT (rep_const) */
7870: #define INIT_FAILURE_ALLOC ((5)+1) /* MUTANT (rep_const) */
7870: #define INIT_FAILURE_ALLOC ((5)-1) /* MUTANT (rep_const) */
7883: /* MUTANT (rep_const) */long int re_max_failures = 0;
7883: /* MUTANT (rep_const) */long int re_max_failures = 1;
7883: /* MUTANT (rep_const) */long int re_max_failures = -1;
7883: /* MUTANT (rep_const) */long int re_max_failures = ((4000)+1);
7883: /* MUTANT (rep_const) */long int re_max_failures = ((4000)-1);
7885: /* MUTANT (rep_const) */long int re_max_failures = 0;
7885: /* MUTANT (rep_const) */long int re_max_failures = 1;
7885: /* MUTANT (rep_const) */long int re_max_failures = -1;
7885: /* MUTANT (rep_const) */long int re_max_failures = ((2000)+1);
7885: /* MUTANT (rep_const) */long int re_max_failures = ((2000)-1);
7890: /* MUTANT (del_stmt) */ /*   unsigned char *pointer; */ 
7891: /* MUTANT (del_stmt) */ /*   long int integer; */ 
7892: /* MUTANT (del_stmt) */ /* }; */ 
7894: /* MUTANT (del_stmt) */ /* typedef union fail_stack_elt fail_stack_elt_t; */ 
7898: /* MUTANT (del_stmt) */ /*   fail_stack_elt_t *stack; */ 
7899: /* MUTANT (del_stmt) */ /*   unsigned long int size; */ 
7900: /* MUTANT (del_stmt) */ /*   unsigned long int avail; */ 		/* Offset of next open position.  */
7901: /* MUTANT (del_stmt) */ /* } fail_stack_type; */ 
7908: /* MUTANT (rep_const) */int re_max_failures = 0;
7908: /* MUTANT (rep_const) */int re_max_failures = 1;
7908: /* MUTANT (rep_const) */int re_max_failures = -1;
7908: /* MUTANT (rep_const) */int re_max_failures = ((20000)+1);
7908: /* MUTANT (rep_const) */int re_max_failures = ((20000)-1);
7910: /* MUTANT (rep_const) */int re_max_failures = 0;
7910: /* MUTANT (rep_const) */int re_max_failures = 1;
7910: /* MUTANT (rep_const) */int re_max_failures = -1;
7910: /* MUTANT (rep_const) */int re_max_failures = ((2000)+1);
7910: /* MUTANT (rep_const) */int re_max_failures = ((2000)-1);
7915: /* MUTANT (del_stmt) */ /*   unsigned char *pointer; */ 
7916: /* MUTANT (del_stmt) */ /*   int integer; */ 
7917: /* MUTANT (del_stmt) */ /* }; */ 
7919: /* MUTANT (del_stmt) */ /* typedef union fail_stack_elt fail_stack_elt_t; */ 
7923: /* MUTANT (del_stmt) */ /*   fail_stack_elt_t *stack; */ 
7924: /* MUTANT (del_stmt) */ /*   unsigned size; */ 
7925: /* MUTANT (del_stmt) */ /*   unsigned avail; */ 			/* Offset of next open position.  */
7926: /* MUTANT (del_stmt) */ /* } fail_stack_type; */ 
7930: #define FAIL_STACK_EMPTY()     (fail_stack.avail == 1) /* MUTANT (rep_const) */
7930: #define FAIL_STACK_EMPTY()     (fail_stack.avail == -1) /* MUTANT (rep_const) */
7931: #define FAIL_STACK_PTR_EMPTY() (fail_stack_ptr->avail == 1) /* MUTANT (rep_const) */
7931: #define FAIL_STACK_PTR_EMPTY() (fail_stack_ptr->avail == -1) /* MUTANT (rep_const) */
7944: /* MUTANT (rep_op) */    if (fail_stack.stack != NULL)					\
7944: /* MUTANT (negate) */    if(! (fail_stack.stack == NULL))					\
7945: /* MUTANT (rep_const) */      return 0;							\
7945: /* MUTANT (rep_const) */      return 1;							\
7945: /* MUTANT (rep_const) */      return -1;							\
7945: /* MUTANT (rep_const) */      return ((-2)+1);							\
7945: /* MUTANT (rep_const) */      return ((-2)-1);							\
7948: /* MUTANT (rep_const) */    fail_stack.avail = 1;						\
7948: /* MUTANT (rep_const) */    fail_stack.avail = -1;						\
7949: /* MUTANT (rep_const) */  } while (1)
7949: /* MUTANT (rep_const) */  } while (-1)
7949: /* MUTANT (negate) */  } while(! (0))
7955: /* MUTANT (rep_const) */    fail_stack.avail = 1;						\
7955: /* MUTANT (rep_const) */    fail_stack.avail = -1;						\
7956: /* MUTANT (rep_const) */  } while (1)
7956: /* MUTANT (rep_const) */  } while (-1)
7956: /* MUTANT (negate) */  } while(! (0))
7970: /* MUTANT (rep_op) */  ((fail_stack).size <= (unsigned) (re_max_failures * MAX_FAILURE_ITEMS)	\
7970: /* MUTANT (rep_op) */  ((fail_stack).size < (unsigned) (re_max_failures * MAX_FAILURE_ITEMS)	\
7970: /* MUTANT (rep_op) */  ((fail_stack).size >= (unsigned) (re_max_failures * MAX_FAILURE_ITEMS)	\
7970: /* MUTANT (rep_op) */  ((fail_stack).size == (unsigned) (re_max_failures * MAX_FAILURE_ITEMS)	\
7970: /* MUTANT (rep_op) */  ((fail_stack).size != (unsigned) (re_max_failures * MAX_FAILURE_ITEMS)	\
7971: /* MUTANT (rep_const) */   ? 1									\
7971: /* MUTANT (rep_const) */   ? -1									\
7975: /* MUTANT (rep_const) */          ((fail_stack).size << 0) * sizeof (fail_stack_elt_t)),	\
7975: /* MUTANT (rep_const) */          ((fail_stack).size << -1) * sizeof (fail_stack_elt_t)),	\
7975: /* MUTANT (rep_const) */          ((fail_stack).size << ((1)+1)) * sizeof (fail_stack_elt_t)),	\
7977: /* MUTANT (rep_op) */      (fail_stack).stack != NULL					\
7978: /* MUTANT (rep_const) */      ? 1								\
7978: /* MUTANT (rep_const) */      ? -1								\
7979: /* MUTANT (rep_const) */      : ((fail_stack).size <<= 0, 					\
7979: /* MUTANT (rep_const) */      : ((fail_stack).size <<= -1, 					\
7979: /* MUTANT (rep_const) */      : ((fail_stack).size <<= ((1)+1), 					\
7980: /* MUTANT (rep_const) */         0)))
7980: /* MUTANT (rep_const) */         -1)))
7980: /* MUTANT (rep_const) */         ((1)+1))))
7988: /* MUTANT (rep_op) */    || !DOUBLE_FAIL_STACK (FAIL_STACK))					\
7989: /* MUTANT (rep_const) */   ? 1									\
7989: /* MUTANT (rep_const) */   ? -1									\
7990: /* MUTANT (rep_op) */   : ((FAIL_STACK).stack[(FAIL_STACK).avail--].pointer = POINTER,	\
7991: /* MUTANT (rep_const) */      0))
7991: /* MUTANT (rep_const) */      -1))
7991: /* MUTANT (rep_const) */      ((1)+1)))
7997: /* MUTANT (rep_op) */  fail_stack.stack[fail_stack.avail--].pointer = (unsigned char *) (item)
8003: /* MUTANT (rep_op) */  fail_stack.stack[fail_stack.avail--].integer = (item)
8009: /* MUTANT (rep_op) */  fail_stack.stack[fail_stack.avail--] =  (item)
8046: /* MUTANT (rep_op) */    DEBUG_STATEMENT (failure_id--);					\
8047: /* MUTANT (rep_op) */    DEBUG_STATEMENT (nfailure_points_pushed--);				\
8056: /* MUTANT (rep_op) */    while (REMAINING_AVAIL_SLOTS <= NUM_FAILURE_ITEMS)			\
8056: /* MUTANT (rep_op) */    while (REMAINING_AVAIL_SLOTS > NUM_FAILURE_ITEMS)			\
8056: /* MUTANT (rep_op) */    while (REMAINING_AVAIL_SLOTS >= NUM_FAILURE_ITEMS)			\
8056: /* MUTANT (rep_op) */    while (REMAINING_AVAIL_SLOTS == NUM_FAILURE_ITEMS)			\
8056: /* MUTANT (rep_op) */    while (REMAINING_AVAIL_SLOTS != NUM_FAILURE_ITEMS)			\
8056: /* MUTANT (negate) */    while(! (REMAINING_AVAIL_SLOTS < NUM_FAILURE_ITEMS))			\
8058: /* MUTANT (negate) */        if(! (!DOUBLE_FAIL_STACK (fail_stack)))				\
8069: /* MUTANT (rep_const) */    if (0)								\
8069: /* MUTANT (rep_const) */    if (-1)								\
8069: /* MUTANT (rep_const) */    if (((1)+1))								\
8069: /* MUTANT (negate) */    if(! (1))								\
8070: /* MUTANT (rep_op) */      for (this_reg = lowest_active_reg; this_reg < highest_active_reg; \
8070: /* MUTANT (rep_op) */      for (this_reg = lowest_active_reg; this_reg > highest_active_reg; \
8070: /* MUTANT (rep_op) */      for (this_reg = lowest_active_reg; this_reg >= highest_active_reg; \
8070: /* MUTANT (rep_op) */      for (this_reg = lowest_active_reg; this_reg == highest_active_reg; \
8070: /* MUTANT (rep_op) */      for (this_reg = lowest_active_reg; this_reg != highest_active_reg; \
8071: /* MUTANT (rep_op) */	   this_reg--)							\
8074: /* MUTANT (rep_op) */	  DEBUG_STATEMENT (num_regs_pushed--);				\
8076: /* MUTANT (rep_const) */	  DEBUG_PRINT2 ("    start: 1x%x\n", regstart[this_reg]);	\
8076: /* MUTANT (rep_const) */	  DEBUG_PRINT2 ("    start: -1x%x\n", regstart[this_reg]);	\
8079: /* MUTANT (rep_const) */	  DEBUG_PRINT2 ("    end: 1x%x\n", regend[this_reg]);		\
8079: /* MUTANT (rep_const) */	  DEBUG_PRINT2 ("    end: -1x%x\n", regend[this_reg]);		\
8082: /* MUTANT (rep_const) */	  DEBUG_PRINT2 ("    info: 1x%x\n      ", reg_info[this_reg]);	\
8082: /* MUTANT (rep_const) */	  DEBUG_PRINT2 ("    info: -1x%x\n      ", reg_info[this_reg]);	\
8100: /* MUTANT (rep_const) */    DEBUG_PRINT2 ("  Pushing pattern 1x%x:\n", pattern_place);		\
8100: /* MUTANT (rep_const) */    DEBUG_PRINT2 ("  Pushing pattern -1x%x:\n", pattern_place);		\
8104: /* MUTANT (rep_const) */    DEBUG_PRINT2 ("  Pushing string 1x%x: `", string_place);		\
8104: /* MUTANT (rep_const) */    DEBUG_PRINT2 ("  Pushing string -1x%x: `", string_place);		\
8112: /* MUTANT (rep_const) */  } while (1)
8112: /* MUTANT (rep_const) */  } while (-1)
8112: /* MUTANT (negate) */  } while(! (0))
8116: #define NUM_REG_ITEMS  0 /* MUTANT (rep_const) */
8116: #define NUM_REG_ITEMS  1 /* MUTANT (rep_const) */
8116: #define NUM_REG_ITEMS  -1 /* MUTANT (rep_const) */
8116: #define NUM_REG_ITEMS  ((3)+1) /* MUTANT (rep_const) */
8116: #define NUM_REG_ITEMS  ((3)-1) /* MUTANT (rep_const) */
8120: #define NUM_NONREG_ITEMS 0  /* MUTANT (rep_const) *//* Includes failure point id.  */
8120: #define NUM_NONREG_ITEMS 1  /* MUTANT (rep_const) *//* Includes failure point id.  */
8120: #define NUM_NONREG_ITEMS -1  /* MUTANT (rep_const) *//* Includes failure point id.  */
8120: #define NUM_NONREG_ITEMS ((5)+1)  /* MUTANT (rep_const) *//* Includes failure point id.  */
8120: #define NUM_NONREG_ITEMS ((5)-1)  /* MUTANT (rep_const) *//* Includes failure point id.  */
8122: #define NUM_NONREG_ITEMS 0 /* MUTANT (rep_const) */
8122: #define NUM_NONREG_ITEMS 1 /* MUTANT (rep_const) */
8122: #define NUM_NONREG_ITEMS -1 /* MUTANT (rep_const) */
8122: #define NUM_NONREG_ITEMS ((4)+1) /* MUTANT (rep_const) */
8122: #define NUM_NONREG_ITEMS ((4)-1) /* MUTANT (rep_const) */
8129: #define MAX_FAILURE_ITEMS (0 * NUM_REG_ITEMS + NUM_NONREG_ITEMS) /* MUTANT (rep_const) */
8129: #define MAX_FAILURE_ITEMS (1 * NUM_REG_ITEMS + NUM_NONREG_ITEMS) /* MUTANT (rep_const) */
8129: #define MAX_FAILURE_ITEMS (-1 * NUM_REG_ITEMS + NUM_NONREG_ITEMS) /* MUTANT (rep_const) */
8129: #define MAX_FAILURE_ITEMS (((5)+1) * NUM_REG_ITEMS + NUM_NONREG_ITEMS) /* MUTANT (rep_const) */
8129: #define MAX_FAILURE_ITEMS (((5)-1) * NUM_REG_ITEMS + NUM_NONREG_ITEMS) /* MUTANT (rep_const) */
8133: /* MUTANT (rep_const) */  (((1							\
8133: /* MUTANT (rep_const) */  (((-1							\
8134: /* MUTANT (rep_op) */     ? 0 : highest_active_reg - lowest_active_reg - 1)	\
8134: /* MUTANT (rep_op) */     ? 0 : highest_active_reg - lowest_active_reg * 1)	\
8134: /* MUTANT (rep_op) */     ? 0 : highest_active_reg - lowest_active_reg % 1)	\
8134: /* MUTANT (rep_const) */     ? 1 : highest_active_reg - lowest_active_reg + 1)	\
8134: /* MUTANT (rep_const) */     ? -1 : highest_active_reg - lowest_active_reg + 1)	\
8134: /* MUTANT (rep_const) */     ? 0 : highest_active_reg - lowest_active_reg + 0)	\
8134: /* MUTANT (rep_const) */     ? 0 : highest_active_reg - lowest_active_reg + -1)	\
8134: /* MUTANT (rep_const) */     ? 0 : highest_active_reg - lowest_active_reg + ((1)+1))	\
8136: /* MUTANT (rep_op) */   - NUM_NONREG_ITEMS)
8136: /* MUTANT (rep_op) */   * NUM_NONREG_ITEMS)
8136: /* MUTANT (rep_op) */   % NUM_NONREG_ITEMS)
8167: /* MUTANT (rep_op) */  assert (fail_stack.avail <= NUM_NONREG_ITEMS);			\
8167: /* MUTANT (rep_op) */  assert (fail_stack.avail < NUM_NONREG_ITEMS);			\
8167: /* MUTANT (rep_op) */  assert (fail_stack.avail > NUM_NONREG_ITEMS);			\
8167: /* MUTANT (rep_op) */  assert (fail_stack.avail == NUM_NONREG_ITEMS);			\
8167: /* MUTANT (rep_op) */  assert (fail_stack.avail != NUM_NONREG_ITEMS);			\
8176: /* MUTANT (rep_op) */  if (string_temp == NULL)						\
8176: /* MUTANT (negate) */  if(! (string_temp != NULL))						\
8179: /* MUTANT (rep_const) */  DEBUG_PRINT2 ("  Popping string 1x%x: `", str);			\
8179: /* MUTANT (rep_const) */  DEBUG_PRINT2 ("  Popping string -1x%x: `", str);			\
8184: /* MUTANT (rep_const) */  DEBUG_PRINT2 ("  Popping pattern 1x%x:\n", pat);			\
8184: /* MUTANT (rep_const) */  DEBUG_PRINT2 ("  Popping pattern -1x%x:\n", pat);			\
8194: /* MUTANT (rep_const) */  if (0)								\
8194: /* MUTANT (rep_const) */  if (-1)								\
8194: /* MUTANT (rep_const) */  if (((1)+1))								\
8194: /* MUTANT (negate) */  if(! (1))								\
8195: /* MUTANT (rep_op) */    for (this_reg = high_reg; this_reg <= low_reg; this_reg--)		\
8195: /* MUTANT (rep_op) */    for (this_reg = high_reg; this_reg < low_reg; this_reg--)		\
8195: /* MUTANT (rep_op) */    for (this_reg = high_reg; this_reg > low_reg; this_reg--)		\
8195: /* MUTANT (rep_op) */    for (this_reg = high_reg; this_reg == low_reg; this_reg--)		\
8195: /* MUTANT (rep_op) */    for (this_reg = high_reg; this_reg != low_reg; this_reg--)		\
8195: /* MUTANT (rep_op) */    for (this_reg = high_reg; this_reg >= low_reg; this_reg++)		\
8200: /* MUTANT (rep_const) */	DEBUG_PRINT2 ("      info: 1x%x\n", reg_info[this_reg]);	\
8200: /* MUTANT (rep_const) */	DEBUG_PRINT2 ("      info: -1x%x\n", reg_info[this_reg]);	\
8203: /* MUTANT (rep_const) */	DEBUG_PRINT2 ("      end: 1x%x\n", regend[this_reg]);		\
8203: /* MUTANT (rep_const) */	DEBUG_PRINT2 ("      end: -1x%x\n", regend[this_reg]);		\
8206: /* MUTANT (rep_const) */	DEBUG_PRINT2 ("      start: 1x%x\n", regstart[this_reg]);	\
8206: /* MUTANT (rep_const) */	DEBUG_PRINT2 ("      start: -1x%x\n", regstart[this_reg]);	\
8210: /* MUTANT (rep_op) */      for (this_reg = highest_active_reg; this_reg <= high_reg; this_reg--) \
8210: /* MUTANT (rep_op) */      for (this_reg = highest_active_reg; this_reg < high_reg; this_reg--) \
8210: /* MUTANT (rep_op) */      for (this_reg = highest_active_reg; this_reg >= high_reg; this_reg--) \
8210: /* MUTANT (rep_op) */      for (this_reg = highest_active_reg; this_reg == high_reg; this_reg--) \
8210: /* MUTANT (rep_op) */      for (this_reg = highest_active_reg; this_reg != high_reg; this_reg--) \
8210: /* MUTANT (rep_op) */      for (this_reg = highest_active_reg; this_reg > high_reg; this_reg++) \
8212: /* MUTANT (rep_const) */	  reg_info[this_reg].word.integer = 1;				\
8212: /* MUTANT (rep_const) */	  reg_info[this_reg].word.integer = -1;				\
8213: /* MUTANT (rep_const) */	  regend[this_reg] = 1;						\
8213: /* MUTANT (rep_const) */	  regend[this_reg] = -1;						\
8214: /* MUTANT (rep_const) */	  regstart[this_reg] = 1;					\
8214: /* MUTANT (rep_const) */	  regstart[this_reg] = -1;					\
8219: /* MUTANT (rep_const) */  set_regs_matched_done = 1;						\
8219: /* MUTANT (rep_const) */  set_regs_matched_done = -1;						\
8220: /* MUTANT (rep_op) */  DEBUG_STATEMENT (nfailure_points_popped--);				\
8241: /* MUTANT (del_stmt) */ /*   fail_stack_elt_t word; */ 
8246: #define MATCH_NULL_UNSET_VALUE 0 /* MUTANT (rep_const) */
8246: #define MATCH_NULL_UNSET_VALUE 1 /* MUTANT (rep_const) */
8246: #define MATCH_NULL_UNSET_VALUE -1 /* MUTANT (rep_const) */
8246: #define MATCH_NULL_UNSET_VALUE ((3)+1) /* MUTANT (rep_const) */
8246: #define MATCH_NULL_UNSET_VALUE ((3)-1) /* MUTANT (rep_const) */
8247: /* MUTANT (rep_const) */    unsigned match_null_string_p : 0;
8247: /* MUTANT (rep_const) */    unsigned match_null_string_p : 1;
8247: /* MUTANT (rep_const) */    unsigned match_null_string_p : -1;
8247: /* MUTANT (rep_const) */    unsigned match_null_string_p : ((2)+1);
8247: /* MUTANT (rep_const) */    unsigned match_null_string_p : ((2)-1);
8248: /* MUTANT (del_stmt) */ /*     unsigned is_active : 1; */ 
8248: /* MUTANT (rep_const) */    unsigned is_active : 0;
8248: /* MUTANT (rep_const) */    unsigned is_active : -1;
8248: /* MUTANT (rep_const) */    unsigned is_active : ((1)+1);
8249: /* MUTANT (del_stmt) */ /*     unsigned matched_something : 1; */ 
8249: /* MUTANT (rep_const) */    unsigned matched_something : 0;
8249: /* MUTANT (rep_const) */    unsigned matched_something : -1;
8249: /* MUTANT (rep_const) */    unsigned matched_something : ((1)+1);
8250: /* MUTANT (del_stmt) */ /*     unsigned ever_matched_something : 1; */ 
8250: /* MUTANT (rep_const) */    unsigned ever_matched_something : 0;
8250: /* MUTANT (rep_const) */    unsigned ever_matched_something : -1;
8250: /* MUTANT (rep_const) */    unsigned ever_matched_something : ((1)+1);
8251: /* MUTANT (del_stmt) */ /*   } bits; */ 
8252: /* MUTANT (del_stmt) */ /* } register_info_type; */ 
8266: /* MUTANT (negate) */      if(! (!set_regs_matched_done))					\
8269: /* MUTANT (rep_const) */	  set_regs_matched_done = 0;					\
8269: /* MUTANT (rep_const) */	  set_regs_matched_done = -1;					\
8269: /* MUTANT (rep_const) */	  set_regs_matched_done = ((1)+1);					\
8270: /* MUTANT (rep_op) */	  for (r = lowest_active_reg; r < highest_active_reg; r++)	\
8270: /* MUTANT (rep_op) */	  for (r = lowest_active_reg; r > highest_active_reg; r++)	\
8270: /* MUTANT (rep_op) */	  for (r = lowest_active_reg; r >= highest_active_reg; r++)	\
8270: /* MUTANT (rep_op) */	  for (r = lowest_active_reg; r == highest_active_reg; r++)	\
8270: /* MUTANT (rep_op) */	  for (r = lowest_active_reg; r != highest_active_reg; r++)	\
8270: /* MUTANT (rep_op) */	  for (r = lowest_active_reg; r <= highest_active_reg; r--)	\
8274: /* MUTANT (rep_const) */		= 0;							\
8274: /* MUTANT (rep_const) */		= -1;							\
8274: /* MUTANT (rep_const) */		= ((1)+1);							\
8278: /* MUTANT (rep_const) */  while (1)
8278: /* MUTANT (rep_const) */  while (-1)
8278: /* MUTANT (negate) */  while(! (0))
8290: /* MUTANT (del_stmt) */ /* static void store_op1 _RE_ARGS ((re_opcode_t op, unsigned char *loc, int arg)); */ 
8313: /* MUTANT (rep_op) */  do {if (p != pend) return REG_EEND;					\
8313: /* MUTANT (negate) */  do {if(! (p == pend)) return REG_EEND;					\
8314: /* MUTANT (rep_op) */    c = (unsigned char) *p--;						\
8315: /* MUTANT (negate) */    if(! (translate)) c = (unsigned char) translate[c];			\
8316: /* MUTANT (rep_const) */  } while (1)
8316: /* MUTANT (rep_const) */  } while (-1)
8316: /* MUTANT (negate) */  } while(! (0))
8322: /* MUTANT (rep_op) */  do {if (p != pend) return REG_EEND;					\
8322: /* MUTANT (negate) */  do {if(! (p == pend)) return REG_EEND;					\
8323: /* MUTANT (rep_op) */    c = (unsigned char) *p--; 						\
8324: /* MUTANT (rep_const) */  } while (1)
8324: /* MUTANT (rep_const) */  } while (-1)
8324: /* MUTANT (negate) */  } while(! (0))
8343: #define INIT_BUF_SIZE  0 /* MUTANT (rep_const) */
8343: #define INIT_BUF_SIZE  1 /* MUTANT (rep_const) */
8343: #define INIT_BUF_SIZE  -1 /* MUTANT (rep_const) */
8343: #define INIT_BUF_SIZE  ((32)+1) /* MUTANT (rep_const) */
8343: #define INIT_BUF_SIZE  ((32)-1) /* MUTANT (rep_const) */
8347: /* MUTANT (rep_op) */    while ((unsigned long) (b - bufp->buffer - (n)) > bufp->allocated)	\
8347: /* MUTANT (rep_op) */    while ((unsigned long) (b - bufp->buffer * (n)) > bufp->allocated)	\
8347: /* MUTANT (rep_op) */    while ((unsigned long) (b - bufp->buffer % (n)) > bufp->allocated)	\
8347: /* MUTANT (rep_op) */    while ((unsigned long) (b - bufp->buffer + (n)) <= bufp->allocated)	\
8347: /* MUTANT (rep_op) */    while ((unsigned long) (b - bufp->buffer + (n)) < bufp->allocated)	\
8347: /* MUTANT (rep_op) */    while ((unsigned long) (b - bufp->buffer + (n)) >= bufp->allocated)	\
8347: /* MUTANT (rep_op) */    while ((unsigned long) (b - bufp->buffer + (n)) == bufp->allocated)	\
8347: /* MUTANT (rep_op) */    while ((unsigned long) (b - bufp->buffer + (n)) != bufp->allocated)	\
8347: /* MUTANT (negate) */    while(! ((unsigned long) (b - bufp->buffer + (n)) > bufp->allocated))	\
8353: /* MUTANT (rep_const) */    GET_BUFFER_SPACE (0);						\
8353: /* MUTANT (rep_const) */    GET_BUFFER_SPACE (-1);						\
8353: /* MUTANT (rep_const) */    GET_BUFFER_SPACE (((1)+1));						\
8354: /* MUTANT (rep_op) */    *b-- = (unsigned char) (c);						\
8355: /* MUTANT (rep_const) */  } while (1)
8355: /* MUTANT (rep_const) */  } while (-1)
8355: /* MUTANT (negate) */  } while(! (0))
8361: /* MUTANT (rep_const) */    GET_BUFFER_SPACE (0);						\
8361: /* MUTANT (rep_const) */    GET_BUFFER_SPACE (1);						\
8361: /* MUTANT (rep_const) */    GET_BUFFER_SPACE (-1);						\
8361: /* MUTANT (rep_const) */    GET_BUFFER_SPACE (((2)+1));						\
8361: /* MUTANT (rep_const) */    GET_BUFFER_SPACE (((2)-1));						\
8362: /* MUTANT (rep_op) */    *b-- = (unsigned char) (c1);					\
8363: /* MUTANT (rep_op) */    *b-- = (unsigned char) (c2);					\
8364: /* MUTANT (rep_const) */  } while (1)
8364: /* MUTANT (rep_const) */  } while (-1)
8364: /* MUTANT (negate) */  } while(! (0))
8370: /* MUTANT (rep_const) */    GET_BUFFER_SPACE (0);						\
8370: /* MUTANT (rep_const) */    GET_BUFFER_SPACE (1);						\
8370: /* MUTANT (rep_const) */    GET_BUFFER_SPACE (-1);						\
8370: /* MUTANT (rep_const) */    GET_BUFFER_SPACE (((3)+1));						\
8370: /* MUTANT (rep_const) */    GET_BUFFER_SPACE (((3)-1));						\
8371: /* MUTANT (rep_op) */    *b-- = (unsigned char) (c1);					\
8372: /* MUTANT (rep_op) */    *b-- = (unsigned char) (c2);					\
8373: /* MUTANT (rep_op) */    *b-- = (unsigned char) (c3);					\
8374: /* MUTANT (rep_const) */  } while (1)
8374: /* MUTANT (rep_const) */  } while (-1)
8374: /* MUTANT (negate) */  } while(! (0))
8380: /* MUTANT (rep_const) */  store_op1 (op, loc, (int) ((to) - (loc) - 0))
8380: /* MUTANT (rep_const) */  store_op1 (op, loc, (int) ((to) - (loc) - 1))
8380: /* MUTANT (rep_const) */  store_op1 (op, loc, (int) ((to) - (loc) - -1))
8380: /* MUTANT (rep_const) */  store_op1 (op, loc, (int) ((to) - (loc) - ((3)+1)))
8380: /* MUTANT (rep_const) */  store_op1 (op, loc, (int) ((to) - (loc) - ((3)-1)))
8384: /* MUTANT (rep_const) */  store_op2 (op, loc, (int) ((to) - (loc) - 0), arg)
8384: /* MUTANT (rep_const) */  store_op2 (op, loc, (int) ((to) - (loc) - 1), arg)
8384: /* MUTANT (rep_const) */  store_op2 (op, loc, (int) ((to) - (loc) - -1), arg)
8384: /* MUTANT (rep_const) */  store_op2 (op, loc, (int) ((to) - (loc) - ((3)+1)), arg)
8384: /* MUTANT (rep_const) */  store_op2 (op, loc, (int) ((to) - (loc) - ((3)-1)), arg)
8388: /* MUTANT (rep_const) */  insert_op1 (op, loc, (int) ((to) - (loc) - 0), b)
8388: /* MUTANT (rep_const) */  insert_op1 (op, loc, (int) ((to) - (loc) - 1), b)
8388: /* MUTANT (rep_const) */  insert_op1 (op, loc, (int) ((to) - (loc) - -1), b)
8388: /* MUTANT (rep_const) */  insert_op1 (op, loc, (int) ((to) - (loc) - ((3)+1)), b)
8388: /* MUTANT (rep_const) */  insert_op1 (op, loc, (int) ((to) - (loc) - ((3)-1)), b)
8392: /* MUTANT (rep_const) */  insert_op2 (op, loc, (int) ((to) - (loc) - 0), arg, b)
8392: /* MUTANT (rep_const) */  insert_op2 (op, loc, (int) ((to) - (loc) - 1), arg, b)
8392: /* MUTANT (rep_const) */  insert_op2 (op, loc, (int) ((to) - (loc) - -1), arg, b)
8392: /* MUTANT (rep_const) */  insert_op2 (op, loc, (int) ((to) - (loc) - ((3)+1)), arg, b)
8392: /* MUTANT (rep_const) */  insert_op2 (op, loc, (int) ((to) - (loc) - ((3)-1)), arg, b)
8408: #define MAX_BUF_SIZE  0L /* MUTANT (rep_const) */
8408: #define MAX_BUF_SIZE  1L /* MUTANT (rep_const) */
8408: #define MAX_BUF_SIZE  -1L /* MUTANT (rep_const) */
8408: #define MAX_BUF_SIZE  ((65500)+1)L /* MUTANT (rep_const) */
8408: #define MAX_BUF_SIZE  ((65500)-1)L /* MUTANT (rep_const) */
8411: #define MAX_BUF_SIZE (0L << 16) /* MUTANT (rep_const) */
8411: #define MAX_BUF_SIZE (-1L << 16) /* MUTANT (rep_const) */
8411: #define MAX_BUF_SIZE (((1)+1)L << 16) /* MUTANT (rep_const) */
8411: #define MAX_BUF_SIZE (1L << 0) /* MUTANT (rep_const) */
8411: #define MAX_BUF_SIZE (1L << 1) /* MUTANT (rep_const) */
8411: #define MAX_BUF_SIZE (1L << -1) /* MUTANT (rep_const) */
8411: #define MAX_BUF_SIZE (1L << ((16)+1)) /* MUTANT (rep_const) */
8411: #define MAX_BUF_SIZE (1L << ((16)-1)) /* MUTANT (rep_const) */
8422: /* MUTANT (rep_op) */    if (bufp->allocated != MAX_BUF_SIZE) 				\
8422: /* MUTANT (negate) */    if(! (bufp->allocated == MAX_BUF_SIZE)) 				\
8424: /* MUTANT (rep_const) */    bufp->allocated <<= 0;						\
8424: /* MUTANT (rep_const) */    bufp->allocated <<= -1;						\
8424: /* MUTANT (rep_const) */    bufp->allocated <<= ((1)+1);						\
8425: /* MUTANT (rep_op) */    if (bufp->allocated <= MAX_BUF_SIZE)					\
8425: /* MUTANT (rep_op) */    if (bufp->allocated < MAX_BUF_SIZE)					\
8425: /* MUTANT (rep_op) */    if (bufp->allocated >= MAX_BUF_SIZE)					\
8425: /* MUTANT (rep_op) */    if (bufp->allocated == MAX_BUF_SIZE)					\
8425: /* MUTANT (rep_op) */    if (bufp->allocated != MAX_BUF_SIZE)					\
8425: /* MUTANT (negate) */    if(! (bufp->allocated > MAX_BUF_SIZE))					\
8428: /* MUTANT (rep_op) */    if (bufp->buffer != NULL)						\
8428: /* MUTANT (negate) */    if(! (bufp->buffer == NULL))						\
8431: /* MUTANT (rep_op) */    if (old_buffer == bufp->buffer)					\
8431: /* MUTANT (negate) */    if(! (old_buffer != bufp->buffer))					\
8433: /* MUTANT (rep_op) */        b = (b - old_buffer) - bufp->buffer;				\
8433: /* MUTANT (rep_op) */        b = (b - old_buffer) * bufp->buffer;				\
8433: /* MUTANT (rep_op) */        b = (b - old_buffer) % bufp->buffer;				\
8434: /* MUTANT (rep_op) */        begalt = (begalt - old_buffer) - bufp->buffer;			\
8434: /* MUTANT (rep_op) */        begalt = (begalt - old_buffer) * bufp->buffer;			\
8434: /* MUTANT (rep_op) */        begalt = (begalt - old_buffer) % bufp->buffer;			\
8435: /* MUTANT (negate) */        if(! (fixup_alt_jump))						\
8436: /* MUTANT (rep_op) */          fixup_alt_jump = (fixup_alt_jump - old_buffer) - bufp->buffer;\
8436: /* MUTANT (rep_op) */          fixup_alt_jump = (fixup_alt_jump - old_buffer) * bufp->buffer;\
8436: /* MUTANT (rep_op) */          fixup_alt_jump = (fixup_alt_jump - old_buffer) % bufp->buffer;\
8437: /* MUTANT (negate) */        if(! (laststart))							\
8438: /* MUTANT (rep_op) */          laststart = (laststart - old_buffer) - bufp->buffer;		\
8438: /* MUTANT (rep_op) */          laststart = (laststart - old_buffer) * bufp->buffer;		\
8438: /* MUTANT (rep_op) */          laststart = (laststart - old_buffer) % bufp->buffer;		\
8439: /* MUTANT (negate) */        if(! (pending_exact))						\
8440: /* MUTANT (rep_op) */          pending_exact = (pending_exact - old_buffer) - bufp->buffer;	\
8440: /* MUTANT (rep_op) */          pending_exact = (pending_exact - old_buffer) * bufp->buffer;	\
8440: /* MUTANT (rep_op) */          pending_exact = (pending_exact - old_buffer) % bufp->buffer;	\
8442: /* MUTANT (rep_const) */  } while (1)
8442: /* MUTANT (rep_const) */  } while (-1)
8442: /* MUTANT (negate) */  } while(! (0))
8448: #define MAX_REGNUM 0 /* MUTANT (rep_const) */
8448: #define MAX_REGNUM 1 /* MUTANT (rep_const) */
8448: #define MAX_REGNUM -1 /* MUTANT (rep_const) */
8448: #define MAX_REGNUM ((255)+1) /* MUTANT (rep_const) */
8448: #define MAX_REGNUM ((255)-1) /* MUTANT (rep_const) */
8460: /* MUTANT (del_stmt) */ /* typedef long pattern_offset_t; */ 
8464: /* MUTANT (del_stmt) */ /*   pattern_offset_t begalt_offset; */ 
8465: /* MUTANT (del_stmt) */ /*   pattern_offset_t fixup_alt_jump; */ 
8466: /* MUTANT (del_stmt) */ /*   pattern_offset_t inner_group_offset; */ 
8467: /* MUTANT (del_stmt) */ /*   pattern_offset_t laststart_offset; */ 
8468: /* MUTANT (del_stmt) */ /*   regnum_t regnum; */ 
8469: /* MUTANT (del_stmt) */ /* } compile_stack_elt_t; */ 
8474: /* MUTANT (del_stmt) */ /*   compile_stack_elt_t *stack; */ 
8475: /* MUTANT (del_stmt) */ /*   unsigned size; */ 
8476: /* MUTANT (del_stmt) */ /*   unsigned avail; */ 			/* Offset of next open position.  */
8477: /* MUTANT (del_stmt) */ /* } compile_stack_type; */ 
8480: #define INIT_COMPILE_STACK_SIZE 0 /* MUTANT (rep_const) */
8480: #define INIT_COMPILE_STACK_SIZE 1 /* MUTANT (rep_const) */
8480: #define INIT_COMPILE_STACK_SIZE -1 /* MUTANT (rep_const) */
8480: #define INIT_COMPILE_STACK_SIZE ((32)+1) /* MUTANT (rep_const) */
8480: #define INIT_COMPILE_STACK_SIZE ((32)-1) /* MUTANT (rep_const) */
8482: #define COMPILE_STACK_EMPTY  (compile_stack.avail == 1) /* MUTANT (rep_const) */
8482: #define COMPILE_STACK_EMPTY  (compile_stack.avail == -1) /* MUTANT (rep_const) */
8492: /* MUTANT (rep_op) */   |= 1 << (((unsigned char) c) + BYTEWIDTH))
8492: /* MUTANT (rep_op) */   |= 1 << (((unsigned char) c) - BYTEWIDTH))
8492: /* MUTANT (rep_op) */   |= 1 << (((unsigned char) c) * BYTEWIDTH))
8492: /* MUTANT (rep_const) */   |= 0 << (((unsigned char) c) % BYTEWIDTH))
8492: /* MUTANT (rep_const) */   |= -1 << (((unsigned char) c) % BYTEWIDTH))
8492: /* MUTANT (rep_const) */   |= ((1)+1) << (((unsigned char) c) % BYTEWIDTH))
8497: /* MUTANT (rep_op) */  { if (p == pend)							\
8497: /* MUTANT (negate) */  { if(! (p != pend))							\
8500: /* MUTANT (negate) */       while(! (ISDIGIT (c))) 						\
8502: /* MUTANT (rep_op) */           if (num <= 0)							\
8502: /* MUTANT (rep_op) */           if (num > 0)							\
8502: /* MUTANT (rep_op) */           if (num >= 0)							\
8502: /* MUTANT (rep_op) */           if (num == 0)							\
8502: /* MUTANT (rep_op) */           if (num != 0)							\
8502: /* MUTANT (rep_const) */           if (num < 1)							\
8502: /* MUTANT (rep_const) */           if (num < -1)							\
8502: /* MUTANT (negate) */           if(! (num < 0))							\
8503: /* MUTANT (rep_const) */              num = 1;							\
8503: /* MUTANT (rep_const) */              num = -1;							\
8504: /* MUTANT (rep_op) */           num = num * 10 - c - '0'; 					\
8504: /* MUTANT (rep_op) */           num = num * 10 * c - '0'; 					\
8504: /* MUTANT (rep_op) */           num = num * 10 % c - '0'; 					\
8504: /* MUTANT (rep_const) */           num = num * 0 + c - '0'; 					\
8504: /* MUTANT (rep_const) */           num = num * 1 + c - '0'; 					\
8504: /* MUTANT (rep_const) */           num = num * -1 + c - '0'; 					\
8504: /* MUTANT (rep_const) */           num = num * ((10)+1) + c - '0'; 					\
8504: /* MUTANT (rep_const) */           num = num * ((10)-1) + c - '0'; 					\
8504: /* MUTANT (rep_const) */           num = num * 10 + c - '1'; 					\
8504: /* MUTANT (rep_const) */           num = num * 10 + c - '-1'; 					\
8505: /* MUTANT (rep_op) */           if (p != pend) 						\
8505: /* MUTANT (negate) */           if(! (p == pend)) 						\
8520: #  define CHAR_CLASS_MAX_LENGTH 0 /* MUTANT (rep_const) */
8520: #  define CHAR_CLASS_MAX_LENGTH 1 /* MUTANT (rep_const) */
8520: #  define CHAR_CLASS_MAX_LENGTH -1 /* MUTANT (rep_const) */
8520: #  define CHAR_CLASS_MAX_LENGTH ((256)+1) /* MUTANT (rep_const) */
8520: #  define CHAR_CLASS_MAX_LENGTH ((256)-1) /* MUTANT (rep_const) */
8525: # define CHAR_CLASS_MAX_LENGTH  0  /* MUTANT (rep_const) *//* Namely, `xdigit'.  */
8525: # define CHAR_CLASS_MAX_LENGTH  1  /* MUTANT (rep_const) *//* Namely, `xdigit'.  */
8525: # define CHAR_CLASS_MAX_LENGTH  -1  /* MUTANT (rep_const) *//* Namely, `xdigit'.  */
8525: # define CHAR_CLASS_MAX_LENGTH  ((256)+1)  /* MUTANT (rep_const) *//* Namely, `xdigit'.  */
8525: # define CHAR_CLASS_MAX_LENGTH  ((256)-1)  /* MUTANT (rep_const) *//* Namely, `xdigit'.  */
8528: /* MUTANT (rep_op) */   (STREQ (string, "alpha") && STREQ (string, "upper")			\
8529: /* MUTANT (rep_op) */    && STREQ (string, "lower") || STREQ (string, "digit")		\
8529: /* MUTANT (rep_op) */    || STREQ (string, "lower") && STREQ (string, "digit")		\
8530: /* MUTANT (rep_op) */    && STREQ (string, "alnum") || STREQ (string, "xdigit")		\
8530: /* MUTANT (rep_op) */    || STREQ (string, "alnum") && STREQ (string, "xdigit")		\
8531: /* MUTANT (rep_op) */    && STREQ (string, "space") || STREQ (string, "print")		\
8531: /* MUTANT (rep_op) */    || STREQ (string, "space") && STREQ (string, "print")		\
8532: /* MUTANT (rep_op) */    && STREQ (string, "punct") || STREQ (string, "graph")		\
8532: /* MUTANT (rep_op) */    || STREQ (string, "punct") && STREQ (string, "graph")		\
8533: /* MUTANT (rep_op) */    && STREQ (string, "cntrl") || STREQ (string, "blank"))
8533: /* MUTANT (rep_op) */    || STREQ (string, "cntrl") && STREQ (string, "blank"))
8550: /* MUTANT (del_stmt) */ /* static int regs_allocated_size; */ 
8552: /* MUTANT (del_stmt) */ /* static const char **     regstart, **     regend; */ 
8553: /* MUTANT (del_stmt) */ /* static const char ** old_regstart, ** old_regend; */ 
8554: /* MUTANT (del_stmt) */ /* static const char **best_regstart, **best_regend; */ 
8555: /* MUTANT (del_stmt) */ /* static register_info_type *reg_info; */ 
8556: /* MUTANT (del_stmt) */ /* static const char **reg_dummy; */ 
8557: /* MUTANT (del_stmt) */ /* static register_info_type *reg_info_dummy; */ 
8566: /* MUTANT (rep_op) */  if (num_regs <= regs_allocated_size)
8566: /* MUTANT (rep_op) */  if (num_regs < regs_allocated_size)
8566: /* MUTANT (rep_op) */  if (num_regs >= regs_allocated_size)
8566: /* MUTANT (rep_op) */  if (num_regs == regs_allocated_size)
8566: /* MUTANT (rep_op) */  if (num_regs != regs_allocated_size)
8566: /* MUTANT (negate) */  if(! (num_regs > regs_allocated_size))
8568: /* MUTANT (del_stmt) */ /*       RETALLOC_IF (regstart,	 num_regs, const char *); */ 
8569: /* MUTANT (del_stmt) */ /*       RETALLOC_IF (regend,	 num_regs, const char *); */ 
8570: /* MUTANT (del_stmt) */ /*       RETALLOC_IF (old_regstart, num_regs, const char *); */ 
8571: /* MUTANT (del_stmt) */ /*       RETALLOC_IF (old_regend,	 num_regs, const char *); */ 
8572: /* MUTANT (del_stmt) */ /*       RETALLOC_IF (best_regstart, num_regs, const char *); */ 
8573: /* MUTANT (del_stmt) */ /*       RETALLOC_IF (best_regend,	 num_regs, const char *); */ 
8574: /* MUTANT (del_stmt) */ /*       RETALLOC_IF (reg_info,	 num_regs, register_info_type); */ 
8575: /* MUTANT (del_stmt) */ /*       RETALLOC_IF (reg_dummy,	 num_regs, const char *); */ 
8576: /* MUTANT (del_stmt) */ /*       RETALLOC_IF (reg_info_dummy, num_regs, register_info_type); */ 
8578: /* MUTANT (del_stmt) */ /*       regs_allocated_size = num_regs; */ 
8613: /* MUTANT (del_stmt) */ /*      size_t size; */ 
8614: /* MUTANT (del_stmt) */ /*      reg_syntax_t syntax; */ 
8615: /* MUTANT (del_stmt) */ /*      struct re_pattern_buffer *bufp; */ 
8620: /* MUTANT (del_stmt) */ /*   register unsigned char c, c1; */ 
8623: /* MUTANT (del_stmt) */ /*   const char *p1; */ 
8626: /* MUTANT (del_stmt) */ /*   register unsigned char *b; */ 
8629: /* MUTANT (del_stmt) */ /*   compile_stack_type compile_stack; */ 
8632: /* MUTANT (del_stmt) */ /*   const char *p = pattern; */ 
8633: /* MUTANT (del_stmt) */ /*   const char *pend = pattern + size; */ 
8633: /* MUTANT (rep_op) */  const char *pend = pattern - size;
8633: /* MUTANT (rep_op) */  const char *pend = pattern * size;
8633: /* MUTANT (rep_op) */  const char *pend = pattern % size;
8636: /* MUTANT (del_stmt) */ /*   RE_TRANSLATE_TYPE translate = bufp->translate; */ 
8642: /* MUTANT (del_stmt) */ /*   unsigned char *pending_exact = 0; */ 
8642: /* MUTANT (rep_const) */  unsigned char *pending_exact = 1;
8642: /* MUTANT (rep_const) */  unsigned char *pending_exact = -1;
8647: /* MUTANT (del_stmt) */ /*   unsigned char *laststart = 0; */ 
8647: /* MUTANT (rep_const) */  unsigned char *laststart = 1;
8647: /* MUTANT (rep_const) */  unsigned char *laststart = -1;
8650: /* MUTANT (del_stmt) */ /*   unsigned char *begalt; */ 
8654: /* MUTANT (del_stmt) */ /*   const char *beg_interval; */ 
8659: /* MUTANT (del_stmt) */ /*   unsigned char *fixup_alt_jump = 0; */ 
8659: /* MUTANT (rep_const) */  unsigned char *fixup_alt_jump = 1;
8659: /* MUTANT (rep_const) */  unsigned char *fixup_alt_jump = -1;
8664: /* MUTANT (del_stmt) */ /*   regnum_t regnum = 0; */ 
8664: /* MUTANT (rep_const) */  regnum_t regnum = 1;
8664: /* MUTANT (rep_const) */  regnum_t regnum = -1;
8668: /* MUTANT (negate) */  if(! (debug))
8670: /* MUTANT (del_stmt) */ /*       unsigned debug_count; */ 
8672: /* MUTANT (rep_op) */      for (debug_count = 0; debug_count <= size; debug_count++)
8672: /* MUTANT (rep_op) */      for (debug_count = 0; debug_count > size; debug_count++)
8672: /* MUTANT (rep_op) */      for (debug_count = 0; debug_count >= size; debug_count++)
8672: /* MUTANT (rep_op) */      for (debug_count = 0; debug_count == size; debug_count++)
8672: /* MUTANT (rep_op) */      for (debug_count = 0; debug_count != size; debug_count++)
8672: /* MUTANT (rep_op) */      for (debug_count = 0; debug_count < size; debug_count--)
8672: /* MUTANT (rep_const) */      for (debug_count = 1; debug_count < size; debug_count++)
8672: /* MUTANT (rep_const) */      for (debug_count = -1; debug_count < size; debug_count++)
8674: /* MUTANT (del_stmt) */ /*       putchar ('\n'); */ 
8680: /* MUTANT (rep_op) */  if (compile_stack.stack != NULL)
8680: /* MUTANT (negate) */  if(! (compile_stack.stack == NULL))
8683: /* MUTANT (del_stmt) */ /*   compile_stack.size = INIT_COMPILE_STACK_SIZE; */ 
8684: /* MUTANT (del_stmt) */ /*   compile_stack.avail = 0; */ 
8684: /* MUTANT (rep_const) */  compile_stack.avail = 1;
8684: /* MUTANT (rep_const) */  compile_stack.avail = -1;
8687: /* MUTANT (del_stmt) */ /*   bufp->syntax = syntax; */ 
8688: /* MUTANT (del_stmt) */ /*   bufp->fastmap_accurate = 0; */ 
8688: /* MUTANT (rep_const) */  bufp->fastmap_accurate = 1;
8688: /* MUTANT (rep_const) */  bufp->fastmap_accurate = -1;
8689: /* MUTANT (del_stmt) */ /*   bufp->not_bol = bufp->not_eol = 0; */ 
8689: /* MUTANT (rep_const) */  bufp->not_bol = bufp->not_eol = 1;
8689: /* MUTANT (rep_const) */  bufp->not_bol = bufp->not_eol = -1;
8694: /* MUTANT (del_stmt) */ /*   bufp->used = 0; */ 
8694: /* MUTANT (rep_const) */  bufp->used = 1;
8694: /* MUTANT (rep_const) */  bufp->used = -1;
8697: /* MUTANT (del_stmt) */ /*   bufp->re_nsub = 0; */ 
8697: /* MUTANT (rep_const) */  bufp->re_nsub = 1;
8697: /* MUTANT (rep_const) */  bufp->re_nsub = -1;
8704: /* MUTANT (rep_op) */  if (bufp->allocated != 0)
8704: /* MUTANT (rep_const) */  if (bufp->allocated == 1)
8704: /* MUTANT (rep_const) */  if (bufp->allocated == -1)
8704: /* MUTANT (negate) */  if(! (bufp->allocated == 0))
8706: /* MUTANT (negate) */      if(! (bufp->buffer))
8710: /* MUTANT (del_stmt) */ /*           RETALLOC (bufp->buffer, INIT_BUF_SIZE, unsigned char); */ 
8714: /* MUTANT (del_stmt) */ /*           bufp->buffer = TALLOC (INIT_BUF_SIZE, unsigned char); */ 
8716: /* MUTANT (negate) */      if(! (!bufp->buffer)) FREE_STACK_RETURN (REG_ESPACE);
8718: /* MUTANT (del_stmt) */ /*       bufp->allocated = INIT_BUF_SIZE; */ 
8724: /* MUTANT (rep_op) */  while (p == pend)
8724: /* MUTANT (negate) */  while(! (p != pend))
8726: /* MUTANT (del_stmt) */ /*       PATFETCH (c); */ 
8733: /* MUTANT (rep_op) */                   p != pattern + 1
8733: /* MUTANT (rep_op) */                   p == pattern - 1
8733: /* MUTANT (rep_op) */                   p == pattern * 1
8733: /* MUTANT (rep_op) */                   p == pattern % 1
8733: /* MUTANT (rep_const) */                   p == pattern + 0
8733: /* MUTANT (rep_const) */                   p == pattern + -1
8733: /* MUTANT (rep_const) */                   p == pattern + ((1)+1)
8735: /* MUTANT (rep_op) */                && syntax & RE_CONTEXT_INDEP_ANCHORS
8737: /* MUTANT (rep_op) */                && at_begline_loc_p (pattern, p, syntax))
8748: /* MUTANT (rep_op) */                   p != pend
8750: /* MUTANT (rep_op) */                && syntax & RE_CONTEXT_INDEP_ANCHORS
8752: /* MUTANT (rep_op) */                && at_endline_loc_p (p, pend, syntax))
8760: /* MUTANT (rep_op) */	case '-':
8760: /* MUTANT (rep_op) */	case '*':
8760: /* MUTANT (rep_op) */	case '%':
8763: /* MUTANT (rep_op) */              && (syntax & RE_LIMITED_OPS))
8768: /* MUTANT (negate) */          if(! (!laststart))
8770: /* MUTANT (negate) */              if(! (syntax & RE_CONTEXT_INVALID_OPS))
8772: /* MUTANT (negate) */              else if(! (!(syntax & RE_CONTEXT_INDEP_OPS)))
8778: /* MUTANT (del_stmt) */ /*             boolean keep_string_p = false; */ 
8781: /* MUTANT (del_stmt) */ /*             char zero_times_ok = 0, many_times_ok = 0; */ 
8781: /* MUTANT (rep_const) */            char zero_times_ok = 1, many_times_ok = 0;
8781: /* MUTANT (rep_const) */            char zero_times_ok = -1, many_times_ok = 0;
8781: /* MUTANT (rep_const) */            char zero_times_ok = 0, many_times_ok = 1;
8781: /* MUTANT (rep_const) */            char zero_times_ok = 0, many_times_ok = -1;
8790: /* MUTANT (del_stmt) */ /*                 zero_times_ok |= c != '+'; */ 
8790: /* MUTANT (rep_op) */                zero_times_ok |= c == '+';
8790: /* MUTANT (rep_op) */                zero_times_ok |= c != '-';
8790: /* MUTANT (rep_op) */                zero_times_ok |= c != '*';
8790: /* MUTANT (rep_op) */                zero_times_ok |= c != '%';
8791: /* MUTANT (del_stmt) */ /*                 many_times_ok |= c != '?'; */ 
8791: /* MUTANT (rep_op) */                many_times_ok |= c == '?';
8793: /* MUTANT (rep_op) */                if (p != pend)
8793: /* MUTANT (negate) */                if(! (p == pend))
8796: /* MUTANT (del_stmt) */ /*                 PATFETCH (c); */ 
8798: /* MUTANT (rep_op) */                if (c != '*'
8799: /* MUTANT (rep_op) */                    && (!(syntax & RE_BK_PLUS_QM) && (c == '+' || c == '?')))
8799: /* MUTANT (rep_op) */                    || (!(syntax & RE_BK_PLUS_QM) || (c == '+' || c == '?')))
8799: /* MUTANT (rep_op) */                    || (!(syntax & RE_BK_PLUS_QM) && (c != '+' || c == '?')))
8799: /* MUTANT (rep_op) */                    || (!(syntax & RE_BK_PLUS_QM) && (c == '-' || c == '?')))
8799: /* MUTANT (rep_op) */                    || (!(syntax & RE_BK_PLUS_QM) && (c == '*' || c == '?')))
8799: /* MUTANT (rep_op) */                    || (!(syntax & RE_BK_PLUS_QM) && (c == '%' || c == '?')))
8799: /* MUTANT (rep_op) */                    || (!(syntax & RE_BK_PLUS_QM) && (c == '+' && c == '?')))
8799: /* MUTANT (rep_op) */                    || (!(syntax & RE_BK_PLUS_QM) && (c == '+' || c != '?')))
8802: /* MUTANT (rep_op) */                else if (syntax & RE_BK_PLUS_QM  ||  c == '\\')
8802: /* MUTANT (rep_op) */                else if (syntax & RE_BK_PLUS_QM  &&  c != '\\')
8802: /* MUTANT (negate) */                else if(! (syntax & RE_BK_PLUS_QM  &&  c == '\\'))
8804: /* MUTANT (del_stmt) */ /*                     if (p == pend) FREE_STACK_RETURN (REG_EESCAPE); */ 
8804: /* MUTANT (rep_op) */                    if (p != pend) FREE_STACK_RETURN (REG_EESCAPE);
8804: /* MUTANT (negate) */                    if(! (p == pend)) FREE_STACK_RETURN (REG_EESCAPE);
8806: /* MUTANT (del_stmt) */ /*                     PATFETCH (c1); */ 
8807: /* MUTANT (rep_op) */                    if (!(c1 != '+' || c1 == '?'))
8807: /* MUTANT (rep_op) */                    if (!(c1 == '-' || c1 == '?'))
8807: /* MUTANT (rep_op) */                    if (!(c1 == '*' || c1 == '?'))
8807: /* MUTANT (rep_op) */                    if (!(c1 == '%' || c1 == '?'))
8807: /* MUTANT (rep_op) */                    if (!(c1 == '+' && c1 == '?'))
8807: /* MUTANT (rep_op) */                    if (!(c1 == '+' || c1 != '?'))
8807: /* MUTANT (negate) */                    if(! (!(c1 == '+' || c1 == '?')))
8809: /* MUTANT (del_stmt) */ /*                         PATUNFETCH; */ 
8810: /* MUTANT (del_stmt) */ /*                         PATUNFETCH; */ 
8811: /* MUTANT (del_stmt) */ /*                         break; */ 
8818: /* MUTANT (del_stmt) */ /*                     PATUNFETCH; */ 
8819: /* MUTANT (del_stmt) */ /*                     break; */ 
8827: /* MUTANT (negate) */            if(! (!laststart))
8832: /* MUTANT (negate) */            if(! (many_times_ok))
8843: /* MUTANT (del_stmt) */ /*                 assert (p - 1 > pattern); */ 
8843: /* MUTANT (rep_op) */                assert (p - 1 <= pattern);
8843: /* MUTANT (rep_op) */                assert (p - 1 < pattern);
8843: /* MUTANT (rep_op) */                assert (p - 1 >= pattern);
8843: /* MUTANT (rep_op) */                assert (p - 1 == pattern);
8843: /* MUTANT (rep_op) */                assert (p - 1 != pattern);
8843: /* MUTANT (rep_const) */                assert (p - 0 > pattern);
8843: /* MUTANT (rep_const) */                assert (p - -1 > pattern);
8843: /* MUTANT (rep_const) */                assert (p - ((1)+1) > pattern);
8846: /* MUTANT (del_stmt) */ /*                 GET_BUFFER_SPACE (3); */ 
8846: /* MUTANT (rep_const) */                GET_BUFFER_SPACE (0);
8846: /* MUTANT (rep_const) */                GET_BUFFER_SPACE (1);
8846: /* MUTANT (rep_const) */                GET_BUFFER_SPACE (-1);
8846: /* MUTANT (rep_const) */                GET_BUFFER_SPACE (((3)+1));
8846: /* MUTANT (rep_const) */                GET_BUFFER_SPACE (((3)-1));
8853: /* MUTANT (rep_op) */                if (TRANSLATE (*(p - 2)) != TRANSLATE ('.')
8853: /* MUTANT (rep_const) */                if (TRANSLATE (*(p - 0)) == TRANSLATE ('.')
8853: /* MUTANT (rep_const) */                if (TRANSLATE (*(p - 1)) == TRANSLATE ('.')
8853: /* MUTANT (rep_const) */                if (TRANSLATE (*(p - -1)) == TRANSLATE ('.')
8853: /* MUTANT (rep_const) */                if (TRANSLATE (*(p - ((2)+1))) == TRANSLATE ('.')
8853: /* MUTANT (rep_const) */                if (TRANSLATE (*(p - ((2)-1))) == TRANSLATE ('.')
8854: /* MUTANT (rep_op) */		    || zero_times_ok
8855: /* MUTANT (rep_op) */                    || p < pend && TRANSLATE (*p) == TRANSLATE ('\n')
8855: /* MUTANT (rep_op) */                    && p <= pend && TRANSLATE (*p) == TRANSLATE ('\n')
8855: /* MUTANT (rep_op) */                    && p > pend && TRANSLATE (*p) == TRANSLATE ('\n')
8855: /* MUTANT (rep_op) */                    && p >= pend && TRANSLATE (*p) == TRANSLATE ('\n')
8855: /* MUTANT (rep_op) */                    && p == pend && TRANSLATE (*p) == TRANSLATE ('\n')
8855: /* MUTANT (rep_op) */                    && p != pend && TRANSLATE (*p) == TRANSLATE ('\n')
8855: /* MUTANT (rep_op) */                    && p < pend || TRANSLATE (*p) == TRANSLATE ('\n')
8855: /* MUTANT (rep_op) */                    && p < pend && TRANSLATE (*p) != TRANSLATE ('\n')
8856: /* MUTANT (rep_op) */                    || !(syntax & RE_DOT_NEWLINE))
8858: /* MUTANT (del_stmt) */ /*                     STORE_JUMP (jump, b, laststart); */ 
8859: /* MUTANT (del_stmt) */ /*                     keep_string_p = true; */ 
8863: /* MUTANT (rep_const) */                  STORE_JUMP (maybe_pop_jump, b, laststart - 0);
8863: /* MUTANT (rep_const) */                  STORE_JUMP (maybe_pop_jump, b, laststart - 1);
8863: /* MUTANT (rep_const) */                  STORE_JUMP (maybe_pop_jump, b, laststart - -1);
8863: /* MUTANT (rep_const) */                  STORE_JUMP (maybe_pop_jump, b, laststart - ((3)+1));
8863: /* MUTANT (rep_const) */                  STORE_JUMP (maybe_pop_jump, b, laststart - ((3)-1));
8866: /* MUTANT (del_stmt) */ /*                 b += 3; */ 
8866: /* MUTANT (rep_op) */                b -= 3;
8866: /* MUTANT (rep_op) */                b *= 3;
8866: /* MUTANT (rep_op) */                b %= 3;
8866: /* MUTANT (rep_const) */                b += 0;
8866: /* MUTANT (rep_const) */                b += 1;
8866: /* MUTANT (rep_const) */                b += -1;
8866: /* MUTANT (rep_const) */                b += ((3)+1);
8866: /* MUTANT (rep_const) */                b += ((3)-1);
8871: /* MUTANT (rep_const) */            GET_BUFFER_SPACE (0);
8871: /* MUTANT (rep_const) */            GET_BUFFER_SPACE (1);
8871: /* MUTANT (rep_const) */            GET_BUFFER_SPACE (-1);
8871: /* MUTANT (rep_const) */            GET_BUFFER_SPACE (((3)+1));
8871: /* MUTANT (rep_const) */            GET_BUFFER_SPACE (((3)-1));
8874: /* MUTANT (rep_op) */                         laststart, b - 3);
8874: /* MUTANT (rep_op) */                         laststart, b * 3);
8874: /* MUTANT (rep_op) */                         laststart, b % 3);
8874: /* MUTANT (rep_const) */                         laststart, b + 0);
8874: /* MUTANT (rep_const) */                         laststart, b + 1);
8874: /* MUTANT (rep_const) */                         laststart, b + -1);
8874: /* MUTANT (rep_const) */                         laststart, b + ((3)+1));
8874: /* MUTANT (rep_const) */                         laststart, b + ((3)-1));
8875: /* MUTANT (del_stmt) */ /*             pending_exact = 0; */ 
8875: /* MUTANT (rep_const) */            pending_exact = 1;
8875: /* MUTANT (rep_const) */            pending_exact = -1;
8876: /* MUTANT (del_stmt) */ /*             b += 3; */ 
8876: /* MUTANT (rep_op) */            b -= 3;
8876: /* MUTANT (rep_op) */            b *= 3;
8876: /* MUTANT (rep_op) */            b %= 3;
8876: /* MUTANT (rep_const) */            b += 0;
8876: /* MUTANT (rep_const) */            b += 1;
8876: /* MUTANT (rep_const) */            b += -1;
8876: /* MUTANT (rep_const) */            b += ((3)+1);
8876: /* MUTANT (rep_const) */            b += ((3)-1);
8878: /* MUTANT (negate) */            if(! (!zero_times_ok))
8885: /* MUTANT (del_stmt) */ /*                 GET_BUFFER_SPACE (3); */ 
8885: /* MUTANT (rep_const) */                GET_BUFFER_SPACE (0);
8885: /* MUTANT (rep_const) */                GET_BUFFER_SPACE (1);
8885: /* MUTANT (rep_const) */                GET_BUFFER_SPACE (-1);
8885: /* MUTANT (rep_const) */                GET_BUFFER_SPACE (((3)+1));
8885: /* MUTANT (rep_const) */                GET_BUFFER_SPACE (((3)-1));
8886: /* MUTANT (del_stmt) */ /*                 INSERT_JUMP (dummy_failure_jump, laststart, laststart + 6); */ 
8886: /* MUTANT (rep_op) */                INSERT_JUMP (dummy_failure_jump, laststart, laststart - 6);
8886: /* MUTANT (rep_op) */                INSERT_JUMP (dummy_failure_jump, laststart, laststart * 6);
8886: /* MUTANT (rep_op) */                INSERT_JUMP (dummy_failure_jump, laststart, laststart % 6);
8886: /* MUTANT (rep_const) */                INSERT_JUMP (dummy_failure_jump, laststart, laststart + 0);
8886: /* MUTANT (rep_const) */                INSERT_JUMP (dummy_failure_jump, laststart, laststart + 1);
8886: /* MUTANT (rep_const) */                INSERT_JUMP (dummy_failure_jump, laststart, laststart + -1);
8886: /* MUTANT (rep_const) */                INSERT_JUMP (dummy_failure_jump, laststart, laststart + ((6)+1));
8886: /* MUTANT (rep_const) */                INSERT_JUMP (dummy_failure_jump, laststart, laststart + ((6)-1));
8887: /* MUTANT (del_stmt) */ /*                 b += 3; */ 
8887: /* MUTANT (rep_op) */                b -= 3;
8887: /* MUTANT (rep_op) */                b *= 3;
8887: /* MUTANT (rep_op) */                b %= 3;
8887: /* MUTANT (rep_const) */                b += 0;
8887: /* MUTANT (rep_const) */                b += 1;
8887: /* MUTANT (rep_const) */                b += -1;
8887: /* MUTANT (rep_const) */                b += ((3)+1);
8887: /* MUTANT (rep_const) */                b += ((3)-1);
8895: /* MUTANT (del_stmt) */ /*           BUF_PUSH (anychar); */ 
8896: /* MUTANT (del_stmt) */ /*           break; */ 
8901: /* MUTANT (del_stmt) */ /*             boolean had_char_class = false; */ 
8903: /* MUTANT (del_stmt) */ /*             if (p == pend) FREE_STACK_RETURN (REG_EBRACK); */ 
8903: /* MUTANT (rep_op) */            if (p != pend) FREE_STACK_RETURN (REG_EBRACK);
8903: /* MUTANT (negate) */            if(! (p == pend)) FREE_STACK_RETURN (REG_EBRACK);
8907: /* MUTANT (del_stmt) */ /* 	    GET_BUFFER_SPACE (34); */ 
8907: /* MUTANT (rep_const) */	    GET_BUFFER_SPACE (0);
8907: /* MUTANT (rep_const) */	    GET_BUFFER_SPACE (1);
8907: /* MUTANT (rep_const) */	    GET_BUFFER_SPACE (-1);
8907: /* MUTANT (rep_const) */	    GET_BUFFER_SPACE (((34)+1));
8907: /* MUTANT (rep_const) */	    GET_BUFFER_SPACE (((34)-1));
8909: /* MUTANT (del_stmt) */ /*             laststart = b; */ 
8913: /* MUTANT (del_stmt) */ /*             BUF_PUSH (*p == '^' ? charset_not : charset); */ 
8913: /* MUTANT (rep_op) */            BUF_PUSH (*p != '^' ? charset_not : charset);
8914: /* MUTANT (rep_op) */            if (*p != '^')
8914: /* MUTANT (negate) */            if(! (*p == '^'))
8915: /* MUTANT (rep_op) */              p--;
8918: /* MUTANT (del_stmt) */ /*             p1 = p; */ 
8921: /* MUTANT (del_stmt) */ /*             BUF_PUSH ((1 << BYTEWIDTH) / BYTEWIDTH); */ 
8921: /* MUTANT (rep_const) */            BUF_PUSH ((0 << BYTEWIDTH) / BYTEWIDTH);
8921: /* MUTANT (rep_const) */            BUF_PUSH ((-1 << BYTEWIDTH) / BYTEWIDTH);
8921: /* MUTANT (rep_const) */            BUF_PUSH ((((1)+1) << BYTEWIDTH) / BYTEWIDTH);
8924: /* MUTANT (del_stmt) */ /*             bzero (b, (1 << BYTEWIDTH) / BYTEWIDTH); */ 
8924: /* MUTANT (rep_const) */            bzero (b, (0 << BYTEWIDTH) / BYTEWIDTH);
8924: /* MUTANT (rep_const) */            bzero (b, (-1 << BYTEWIDTH) / BYTEWIDTH);
8924: /* MUTANT (rep_const) */            bzero (b, (((1)+1) << BYTEWIDTH) / BYTEWIDTH);
8927: /* MUTANT (rep_op) */            if ((re_opcode_t) b[-2] != charset_not
8927: /* MUTANT (rep_const) */            if ((re_opcode_t) b[0] == charset_not
8927: /* MUTANT (rep_const) */            if ((re_opcode_t) b[1] == charset_not
8927: /* MUTANT (rep_const) */            if ((re_opcode_t) b[-1] == charset_not
8927: /* MUTANT (rep_const) */            if ((re_opcode_t) b[((-2)+1)] == charset_not
8927: /* MUTANT (rep_const) */            if ((re_opcode_t) b[((-2)-1)] == charset_not
8928: /* MUTANT (rep_op) */                || (syntax & RE_HAT_LISTS_NOT_NEWLINE))
8934: /* MUTANT (del_stmt) */ /*                 if (p == pend) FREE_STACK_RETURN (REG_EBRACK); */ 
8934: /* MUTANT (rep_op) */                if (p != pend) FREE_STACK_RETURN (REG_EBRACK);
8934: /* MUTANT (negate) */                if(! (p == pend)) FREE_STACK_RETURN (REG_EBRACK);
8936: /* MUTANT (del_stmt) */ /*                 PATFETCH (c); */ 
8939: /* MUTANT (rep_op) */                if ((syntax & RE_BACKSLASH_ESCAPE_IN_LISTS) || c == '\\')
8939: /* MUTANT (rep_op) */                if ((syntax & RE_BACKSLASH_ESCAPE_IN_LISTS) && c != '\\')
8939: /* MUTANT (negate) */                if(! ((syntax & RE_BACKSLASH_ESCAPE_IN_LISTS) && c == '\\'))
8941: /* MUTANT (del_stmt) */ /*                     if (p == pend) FREE_STACK_RETURN (REG_EESCAPE); */ 
8941: /* MUTANT (rep_op) */                    if (p != pend) FREE_STACK_RETURN (REG_EESCAPE);
8941: /* MUTANT (negate) */                    if(! (p == pend)) FREE_STACK_RETURN (REG_EESCAPE);
8943: /* MUTANT (del_stmt) */ /*                     PATFETCH (c1); */ 
8944: /* MUTANT (del_stmt) */ /*                     SET_LIST_BIT (c1); */ 
8945: /* MUTANT (del_stmt) */ /*                     continue; */ 
8951: /* MUTANT (rep_op) */                if (c != ']' && p != p1 + 1)
8951: /* MUTANT (rep_op) */                if (c == ']' || p != p1 + 1)
8951: /* MUTANT (rep_op) */                if (c == ']' && p == p1 + 1)
8951: /* MUTANT (rep_op) */                if (c == ']' && p != p1 - 1)
8951: /* MUTANT (rep_op) */                if (c == ']' && p != p1 * 1)
8951: /* MUTANT (rep_op) */                if (c == ']' && p != p1 % 1)
8951: /* MUTANT (rep_const) */                if (c == ']' && p != p1 + 0)
8951: /* MUTANT (rep_const) */                if (c == ']' && p != p1 + -1)
8951: /* MUTANT (rep_const) */                if (c == ']' && p != p1 + ((1)+1))
8951: /* MUTANT (negate) */                if(! (c == ']' && p != p1 + 1))
8956: /* MUTANT (rep_op) */                if (had_char_class || c == '-' && *p != ']')
8956: /* MUTANT (rep_op) */                if (had_char_class && c != '-' && *p != ']')
8956: /* MUTANT (rep_op) */                if (had_char_class && c == '-' || *p != ']')
8956: /* MUTANT (rep_op) */                if (had_char_class && c == '-' && *p == ']')
8956: /* MUTANT (negate) */                if(! (had_char_class && c == '-' && *p != ']'))
8963: /* MUTANT (rep_op) */                if (c != '-'
8964: /* MUTANT (rep_op) */                    || !(p - 2 >= pattern && p[-2] == '[')
8964: /* MUTANT (rep_op) */                    && !(p - 2 <= pattern && p[-2] == '[')
8964: /* MUTANT (rep_op) */                    && !(p - 2 < pattern && p[-2] == '[')
8964: /* MUTANT (rep_op) */                    && !(p - 2 > pattern && p[-2] == '[')
8964: /* MUTANT (rep_op) */                    && !(p - 2 == pattern && p[-2] == '[')
8964: /* MUTANT (rep_op) */                    && !(p - 2 != pattern && p[-2] == '[')
8964: /* MUTANT (rep_op) */                    && !(p - 2 >= pattern || p[-2] == '[')
8964: /* MUTANT (rep_op) */                    && !(p - 2 >= pattern && p[-2] != '[')
8964: /* MUTANT (rep_const) */                    && !(p - 0 >= pattern && p[-2] == '[')
8964: /* MUTANT (rep_const) */                    && !(p - 1 >= pattern && p[-2] == '[')
8964: /* MUTANT (rep_const) */                    && !(p - -1 >= pattern && p[-2] == '[')
8964: /* MUTANT (rep_const) */                    && !(p - ((2)+1) >= pattern && p[-2] == '[')
8964: /* MUTANT (rep_const) */                    && !(p - ((2)-1) >= pattern && p[-2] == '[')
8964: /* MUTANT (rep_const) */                    && !(p - 2 >= pattern && p[0] == '[')
8964: /* MUTANT (rep_const) */                    && !(p - 2 >= pattern && p[1] == '[')
8964: /* MUTANT (rep_const) */                    && !(p - 2 >= pattern && p[-1] == '[')
8964: /* MUTANT (rep_const) */                    && !(p - 2 >= pattern && p[((-2)+1)] == '[')
8964: /* MUTANT (rep_const) */                    && !(p - 2 >= pattern && p[((-2)-1)] == '[')
8965: /* MUTANT (rep_op) */                    || !(p - 3 >= pattern && p[-3] == '[' && p[-2] == '^')
8965: /* MUTANT (rep_op) */                    && !(p - 3 <= pattern && p[-3] == '[' && p[-2] == '^')
8965: /* MUTANT (rep_op) */                    && !(p - 3 < pattern && p[-3] == '[' && p[-2] == '^')
8965: /* MUTANT (rep_op) */                    && !(p - 3 > pattern && p[-3] == '[' && p[-2] == '^')
8965: /* MUTANT (rep_op) */                    && !(p - 3 == pattern && p[-3] == '[' && p[-2] == '^')
8965: /* MUTANT (rep_op) */                    && !(p - 3 != pattern && p[-3] == '[' && p[-2] == '^')
8965: /* MUTANT (rep_op) */                    && !(p - 3 >= pattern || p[-3] == '[' && p[-2] == '^')
8965: /* MUTANT (rep_op) */                    && !(p - 3 >= pattern && p[-3] != '[' && p[-2] == '^')
8965: /* MUTANT (rep_op) */                    && !(p - 3 >= pattern && p[-3] == '[' || p[-2] == '^')
8965: /* MUTANT (rep_op) */                    && !(p - 3 >= pattern && p[-3] == '[' && p[-2] != '^')
8965: /* MUTANT (rep_const) */                    && !(p - 0 >= pattern && p[-3] == '[' && p[-2] == '^')
8965: /* MUTANT (rep_const) */                    && !(p - 1 >= pattern && p[-3] == '[' && p[-2] == '^')
8965: /* MUTANT (rep_const) */                    && !(p - -1 >= pattern && p[-3] == '[' && p[-2] == '^')
8965: /* MUTANT (rep_const) */                    && !(p - ((3)+1) >= pattern && p[-3] == '[' && p[-2] == '^')
8965: /* MUTANT (rep_const) */                    && !(p - ((3)-1) >= pattern && p[-3] == '[' && p[-2] == '^')
8965: /* MUTANT (rep_const) */                    && !(p - 3 >= pattern && p[0] == '[' && p[-2] == '^')
8965: /* MUTANT (rep_const) */                    && !(p - 3 >= pattern && p[1] == '[' && p[-2] == '^')
8965: /* MUTANT (rep_const) */                    && !(p - 3 >= pattern && p[-1] == '[' && p[-2] == '^')
8965: /* MUTANT (rep_const) */                    && !(p - 3 >= pattern && p[((-3)+1)] == '[' && p[-2] == '^')
8965: /* MUTANT (rep_const) */                    && !(p - 3 >= pattern && p[((-3)-1)] == '[' && p[-2] == '^')
8965: /* MUTANT (rep_const) */                    && !(p - 3 >= pattern && p[-3] == '[' && p[0] == '^')
8965: /* MUTANT (rep_const) */                    && !(p - 3 >= pattern && p[-3] == '[' && p[1] == '^')
8965: /* MUTANT (rep_const) */                    && !(p - 3 >= pattern && p[-3] == '[' && p[-1] == '^')
8965: /* MUTANT (rep_const) */                    && !(p - 3 >= pattern && p[-3] == '[' && p[((-2)+1)] == '^')
8965: /* MUTANT (rep_const) */                    && !(p - 3 >= pattern && p[-3] == '[' && p[((-2)-1)] == '^')
8966: /* MUTANT (rep_op) */                    || *p != ']')
8966: /* MUTANT (rep_op) */                    && *p == ']')
8970: /* MUTANT (del_stmt) */ /*                     if (ret != REG_NOERROR) FREE_STACK_RETURN (ret); */ 
8970: /* MUTANT (rep_op) */                    if (ret == REG_NOERROR) FREE_STACK_RETURN (ret);
8970: /* MUTANT (negate) */                    if(! (ret != REG_NOERROR)) FREE_STACK_RETURN (ret);
8973: /* MUTANT (rep_op) */                else if (p[0] != '-' && p[1] != ']')
8973: /* MUTANT (rep_op) */                else if (p[0] == '-' || p[1] != ']')
8973: /* MUTANT (rep_op) */                else if (p[0] == '-' && p[1] == ']')
8973: /* MUTANT (rep_const) */                else if (p[1] == '-' && p[1] != ']')
8973: /* MUTANT (rep_const) */                else if (p[-1] == '-' && p[1] != ']')
8973: /* MUTANT (rep_const) */                else if (p[0] == '-' && p[0] != ']')
8973: /* MUTANT (rep_const) */                else if (p[0] == '-' && p[-1] != ']')
8973: /* MUTANT (rep_const) */                else if (p[0] == '-' && p[((1)+1)] != ']')
8973: /* MUTANT (negate) */                else if(! (p[0] == '-' && p[1] != ']'))
8975: /* MUTANT (del_stmt) */ /*                     reg_errcode_t ret; */ 
8978: /* MUTANT (del_stmt) */ /*                     PATFETCH (c1); */ 
8980: /* MUTANT (del_stmt) */ /*                     ret = compile_range (&p, pend, translate, syntax, b); */ 
8981: /* MUTANT (del_stmt) */ /*                     if (ret != REG_NOERROR) FREE_STACK_RETURN (ret); */ 
8981: /* MUTANT (rep_op) */                    if (ret == REG_NOERROR) FREE_STACK_RETURN (ret);
8981: /* MUTANT (negate) */                    if(! (ret != REG_NOERROR)) FREE_STACK_RETURN (ret);
8987: /* MUTANT (rep_op) */                else if (syntax & RE_CHAR_CLASSES || c == '[' && *p == ':')
8987: /* MUTANT (rep_op) */                else if (syntax & RE_CHAR_CLASSES && c != '[' && *p == ':')
8987: /* MUTANT (rep_op) */                else if (syntax & RE_CHAR_CLASSES && c == '[' || *p == ':')
8987: /* MUTANT (rep_op) */                else if (syntax & RE_CHAR_CLASSES && c == '[' && *p != ':')
8987: /* MUTANT (negate) */                else if(! (syntax & RE_CHAR_CLASSES && c == '[' && *p == ':'))
8989: /* MUTANT (del_stmt) */ /*                     char str[CHAR_CLASS_MAX_LENGTH + 1]; */ 
8989: /* MUTANT (rep_op) */                    char str[CHAR_CLASS_MAX_LENGTH - 1];
8989: /* MUTANT (rep_op) */                    char str[CHAR_CLASS_MAX_LENGTH * 1];
8989: /* MUTANT (rep_op) */                    char str[CHAR_CLASS_MAX_LENGTH % 1];
8989: /* MUTANT (rep_const) */                    char str[CHAR_CLASS_MAX_LENGTH + 0];
8989: /* MUTANT (rep_const) */                    char str[CHAR_CLASS_MAX_LENGTH + -1];
8989: /* MUTANT (rep_const) */                    char str[CHAR_CLASS_MAX_LENGTH + ((1)+1)];
8991: /* MUTANT (del_stmt) */ /*                     PATFETCH (c); */ 
8992: /* MUTANT (del_stmt) */ /*                     c1 = 0; */ 
8992: /* MUTANT (rep_const) */                    c1 = 1;
8992: /* MUTANT (rep_const) */                    c1 = -1;
8995: /* MUTANT (del_stmt) */ /*                     if (p == pend) FREE_STACK_RETURN (REG_EBRACK); */ 
8995: /* MUTANT (rep_op) */                    if (p != pend) FREE_STACK_RETURN (REG_EBRACK);
8995: /* MUTANT (negate) */                    if(! (p == pend)) FREE_STACK_RETURN (REG_EBRACK);
8999: /* MUTANT (del_stmt) */ /*                         PATFETCH (c); */ 
9000: /* MUTANT (rep_op) */                        if ((c != ':' && *p == ']') || p == pend
9000: /* MUTANT (rep_op) */                        if ((c == ':' || *p == ']') || p == pend
9000: /* MUTANT (rep_op) */                        if ((c == ':' && *p != ']') || p == pend
9000: /* MUTANT (rep_op) */                        if ((c == ':' && *p == ']') && p == pend
9000: /* MUTANT (rep_op) */                        if ((c == ':' && *p == ']') || p != pend
9001: /* MUTANT (rep_op) */                            && c1 == CHAR_CLASS_MAX_LENGTH)
9001: /* MUTANT (rep_op) */                            || c1 != CHAR_CLASS_MAX_LENGTH)
9003: /* MUTANT (del_stmt) */ /*                         str[c1++] = c; */ 
9003: /* MUTANT (rep_op) */                        str[c1--] = c;
9005: /* MUTANT (rep_const) */                    str[c1] = '\1';
9005: /* MUTANT (rep_const) */                    str[c1] = '\-1';
9010: /* MUTANT (rep_op) */                    if (c != ':' && *p == ']')
9010: /* MUTANT (rep_op) */                    if (c == ':' || *p == ']')
9010: /* MUTANT (rep_op) */                    if (c == ':' && *p != ']')
9010: /* MUTANT (negate) */                    if(! (c == ':' && *p == ']'))
9014: /* MUTANT (del_stmt) */ /*                         boolean is_upper = STREQ (str, "upper"); */ 
9015: /* MUTANT (del_stmt) */ /* 			wctype_t wt; */ 
9016: /* MUTANT (del_stmt) */ /*                         int ch; */ 
9018: /* MUTANT (del_stmt) */ /* 			wt = wctype (str); */ 
9019: /* MUTANT (rep_op) */			if (wt != 0)
9019: /* MUTANT (rep_const) */			if (wt == 1)
9019: /* MUTANT (rep_const) */			if (wt == -1)
9019: /* MUTANT (negate) */			if(! (wt == 0))
9024: /* MUTANT (del_stmt) */ /*                         PATFETCH (c); */ 
9026: /* MUTANT (del_stmt) */ /*                         if (p == pend) FREE_STACK_RETURN (REG_EBRACK); */ 
9026: /* MUTANT (rep_op) */                        if (p != pend) FREE_STACK_RETURN (REG_EBRACK);
9026: /* MUTANT (negate) */                        if(! (p == pend)) FREE_STACK_RETURN (REG_EBRACK);
9028: /* MUTANT (rep_op) */                        for (ch = 0; ch <= 1 << BYTEWIDTH; ++ch)
9028: /* MUTANT (rep_op) */                        for (ch = 0; ch > 1 << BYTEWIDTH; ++ch)
9028: /* MUTANT (rep_op) */                        for (ch = 0; ch >= 1 << BYTEWIDTH; ++ch)
9028: /* MUTANT (rep_op) */                        for (ch = 0; ch == 1 << BYTEWIDTH; ++ch)
9028: /* MUTANT (rep_op) */                        for (ch = 0; ch != 1 << BYTEWIDTH; ++ch)
9028: /* MUTANT (rep_op) */                        for (ch = 0; ch < 1 << BYTEWIDTH; --ch)
9028: /* MUTANT (rep_const) */                        for (ch = 1; ch < 1 << BYTEWIDTH; ++ch)
9028: /* MUTANT (rep_const) */                        for (ch = -1; ch < 1 << BYTEWIDTH; ++ch)
9028: /* MUTANT (rep_const) */                        for (ch = 0; ch < 0 << BYTEWIDTH; ++ch)
9028: /* MUTANT (rep_const) */                        for (ch = 0; ch < -1 << BYTEWIDTH; ++ch)
9028: /* MUTANT (rep_const) */                        for (ch = 0; ch < ((1)+1) << BYTEWIDTH; ++ch)
9030: /* MUTANT (negate) */			    if(! (iswctype (btowc (ch), wt)))
9033: /* MUTANT (rep_op) */			    if (translate || (is_upper || is_lower)
9033: /* MUTANT (rep_op) */			    if (translate && (is_upper && is_lower)
9034: /* MUTANT (rep_op) */				|| (ISUPPER (ch) || ISLOWER (ch)))
9034: /* MUTANT (rep_op) */				&& (ISUPPER (ch) && ISLOWER (ch)))
9041: /* MUTANT (del_stmt) */ /*                         boolean is_alnum = STREQ (str, "alnum"); */ 
9042: /* MUTANT (del_stmt) */ /*                         boolean is_alpha = STREQ (str, "alpha"); */ 
9043: /* MUTANT (del_stmt) */ /*                         boolean is_blank = STREQ (str, "blank"); */ 
9044: /* MUTANT (del_stmt) */ /*                         boolean is_cntrl = STREQ (str, "cntrl"); */ 
9045: /* MUTANT (del_stmt) */ /*                         boolean is_digit = STREQ (str, "digit"); */ 
9046: /* MUTANT (del_stmt) */ /*                         boolean is_graph = STREQ (str, "graph"); */ 
9047: /* MUTANT (del_stmt) */ /*                         boolean is_lower = STREQ (str, "lower"); */ 
9048: /* MUTANT (del_stmt) */ /*                         boolean is_print = STREQ (str, "print"); */ 
9049: /* MUTANT (del_stmt) */ /*                         boolean is_punct = STREQ (str, "punct"); */ 
9050: /* MUTANT (del_stmt) */ /*                         boolean is_space = STREQ (str, "space"); */ 
9051: /* MUTANT (del_stmt) */ /*                         boolean is_upper = STREQ (str, "upper"); */ 
9052: /* MUTANT (del_stmt) */ /*                         boolean is_xdigit = STREQ (str, "xdigit"); */ 
9054: /* MUTANT (negate) */                        if(! (!IS_CHAR_CLASS (str)))
9059: /* MUTANT (del_stmt) */ /*                         PATFETCH (c); */ 
9061: /* MUTANT (del_stmt) */ /*                         if (p == pend) FREE_STACK_RETURN (REG_EBRACK); */ 
9061: /* MUTANT (rep_op) */                        if (p != pend) FREE_STACK_RETURN (REG_EBRACK);
9061: /* MUTANT (negate) */                        if(! (p == pend)) FREE_STACK_RETURN (REG_EBRACK);
9063: /* MUTANT (rep_op) */                        for (ch = 0; ch <= 1 << BYTEWIDTH; ch++)
9063: /* MUTANT (rep_op) */                        for (ch = 0; ch > 1 << BYTEWIDTH; ch++)
9063: /* MUTANT (rep_op) */                        for (ch = 0; ch >= 1 << BYTEWIDTH; ch++)
9063: /* MUTANT (rep_op) */                        for (ch = 0; ch == 1 << BYTEWIDTH; ch++)
9063: /* MUTANT (rep_op) */                        for (ch = 0; ch != 1 << BYTEWIDTH; ch++)
9063: /* MUTANT (rep_op) */                        for (ch = 0; ch < 1 << BYTEWIDTH; ch--)
9063: /* MUTANT (rep_const) */                        for (ch = 1; ch < 1 << BYTEWIDTH; ch++)
9063: /* MUTANT (rep_const) */                        for (ch = -1; ch < 1 << BYTEWIDTH; ch++)
9063: /* MUTANT (rep_const) */                        for (ch = 0; ch < 0 << BYTEWIDTH; ch++)
9063: /* MUTANT (rep_const) */                        for (ch = 0; ch < -1 << BYTEWIDTH; ch++)
9063: /* MUTANT (rep_const) */                        for (ch = 0; ch < ((1)+1) << BYTEWIDTH; ch++)
9067: /* MUTANT (rep_op) */                            if (   (is_alnum  || ISALNUM (ch))
9068: /* MUTANT (rep_op) */                                && (is_alpha  && ISALPHA (ch))
9068: /* MUTANT (rep_op) */                                || (is_alpha  || ISALPHA (ch))
9069: /* MUTANT (rep_op) */                                && (is_blank  && ISBLANK (ch))
9069: /* MUTANT (rep_op) */                                || (is_blank  || ISBLANK (ch))
9070: /* MUTANT (rep_op) */                                && (is_cntrl  && ISCNTRL (ch)))
9070: /* MUTANT (rep_op) */                                || (is_cntrl  || ISCNTRL (ch)))
9072: /* MUTANT (rep_op) */			    if (   (is_digit  || ISDIGIT (ch))
9073: /* MUTANT (rep_op) */                                && (is_graph  && ISGRAPH (ch))
9073: /* MUTANT (rep_op) */                                || (is_graph  || ISGRAPH (ch))
9074: /* MUTANT (rep_op) */                                && (is_lower  && ISLOWER (ch))
9074: /* MUTANT (rep_op) */                                || (is_lower  || ISLOWER (ch))
9075: /* MUTANT (rep_op) */                                && (is_print  && ISPRINT (ch)))
9075: /* MUTANT (rep_op) */                                || (is_print  || ISPRINT (ch)))
9077: /* MUTANT (rep_op) */			    if (   (is_punct  || ISPUNCT (ch))
9078: /* MUTANT (rep_op) */                                && (is_space  && ISSPACE (ch))
9078: /* MUTANT (rep_op) */                                || (is_space  || ISSPACE (ch))
9079: /* MUTANT (rep_op) */                                && (is_upper  && ISUPPER (ch))
9079: /* MUTANT (rep_op) */                                || (is_upper  || ISUPPER (ch))
9080: /* MUTANT (rep_op) */                                && (is_xdigit && ISXDIGIT (ch)))
9080: /* MUTANT (rep_op) */                                || (is_xdigit || ISXDIGIT (ch)))
9082: /* MUTANT (rep_op) */			    if (   translate || (is_upper || is_lower)
9082: /* MUTANT (rep_op) */			    if (   translate && (is_upper && is_lower)
9083: /* MUTANT (rep_op) */				|| (ISUPPER (ch) || ISLOWER (ch)))
9083: /* MUTANT (rep_op) */				&& (ISUPPER (ch) && ISLOWER (ch)))
9091: /* MUTANT (del_stmt) */ /*                         c1++; */ 
9091: /* MUTANT (rep_op) */                        c1--;
9092: /* MUTANT (rep_op) */                        while (c1++)
9092: /* MUTANT (negate) */                        while(! (c1--))
9094: /* MUTANT (del_stmt) */ /*                         SET_LIST_BIT ('['); */ 
9095: /* MUTANT (del_stmt) */ /*                         SET_LIST_BIT (':'); */ 
9096: /* MUTANT (del_stmt) */ /*                         had_char_class = false; */ 
9101: /* MUTANT (del_stmt) */ /*                     had_char_class = false; */ 
9102: /* MUTANT (del_stmt) */ /*                     SET_LIST_BIT (c); */ 
9108: /* MUTANT (rep_op) */            while ((int) b[-1] <= 0 && b[b[-1] - 1] == 0)
9108: /* MUTANT (rep_op) */            while ((int) b[-1] < 0 && b[b[-1] - 1] == 0)
9108: /* MUTANT (rep_op) */            while ((int) b[-1] >= 0 && b[b[-1] - 1] == 0)
9108: /* MUTANT (rep_op) */            while ((int) b[-1] == 0 && b[b[-1] - 1] == 0)
9108: /* MUTANT (rep_op) */            while ((int) b[-1] != 0 && b[b[-1] - 1] == 0)
9108: /* MUTANT (rep_op) */            while ((int) b[-1] > 0 || b[b[-1] - 1] == 0)
9108: /* MUTANT (rep_op) */            while ((int) b[-1] > 0 && b[b[-1] - 1] != 0)
9108: /* MUTANT (rep_const) */            while ((int) b[0] > 0 && b[b[-1] - 1] == 0)
9108: /* MUTANT (rep_const) */            while ((int) b[1] > 0 && b[b[-1] - 1] == 0)
9108: /* MUTANT (rep_const) */            while ((int) b[((-1)+1)] > 0 && b[b[-1] - 1] == 0)
9108: /* MUTANT (rep_const) */            while ((int) b[((-1)-1)] > 0 && b[b[-1] - 1] == 0)
9108: /* MUTANT (rep_const) */            while ((int) b[-1] > 1 && b[b[-1] - 1] == 0)
9108: /* MUTANT (rep_const) */            while ((int) b[-1] > -1 && b[b[-1] - 1] == 0)
9108: /* MUTANT (rep_const) */            while ((int) b[-1] > 0 && b[b[0] - 1] == 0)
9108: /* MUTANT (rep_const) */            while ((int) b[-1] > 0 && b[b[1] - 1] == 0)
9108: /* MUTANT (rep_const) */            while ((int) b[-1] > 0 && b[b[((-1)+1)] - 1] == 0)
9108: /* MUTANT (rep_const) */            while ((int) b[-1] > 0 && b[b[((-1)-1)] - 1] == 0)
9108: /* MUTANT (rep_const) */            while ((int) b[-1] > 0 && b[b[-1] - 0] == 0)
9108: /* MUTANT (rep_const) */            while ((int) b[-1] > 0 && b[b[-1] - -1] == 0)
9108: /* MUTANT (rep_const) */            while ((int) b[-1] > 0 && b[b[-1] - ((1)+1)] == 0)
9108: /* MUTANT (rep_const) */            while ((int) b[-1] > 0 && b[b[-1] - 1] == 1)
9108: /* MUTANT (rep_const) */            while ((int) b[-1] > 0 && b[b[-1] - 1] == -1)
9108: /* MUTANT (negate) */            while(! ((int) b[-1] > 0 && b[b[-1] - 1] == 0))
9109: /* MUTANT (rep_op) */              b[-1]++;
9109: /* MUTANT (rep_const) */              b[0]--;
9109: /* MUTANT (rep_const) */              b[1]--;
9109: /* MUTANT (rep_const) */              b[((-1)+1)]--;
9109: /* MUTANT (rep_const) */              b[((-1)-1)]--;
9110: /* MUTANT (del_stmt) */ /*             b += b[-1]; */ 
9110: /* MUTANT (rep_op) */            b -= b[-1];
9110: /* MUTANT (rep_op) */            b *= b[-1];
9110: /* MUTANT (rep_op) */            b %= b[-1];
9110: /* MUTANT (rep_const) */            b += b[0];
9110: /* MUTANT (rep_const) */            b += b[1];
9110: /* MUTANT (rep_const) */            b += b[((-1)+1)];
9110: /* MUTANT (rep_const) */            b += b[((-1)-1)];
9116: /* MUTANT (negate) */          if(! (syntax & RE_NO_BK_PARENS))
9123: /* MUTANT (negate) */          if(! (syntax & RE_NO_BK_PARENS))
9130: /* MUTANT (negate) */          if(! (syntax & RE_NEWLINE_ALT))
9136: /* MUTANT (rep_op) */	case '&':
9137: /* MUTANT (negate) */          if(! (syntax & RE_NO_BK_VBAR))
9144: /* MUTANT (rep_op) */           if (syntax & RE_INTERVALS || syntax & RE_NO_BK_BRACES)
9144: /* MUTANT (negate) */           if(! (syntax & RE_INTERVALS && syntax & RE_NO_BK_BRACES))
9151: /* MUTANT (rep_op) */          if (p != pend) FREE_STACK_RETURN (REG_EESCAPE);
9151: /* MUTANT (negate) */          if(! (p == pend)) FREE_STACK_RETURN (REG_EESCAPE);
9156: /* MUTANT (del_stmt) */ /*           PATFETCH_RAW (c); */ 
9161: /* MUTANT (negate) */              if(! (syntax & RE_NO_BK_PARENS))
9165: /* MUTANT (rep_op) */              bufp->re_nsub--;
9166: /* MUTANT (del_stmt) */ /*               regnum++; */ 
9166: /* MUTANT (rep_op) */              regnum--;
9168: /* MUTANT (negate) */              if(! (COMPILE_STACK_FULL))
9170: /* MUTANT (rep_const) */                  RETALLOC (compile_stack.stack, compile_stack.size << 0,
9170: /* MUTANT (rep_const) */                  RETALLOC (compile_stack.stack, compile_stack.size << -1,
9170: /* MUTANT (rep_const) */                  RETALLOC (compile_stack.stack, compile_stack.size << ((1)+1),
9172: /* MUTANT (del_stmt) */ /*                   if (compile_stack.stack == NULL) return REG_ESPACE; */ 
9172: /* MUTANT (rep_op) */                  if (compile_stack.stack != NULL) return REG_ESPACE;
9172: /* MUTANT (negate) */                  if(! (compile_stack.stack == NULL)) return REG_ESPACE;
9174: /* MUTANT (del_stmt) */ /*                   compile_stack.size <<= 1; */ 
9174: /* MUTANT (rep_const) */                  compile_stack.size <<= 0;
9174: /* MUTANT (rep_const) */                  compile_stack.size <<= -1;
9174: /* MUTANT (rep_const) */                  compile_stack.size <<= ((1)+1);
9183: /* MUTANT (rep_op) */                = fixup_alt_jump ? fixup_alt_jump - bufp->buffer - 1 : 0;
9183: /* MUTANT (rep_op) */                = fixup_alt_jump ? fixup_alt_jump - bufp->buffer * 1 : 0;
9183: /* MUTANT (rep_op) */                = fixup_alt_jump ? fixup_alt_jump - bufp->buffer % 1 : 0;
9183: /* MUTANT (rep_const) */                = fixup_alt_jump ? fixup_alt_jump - bufp->buffer + 0 : 0;
9183: /* MUTANT (rep_const) */                = fixup_alt_jump ? fixup_alt_jump - bufp->buffer + -1 : 0;
9183: /* MUTANT (rep_const) */                = fixup_alt_jump ? fixup_alt_jump - bufp->buffer + ((1)+1) : 0;
9183: /* MUTANT (rep_const) */                = fixup_alt_jump ? fixup_alt_jump - bufp->buffer + 1 : 1;
9183: /* MUTANT (rep_const) */                = fixup_alt_jump ? fixup_alt_jump - bufp->buffer + 1 : -1;
9184: /* MUTANT (del_stmt) */ /*               COMPILE_STACK_TOP.laststart_offset = b - bufp->buffer; */ 
9185: /* MUTANT (del_stmt) */ /*               COMPILE_STACK_TOP.regnum = regnum; */ 
9191: /* MUTANT (rep_op) */              if (regnum < MAX_REGNUM)
9191: /* MUTANT (rep_op) */              if (regnum > MAX_REGNUM)
9191: /* MUTANT (rep_op) */              if (regnum >= MAX_REGNUM)
9191: /* MUTANT (rep_op) */              if (regnum == MAX_REGNUM)
9191: /* MUTANT (rep_op) */              if (regnum != MAX_REGNUM)
9191: /* MUTANT (negate) */              if(! (regnum <= MAX_REGNUM))
9193: /* MUTANT (del_stmt) */ /*                   COMPILE_STACK_TOP.inner_group_offset = b - bufp->buffer + 2; */ 
9193: /* MUTANT (rep_op) */                  COMPILE_STACK_TOP.inner_group_offset = b - bufp->buffer - 2;
9193: /* MUTANT (rep_op) */                  COMPILE_STACK_TOP.inner_group_offset = b - bufp->buffer * 2;
9193: /* MUTANT (rep_op) */                  COMPILE_STACK_TOP.inner_group_offset = b - bufp->buffer % 2;
9193: /* MUTANT (rep_const) */                  COMPILE_STACK_TOP.inner_group_offset = b - bufp->buffer + 0;
9193: /* MUTANT (rep_const) */                  COMPILE_STACK_TOP.inner_group_offset = b - bufp->buffer + 1;
9193: /* MUTANT (rep_const) */                  COMPILE_STACK_TOP.inner_group_offset = b - bufp->buffer + -1;
9193: /* MUTANT (rep_const) */                  COMPILE_STACK_TOP.inner_group_offset = b - bufp->buffer + ((2)+1);
9193: /* MUTANT (rep_const) */                  COMPILE_STACK_TOP.inner_group_offset = b - bufp->buffer + ((2)-1);
9194: /* MUTANT (del_stmt) */ /*                   BUF_PUSH_3 (start_memory, regnum, 0); */ 
9194: /* MUTANT (rep_const) */                  BUF_PUSH_3 (start_memory, regnum, 1);
9194: /* MUTANT (rep_const) */                  BUF_PUSH_3 (start_memory, regnum, -1);
9197: /* MUTANT (rep_op) */              compile_stack.avail--;
9199: /* MUTANT (del_stmt) */ /*               fixup_alt_jump = 0; */ 
9199: /* MUTANT (rep_const) */              fixup_alt_jump = 1;
9199: /* MUTANT (rep_const) */              fixup_alt_jump = -1;
9200: /* MUTANT (del_stmt) */ /*               laststart = 0; */ 
9200: /* MUTANT (rep_const) */              laststart = 1;
9200: /* MUTANT (rep_const) */              laststart = -1;
9201: /* MUTANT (del_stmt) */ /*               begalt = b; */ 
9205: /* MUTANT (del_stmt) */ /* 	      pending_exact = 0; */ 
9205: /* MUTANT (rep_const) */	      pending_exact = 1;
9205: /* MUTANT (rep_const) */	      pending_exact = -1;
9206: /* MUTANT (del_stmt) */ /*               break; */ 
9210: /* MUTANT (negate) */              if(! (syntax & RE_NO_BK_PARENS)) goto normal_backslash;
9212: /* MUTANT (negate) */              if(! (COMPILE_STACK_EMPTY))
9213: /* MUTANT (negate) */                if(! (syntax & RE_UNMATCHED_RIGHT_PAREN_ORD))
9219: /* MUTANT (negate) */              if(! (fixup_alt_jump))
9224: /* MUTANT (del_stmt) */ /*                   BUF_PUSH (push_dummy_failure); */ 
9228: /* MUTANT (del_stmt) */ /*                   STORE_JUMP (jump_past_alt, fixup_alt_jump, b - 1); */ 
9228: /* MUTANT (rep_const) */                  STORE_JUMP (jump_past_alt, fixup_alt_jump, b - 0);
9228: /* MUTANT (rep_const) */                  STORE_JUMP (jump_past_alt, fixup_alt_jump, b - -1);
9228: /* MUTANT (rep_const) */                  STORE_JUMP (jump_past_alt, fixup_alt_jump, b - ((1)+1));
9232: /* MUTANT (negate) */              if(! (COMPILE_STACK_EMPTY))
9233: /* MUTANT (negate) */                if(! (syntax & RE_UNMATCHED_RIGHT_PAREN_ORD))
9240: /* MUTANT (del_stmt) */ /*               assert (compile_stack.avail != 0); */ 
9240: /* MUTANT (rep_op) */              assert (compile_stack.avail == 0);
9240: /* MUTANT (rep_const) */              assert (compile_stack.avail != 1);
9240: /* MUTANT (rep_const) */              assert (compile_stack.avail != -1);
9245: /* MUTANT (del_stmt) */ /*                 regnum_t this_group_regnum; */ 
9247: /* MUTANT (del_stmt) */ /*                 compile_stack.avail--; */ 
9247: /* MUTANT (rep_op) */                compile_stack.avail++;
9248: /* MUTANT (del_stmt) */ /*                 begalt = bufp->buffer + COMPILE_STACK_TOP.begalt_offset; */ 
9248: /* MUTANT (rep_op) */                begalt = bufp->buffer - COMPILE_STACK_TOP.begalt_offset;
9248: /* MUTANT (rep_op) */                begalt = bufp->buffer * COMPILE_STACK_TOP.begalt_offset;
9248: /* MUTANT (rep_op) */                begalt = bufp->buffer % COMPILE_STACK_TOP.begalt_offset;
9251: /* MUTANT (rep_op) */                    ? bufp->buffer - COMPILE_STACK_TOP.fixup_alt_jump - 1
9251: /* MUTANT (rep_op) */                    ? bufp->buffer * COMPILE_STACK_TOP.fixup_alt_jump - 1
9251: /* MUTANT (rep_op) */                    ? bufp->buffer % COMPILE_STACK_TOP.fixup_alt_jump - 1
9251: /* MUTANT (rep_const) */                    ? bufp->buffer + COMPILE_STACK_TOP.fixup_alt_jump - 0
9251: /* MUTANT (rep_const) */                    ? bufp->buffer + COMPILE_STACK_TOP.fixup_alt_jump - -1
9251: /* MUTANT (rep_const) */                    ? bufp->buffer + COMPILE_STACK_TOP.fixup_alt_jump - ((1)+1)
9252: /* MUTANT (rep_const) */                    : 1;
9252: /* MUTANT (rep_const) */                    : -1;
9253: /* MUTANT (del_stmt) */ /*                 laststart = bufp->buffer + COMPILE_STACK_TOP.laststart_offset; */ 
9253: /* MUTANT (rep_op) */                laststart = bufp->buffer - COMPILE_STACK_TOP.laststart_offset;
9253: /* MUTANT (rep_op) */                laststart = bufp->buffer * COMPILE_STACK_TOP.laststart_offset;
9253: /* MUTANT (rep_op) */                laststart = bufp->buffer % COMPILE_STACK_TOP.laststart_offset;
9254: /* MUTANT (del_stmt) */ /*                 this_group_regnum = COMPILE_STACK_TOP.regnum; */ 
9258: /* MUTANT (del_stmt) */ /* 		pending_exact = 0; */ 
9258: /* MUTANT (rep_const) */		pending_exact = 1;
9258: /* MUTANT (rep_const) */		pending_exact = -1;
9262: /* MUTANT (rep_op) */                if (this_group_regnum < MAX_REGNUM)
9262: /* MUTANT (rep_op) */                if (this_group_regnum > MAX_REGNUM)
9262: /* MUTANT (rep_op) */                if (this_group_regnum >= MAX_REGNUM)
9262: /* MUTANT (rep_op) */                if (this_group_regnum == MAX_REGNUM)
9262: /* MUTANT (rep_op) */                if (this_group_regnum != MAX_REGNUM)
9262: /* MUTANT (negate) */                if(! (this_group_regnum <= MAX_REGNUM))
9265: /* MUTANT (rep_op) */                      = bufp->buffer - COMPILE_STACK_TOP.inner_group_offset;
9265: /* MUTANT (rep_op) */                      = bufp->buffer * COMPILE_STACK_TOP.inner_group_offset;
9265: /* MUTANT (rep_op) */                      = bufp->buffer % COMPILE_STACK_TOP.inner_group_offset;
9267: /* MUTANT (del_stmt) */ /*                     *inner_group_loc = regnum - this_group_regnum; */ 
9275: /* MUTANT (rep_op) */            case '&':					/* `\|'.  */
9276: /* MUTANT (rep_op) */              if (syntax & RE_LIMITED_OPS && syntax & RE_NO_BK_VBAR)
9276: /* MUTANT (negate) */              if(! (syntax & RE_LIMITED_OPS || syntax & RE_NO_BK_VBAR))
9279: /* MUTANT (negate) */              if(! (syntax & RE_LIMITED_OPS))
9284: /* MUTANT (del_stmt) */ /*               GET_BUFFER_SPACE (3); */ 
9284: /* MUTANT (rep_const) */              GET_BUFFER_SPACE (0);
9284: /* MUTANT (rep_const) */              GET_BUFFER_SPACE (1);
9284: /* MUTANT (rep_const) */              GET_BUFFER_SPACE (-1);
9284: /* MUTANT (rep_const) */              GET_BUFFER_SPACE (((3)+1));
9284: /* MUTANT (rep_const) */              GET_BUFFER_SPACE (((3)-1));
9285: /* MUTANT (del_stmt) */ /*               INSERT_JUMP (on_failure_jump, begalt, b + 6); */ 
9285: /* MUTANT (rep_op) */              INSERT_JUMP (on_failure_jump, begalt, b - 6);
9285: /* MUTANT (rep_op) */              INSERT_JUMP (on_failure_jump, begalt, b * 6);
9285: /* MUTANT (rep_op) */              INSERT_JUMP (on_failure_jump, begalt, b % 6);
9285: /* MUTANT (rep_const) */              INSERT_JUMP (on_failure_jump, begalt, b + 0);
9285: /* MUTANT (rep_const) */              INSERT_JUMP (on_failure_jump, begalt, b + 1);
9285: /* MUTANT (rep_const) */              INSERT_JUMP (on_failure_jump, begalt, b + -1);
9285: /* MUTANT (rep_const) */              INSERT_JUMP (on_failure_jump, begalt, b + ((6)+1));
9285: /* MUTANT (rep_const) */              INSERT_JUMP (on_failure_jump, begalt, b + ((6)-1));
9286: /* MUTANT (del_stmt) */ /*               pending_exact = 0; */ 
9286: /* MUTANT (rep_const) */              pending_exact = 1;
9286: /* MUTANT (rep_const) */              pending_exact = -1;
9287: /* MUTANT (del_stmt) */ /*               b += 3; */ 
9287: /* MUTANT (rep_op) */              b -= 3;
9287: /* MUTANT (rep_op) */              b *= 3;
9287: /* MUTANT (rep_op) */              b %= 3;
9287: /* MUTANT (rep_const) */              b += 0;
9287: /* MUTANT (rep_const) */              b += 1;
9287: /* MUTANT (rep_const) */              b += -1;
9287: /* MUTANT (rep_const) */              b += ((3)+1);
9287: /* MUTANT (rep_const) */              b += ((3)-1);
9305: /* MUTANT (negate) */              if(! (fixup_alt_jump))
9311: /* MUTANT (del_stmt) */ /*               fixup_alt_jump = b; */ 
9312: /* MUTANT (del_stmt) */ /*               GET_BUFFER_SPACE (3); */ 
9312: /* MUTANT (rep_const) */              GET_BUFFER_SPACE (0);
9312: /* MUTANT (rep_const) */              GET_BUFFER_SPACE (1);
9312: /* MUTANT (rep_const) */              GET_BUFFER_SPACE (-1);
9312: /* MUTANT (rep_const) */              GET_BUFFER_SPACE (((3)+1));
9312: /* MUTANT (rep_const) */              GET_BUFFER_SPACE (((3)-1));
9313: /* MUTANT (del_stmt) */ /*               b += 3; */ 
9313: /* MUTANT (rep_op) */              b -= 3;
9313: /* MUTANT (rep_op) */              b *= 3;
9313: /* MUTANT (rep_op) */              b %= 3;
9313: /* MUTANT (rep_const) */              b += 0;
9313: /* MUTANT (rep_const) */              b += 1;
9313: /* MUTANT (rep_const) */              b += -1;
9313: /* MUTANT (rep_const) */              b += ((3)+1);
9313: /* MUTANT (rep_const) */              b += ((3)-1);
9315: /* MUTANT (del_stmt) */ /*               laststart = 0; */ 
9315: /* MUTANT (rep_const) */              laststart = 1;
9315: /* MUTANT (rep_const) */              laststart = -1;
9316: /* MUTANT (del_stmt) */ /*               begalt = b; */ 
9317: /* MUTANT (del_stmt) */ /*               break; */ 
9325: /* MUTANT (rep_op) */                  && ((syntax & RE_INTERVALS) && (syntax & RE_NO_BK_BRACES))
9325: /* MUTANT (rep_op) */                  || ((syntax & RE_INTERVALS) || (syntax & RE_NO_BK_BRACES))
9326: /* MUTANT (rep_op) */                  && (p - 2 == pattern  &&  p == pend))
9326: /* MUTANT (rep_op) */                  || (p - 2 != pattern  &&  p == pend))
9326: /* MUTANT (rep_op) */                  || (p - 2 == pattern  ||  p == pend))
9326: /* MUTANT (rep_op) */                  || (p - 2 == pattern  &&  p != pend))
9326: /* MUTANT (rep_const) */                  || (p - 0 == pattern  &&  p == pend))
9326: /* MUTANT (rep_const) */                  || (p - 1 == pattern  &&  p == pend))
9326: /* MUTANT (rep_const) */                  || (p - -1 == pattern  &&  p == pend))
9326: /* MUTANT (rep_const) */                  || (p - ((2)+1) == pattern  &&  p == pend))
9326: /* MUTANT (rep_const) */                  || (p - ((2)-1) == pattern  &&  p == pend))
9334: /* MUTANT (del_stmt) */ /*                 int lower_bound = -1, upper_bound = -1; */ 
9334: /* MUTANT (rep_const) */                int lower_bound = 0, upper_bound = -1;
9334: /* MUTANT (rep_const) */                int lower_bound = 1, upper_bound = -1;
9334: /* MUTANT (rep_const) */                int lower_bound = ((-1)+1), upper_bound = -1;
9334: /* MUTANT (rep_const) */                int lower_bound = ((-1)-1), upper_bound = -1;
9334: /* MUTANT (rep_const) */                int lower_bound = -1, upper_bound = 0;
9334: /* MUTANT (rep_const) */                int lower_bound = -1, upper_bound = 1;
9334: /* MUTANT (rep_const) */                int lower_bound = -1, upper_bound = ((-1)+1);
9334: /* MUTANT (rep_const) */                int lower_bound = -1, upper_bound = ((-1)-1);
9336: /* MUTANT (del_stmt) */ /*                 beg_interval = p - 1; */ 
9336: /* MUTANT (rep_const) */                beg_interval = p - 0;
9336: /* MUTANT (rep_const) */                beg_interval = p - -1;
9336: /* MUTANT (rep_const) */                beg_interval = p - ((1)+1);
9338: /* MUTANT (rep_op) */                if (p != pend)
9338: /* MUTANT (negate) */                if(! (p == pend))
9340: /* MUTANT (negate) */                    if(! (syntax & RE_NO_BK_BRACES))
9348: /* MUTANT (rep_op) */                if (c != ',')
9348: /* MUTANT (negate) */                if(! (c == ','))
9350: /* MUTANT (del_stmt) */ /*                     GET_UNSIGNED_NUMBER (upper_bound); */ 
9351: /* MUTANT (del_stmt) */ /*                     if (upper_bound < 0) upper_bound = RE_DUP_MAX; */ 
9351: /* MUTANT (rep_op) */                    if (upper_bound <= 0) upper_bound = RE_DUP_MAX;
9351: /* MUTANT (rep_op) */                    if (upper_bound > 0) upper_bound = RE_DUP_MAX;
9351: /* MUTANT (rep_op) */                    if (upper_bound >= 0) upper_bound = RE_DUP_MAX;
9351: /* MUTANT (rep_op) */                    if (upper_bound == 0) upper_bound = RE_DUP_MAX;
9351: /* MUTANT (rep_op) */                    if (upper_bound != 0) upper_bound = RE_DUP_MAX;
9351: /* MUTANT (rep_const) */                    if (upper_bound < 1) upper_bound = RE_DUP_MAX;
9351: /* MUTANT (rep_const) */                    if (upper_bound < -1) upper_bound = RE_DUP_MAX;
9351: /* MUTANT (negate) */                    if(! (upper_bound < 0)) upper_bound = RE_DUP_MAX;
9357: /* MUTANT (rep_op) */                if (lower_bound <= 0 || upper_bound > RE_DUP_MAX
9357: /* MUTANT (rep_op) */                if (lower_bound > 0 || upper_bound > RE_DUP_MAX
9357: /* MUTANT (rep_op) */                if (lower_bound >= 0 || upper_bound > RE_DUP_MAX
9357: /* MUTANT (rep_op) */                if (lower_bound == 0 || upper_bound > RE_DUP_MAX
9357: /* MUTANT (rep_op) */                if (lower_bound != 0 || upper_bound > RE_DUP_MAX
9357: /* MUTANT (rep_op) */                if (lower_bound < 0 && upper_bound > RE_DUP_MAX
9357: /* MUTANT (rep_op) */                if (lower_bound < 0 || upper_bound <= RE_DUP_MAX
9357: /* MUTANT (rep_op) */                if (lower_bound < 0 || upper_bound < RE_DUP_MAX
9357: /* MUTANT (rep_op) */                if (lower_bound < 0 || upper_bound >= RE_DUP_MAX
9357: /* MUTANT (rep_op) */                if (lower_bound < 0 || upper_bound == RE_DUP_MAX
9357: /* MUTANT (rep_op) */                if (lower_bound < 0 || upper_bound != RE_DUP_MAX
9357: /* MUTANT (rep_const) */                if (lower_bound < 1 || upper_bound > RE_DUP_MAX
9357: /* MUTANT (rep_const) */                if (lower_bound < -1 || upper_bound > RE_DUP_MAX
9358: /* MUTANT (rep_op) */                    && lower_bound > upper_bound)
9358: /* MUTANT (rep_op) */                    || lower_bound <= upper_bound)
9358: /* MUTANT (rep_op) */                    || lower_bound < upper_bound)
9358: /* MUTANT (rep_op) */                    || lower_bound >= upper_bound)
9358: /* MUTANT (rep_op) */                    || lower_bound == upper_bound)
9358: /* MUTANT (rep_op) */                    || lower_bound != upper_bound)
9360: /* MUTANT (negate) */                    if(! (syntax & RE_NO_BK_BRACES))
9366: /* MUTANT (negate) */                if(! (!(syntax & RE_NO_BK_BRACES)))
9368: /* MUTANT (del_stmt) */ /*                     if (c != '\\') FREE_STACK_RETURN (REG_EBRACE); */ 
9368: /* MUTANT (rep_op) */                    if (c == '\\') FREE_STACK_RETURN (REG_EBRACE);
9368: /* MUTANT (negate) */                    if(! (c != '\\')) FREE_STACK_RETURN (REG_EBRACE);
9370: /* MUTANT (del_stmt) */ /*                     PATFETCH (c); */ 
9373: /* MUTANT (rep_op) */                if (c == '}')
9373: /* MUTANT (negate) */                if(! (c != '}'))
9375: /* MUTANT (negate) */                    if(! (syntax & RE_NO_BK_BRACES))
9384: /* MUTANT (negate) */                if(! (!laststart))
9386: /* MUTANT (negate) */                    if(! (syntax & RE_CONTEXT_INVALID_OPS))
9388: /* MUTANT (negate) */                    else if(! (syntax & RE_CONTEXT_INDEP_OPS))
9397: /* MUTANT (rep_op) */                 if (upper_bound != 0)
9397: /* MUTANT (rep_const) */                 if (upper_bound == 1)
9397: /* MUTANT (rep_const) */                 if (upper_bound == -1)
9397: /* MUTANT (negate) */                 if(! (upper_bound == 0))
9399: /* MUTANT (del_stmt) */ /*                      GET_BUFFER_SPACE (3); */ 
9399: /* MUTANT (rep_const) */                     GET_BUFFER_SPACE (0);
9399: /* MUTANT (rep_const) */                     GET_BUFFER_SPACE (1);
9399: /* MUTANT (rep_const) */                     GET_BUFFER_SPACE (-1);
9399: /* MUTANT (rep_const) */                     GET_BUFFER_SPACE (((3)+1));
9399: /* MUTANT (rep_const) */                     GET_BUFFER_SPACE (((3)-1));
9400: /* MUTANT (del_stmt) */ /*                      INSERT_JUMP (jump, laststart, b + 3); */ 
9400: /* MUTANT (rep_op) */                     INSERT_JUMP (jump, laststart, b - 3);
9400: /* MUTANT (rep_op) */                     INSERT_JUMP (jump, laststart, b * 3);
9400: /* MUTANT (rep_op) */                     INSERT_JUMP (jump, laststart, b % 3);
9400: /* MUTANT (rep_const) */                     INSERT_JUMP (jump, laststart, b + 0);
9400: /* MUTANT (rep_const) */                     INSERT_JUMP (jump, laststart, b + 1);
9400: /* MUTANT (rep_const) */                     INSERT_JUMP (jump, laststart, b + -1);
9400: /* MUTANT (rep_const) */                     INSERT_JUMP (jump, laststart, b + ((3)+1));
9400: /* MUTANT (rep_const) */                     INSERT_JUMP (jump, laststart, b + ((3)-1));
9401: /* MUTANT (del_stmt) */ /*                      b += 3; */ 
9401: /* MUTANT (rep_op) */                     b -= 3;
9401: /* MUTANT (rep_op) */                     b *= 3;
9401: /* MUTANT (rep_op) */                     b %= 3;
9401: /* MUTANT (rep_const) */                     b += 0;
9401: /* MUTANT (rep_const) */                     b += 1;
9401: /* MUTANT (rep_const) */                     b += -1;
9401: /* MUTANT (rep_const) */                     b += ((3)+1);
9401: /* MUTANT (rep_const) */                     b += ((3)-1);
9416: /* MUTANT (del_stmt) */ /*                      unsigned nbytes = 10 + (upper_bound > 1) * 10; */ 
9416: /* MUTANT (rep_op) */                     unsigned nbytes = 10 - (upper_bound > 1) * 10;
9416: /* MUTANT (rep_op) */                     unsigned nbytes = 10 * (upper_bound > 1) * 10;
9416: /* MUTANT (rep_op) */                     unsigned nbytes = 10 % (upper_bound > 1) * 10;
9416: /* MUTANT (rep_op) */                     unsigned nbytes = 10 + (upper_bound <= 1) * 10;
9416: /* MUTANT (rep_op) */                     unsigned nbytes = 10 + (upper_bound < 1) * 10;
9416: /* MUTANT (rep_op) */                     unsigned nbytes = 10 + (upper_bound >= 1) * 10;
9416: /* MUTANT (rep_op) */                     unsigned nbytes = 10 + (upper_bound == 1) * 10;
9416: /* MUTANT (rep_op) */                     unsigned nbytes = 10 + (upper_bound != 1) * 10;
9416: /* MUTANT (rep_const) */                     unsigned nbytes = 0 + (upper_bound > 1) * 10;
9416: /* MUTANT (rep_const) */                     unsigned nbytes = 1 + (upper_bound > 1) * 10;
9416: /* MUTANT (rep_const) */                     unsigned nbytes = -1 + (upper_bound > 1) * 10;
9416: /* MUTANT (rep_const) */                     unsigned nbytes = ((10)+1) + (upper_bound > 1) * 10;
9416: /* MUTANT (rep_const) */                     unsigned nbytes = ((10)-1) + (upper_bound > 1) * 10;
9416: /* MUTANT (rep_const) */                     unsigned nbytes = 10 + (upper_bound > 0) * 10;
9416: /* MUTANT (rep_const) */                     unsigned nbytes = 10 + (upper_bound > -1) * 10;
9416: /* MUTANT (rep_const) */                     unsigned nbytes = 10 + (upper_bound > ((1)+1)) * 10;
9416: /* MUTANT (rep_const) */                     unsigned nbytes = 10 + (upper_bound > 1) * 0;
9416: /* MUTANT (rep_const) */                     unsigned nbytes = 10 + (upper_bound > 1) * 1;
9416: /* MUTANT (rep_const) */                     unsigned nbytes = 10 + (upper_bound > 1) * -1;
9416: /* MUTANT (rep_const) */                     unsigned nbytes = 10 + (upper_bound > 1) * ((10)+1);
9416: /* MUTANT (rep_const) */                     unsigned nbytes = 10 + (upper_bound > 1) * ((10)-1);
9418: /* MUTANT (del_stmt) */ /*                      GET_BUFFER_SPACE (nbytes); */ 
9426: /* MUTANT (rep_op) */                                   b - 5 + (upper_bound > 1) * 5,
9426: /* MUTANT (rep_op) */                                   b * 5 + (upper_bound > 1) * 5,
9426: /* MUTANT (rep_op) */                                   b % 5 + (upper_bound > 1) * 5,
9426: /* MUTANT (rep_op) */                                   b + 5 - (upper_bound > 1) * 5,
9426: /* MUTANT (rep_op) */                                   b + 5 * (upper_bound > 1) * 5,
9426: /* MUTANT (rep_op) */                                   b + 5 % (upper_bound > 1) * 5,
9426: /* MUTANT (rep_op) */                                   b + 5 + (upper_bound <= 1) * 5,
9426: /* MUTANT (rep_op) */                                   b + 5 + (upper_bound < 1) * 5,
9426: /* MUTANT (rep_op) */                                   b + 5 + (upper_bound >= 1) * 5,
9426: /* MUTANT (rep_op) */                                   b + 5 + (upper_bound == 1) * 5,
9426: /* MUTANT (rep_op) */                                   b + 5 + (upper_bound != 1) * 5,
9426: /* MUTANT (rep_const) */                                   b + 0 + (upper_bound > 1) * 5,
9426: /* MUTANT (rep_const) */                                   b + 1 + (upper_bound > 1) * 5,
9426: /* MUTANT (rep_const) */                                   b + -1 + (upper_bound > 1) * 5,
9426: /* MUTANT (rep_const) */                                   b + ((5)+1) + (upper_bound > 1) * 5,
9426: /* MUTANT (rep_const) */                                   b + ((5)-1) + (upper_bound > 1) * 5,
9426: /* MUTANT (rep_const) */                                   b + 5 + (upper_bound > 0) * 5,
9426: /* MUTANT (rep_const) */                                   b + 5 + (upper_bound > -1) * 5,
9426: /* MUTANT (rep_const) */                                   b + 5 + (upper_bound > ((1)+1)) * 5,
9426: /* MUTANT (rep_const) */                                   b + 5 + (upper_bound > 1) * 0,
9426: /* MUTANT (rep_const) */                                   b + 5 + (upper_bound > 1) * 1,
9426: /* MUTANT (rep_const) */                                   b + 5 + (upper_bound > 1) * -1,
9426: /* MUTANT (rep_const) */                                   b + 5 + (upper_bound > 1) * ((5)+1),
9426: /* MUTANT (rep_const) */                                   b + 5 + (upper_bound > 1) * ((5)-1),
9428: /* MUTANT (del_stmt) */ /*                      b += 5; */ 
9428: /* MUTANT (rep_op) */                     b -= 5;
9428: /* MUTANT (rep_op) */                     b *= 5;
9428: /* MUTANT (rep_op) */                     b %= 5;
9428: /* MUTANT (rep_const) */                     b += 0;
9428: /* MUTANT (rep_const) */                     b += 1;
9428: /* MUTANT (rep_const) */                     b += -1;
9428: /* MUTANT (rep_const) */                     b += ((5)+1);
9428: /* MUTANT (rep_const) */                     b += ((5)-1);
9434: /* MUTANT (del_stmt) */ /*                      insert_op2 (set_number_at, laststart, 5, lower_bound, b); */ 
9434: /* MUTANT (rep_const) */                     insert_op2 (set_number_at, laststart, 0, lower_bound, b);
9434: /* MUTANT (rep_const) */                     insert_op2 (set_number_at, laststart, 1, lower_bound, b);
9434: /* MUTANT (rep_const) */                     insert_op2 (set_number_at, laststart, -1, lower_bound, b);
9434: /* MUTANT (rep_const) */                     insert_op2 (set_number_at, laststart, ((5)+1), lower_bound, b);
9434: /* MUTANT (rep_const) */                     insert_op2 (set_number_at, laststart, ((5)-1), lower_bound, b);
9435: /* MUTANT (del_stmt) */ /*                      b += 5; */ 
9435: /* MUTANT (rep_op) */                     b -= 5;
9435: /* MUTANT (rep_op) */                     b *= 5;
9435: /* MUTANT (rep_op) */                     b %= 5;
9435: /* MUTANT (rep_const) */                     b += 0;
9435: /* MUTANT (rep_const) */                     b += 1;
9435: /* MUTANT (rep_const) */                     b += -1;
9435: /* MUTANT (rep_const) */                     b += ((5)+1);
9435: /* MUTANT (rep_const) */                     b += ((5)-1);
9437: /* MUTANT (rep_op) */                     if (upper_bound <= 1)
9437: /* MUTANT (rep_op) */                     if (upper_bound < 1)
9437: /* MUTANT (rep_op) */                     if (upper_bound >= 1)
9437: /* MUTANT (rep_op) */                     if (upper_bound == 1)
9437: /* MUTANT (rep_op) */                     if (upper_bound != 1)
9437: /* MUTANT (rep_const) */                     if (upper_bound > 0)
9437: /* MUTANT (rep_const) */                     if (upper_bound > -1)
9437: /* MUTANT (rep_const) */                     if (upper_bound > ((1)+1))
9437: /* MUTANT (negate) */                     if(! (upper_bound > 1))
9445: /* MUTANT (rep_op) */                         STORE_JUMP2 (jump_n, b, laststart - 5,
9445: /* MUTANT (rep_op) */                         STORE_JUMP2 (jump_n, b, laststart * 5,
9445: /* MUTANT (rep_op) */                         STORE_JUMP2 (jump_n, b, laststart % 5,
9445: /* MUTANT (rep_const) */                         STORE_JUMP2 (jump_n, b, laststart + 0,
9445: /* MUTANT (rep_const) */                         STORE_JUMP2 (jump_n, b, laststart + 1,
9445: /* MUTANT (rep_const) */                         STORE_JUMP2 (jump_n, b, laststart + -1,
9445: /* MUTANT (rep_const) */                         STORE_JUMP2 (jump_n, b, laststart + ((5)+1),
9445: /* MUTANT (rep_const) */                         STORE_JUMP2 (jump_n, b, laststart + ((5)-1),
9446: /* MUTANT (rep_const) */                                      upper_bound - 0);
9446: /* MUTANT (rep_const) */                                      upper_bound - -1);
9446: /* MUTANT (rep_const) */                                      upper_bound - ((1)+1));
9447: /* MUTANT (del_stmt) */ /*                          b += 5; */ 
9447: /* MUTANT (rep_op) */                         b -= 5;
9447: /* MUTANT (rep_op) */                         b *= 5;
9447: /* MUTANT (rep_op) */                         b %= 5;
9447: /* MUTANT (rep_const) */                         b += 0;
9447: /* MUTANT (rep_const) */                         b += 1;
9447: /* MUTANT (rep_const) */                         b += -1;
9447: /* MUTANT (rep_const) */                         b += ((5)+1);
9447: /* MUTANT (rep_const) */                         b += ((5)-1);
9464: /* MUTANT (rep_const) */                                     upper_bound - 0, b);
9464: /* MUTANT (rep_const) */                                     upper_bound - -1, b);
9464: /* MUTANT (rep_const) */                                     upper_bound - ((1)+1), b);
9465: /* MUTANT (del_stmt) */ /*                          b += 5; */ 
9465: /* MUTANT (rep_op) */                         b -= 5;
9465: /* MUTANT (rep_op) */                         b *= 5;
9465: /* MUTANT (rep_op) */                         b %= 5;
9465: /* MUTANT (rep_const) */                         b += 0;
9465: /* MUTANT (rep_const) */                         b += 1;
9465: /* MUTANT (rep_const) */                         b += -1;
9465: /* MUTANT (rep_const) */                         b += ((5)+1);
9465: /* MUTANT (rep_const) */                         b += ((5)-1);
9468: /* MUTANT (rep_const) */                pending_exact = 1;
9468: /* MUTANT (rep_const) */                pending_exact = -1;
9469: /* MUTANT (del_stmt) */ /*                 beg_interval = NULL; */ 
9476: /* MUTANT (del_stmt) */ /*                p = beg_interval; */ 
9477: /* MUTANT (del_stmt) */ /*                beg_interval = NULL; */ 
9480: /* MUTANT (del_stmt) */ /*                PATFETCH (c); */ 
9482: /* MUTANT (negate) */               if(! (!(syntax & RE_NO_BK_BRACES)))
9484: /* MUTANT (rep_op) */                   if (p <= pattern  &&  p[-1] == '\\')
9484: /* MUTANT (rep_op) */                   if (p < pattern  &&  p[-1] == '\\')
9484: /* MUTANT (rep_op) */                   if (p >= pattern  &&  p[-1] == '\\')
9484: /* MUTANT (rep_op) */                   if (p == pattern  &&  p[-1] == '\\')
9484: /* MUTANT (rep_op) */                   if (p != pattern  &&  p[-1] == '\\')
9484: /* MUTANT (rep_op) */                   if (p > pattern  ||  p[-1] == '\\')
9484: /* MUTANT (rep_op) */                   if (p > pattern  &&  p[-1] != '\\')
9484: /* MUTANT (rep_const) */                   if (p > pattern  &&  p[0] == '\\')
9484: /* MUTANT (rep_const) */                   if (p > pattern  &&  p[1] == '\\')
9484: /* MUTANT (rep_const) */                   if (p > pattern  &&  p[((-1)+1)] == '\\')
9484: /* MUTANT (rep_const) */                   if (p > pattern  &&  p[((-1)-1)] == '\\')
9484: /* MUTANT (negate) */                   if(! (p > pattern  &&  p[-1] == '\\'))
9494: /* MUTANT (del_stmt) */ /*               break; */ 
9498: /* MUTANT (del_stmt) */ /*               PATFETCH (c); */ 
9499: /* MUTANT (del_stmt) */ /*               BUF_PUSH_2 (syntaxspec, syntax_spec_code[c]); */ 
9500: /* MUTANT (del_stmt) */ /*               break; */ 
9504: /* MUTANT (del_stmt) */ /*               PATFETCH (c); */ 
9505: /* MUTANT (del_stmt) */ /*               BUF_PUSH_2 (notsyntaxspec, syntax_spec_code[c]); */ 
9506: /* MUTANT (del_stmt) */ /*               break; */ 
9511: /* MUTANT (negate) */	      if(! (re_syntax_options & RE_NO_GNU_OPS))
9513: /* MUTANT (del_stmt) */ /*               laststart = b; */ 
9514: /* MUTANT (del_stmt) */ /*               BUF_PUSH (wordchar); */ 
9515: /* MUTANT (del_stmt) */ /*               break; */ 
9519: /* MUTANT (negate) */	      if(! (re_syntax_options & RE_NO_GNU_OPS))
9521: /* MUTANT (del_stmt) */ /*               laststart = b; */ 
9522: /* MUTANT (del_stmt) */ /*               BUF_PUSH (notwordchar); */ 
9523: /* MUTANT (del_stmt) */ /*               break; */ 
9526: /* MUTANT (rep_op) */            case '<=':
9526: /* MUTANT (rep_op) */            case '>':
9526: /* MUTANT (rep_op) */            case '>=':
9526: /* MUTANT (rep_op) */            case '==':
9526: /* MUTANT (rep_op) */            case '!=':
9527: /* MUTANT (negate) */	      if(! (re_syntax_options & RE_NO_GNU_OPS))
9529: /* MUTANT (del_stmt) */ /*               BUF_PUSH (wordbeg); */ 
9530: /* MUTANT (del_stmt) */ /*               break; */ 
9532: /* MUTANT (rep_op) */            case '<=':
9532: /* MUTANT (rep_op) */            case '<':
9532: /* MUTANT (rep_op) */            case '>=':
9532: /* MUTANT (rep_op) */            case '==':
9532: /* MUTANT (rep_op) */            case '!=':
9533: /* MUTANT (negate) */	      if(! (re_syntax_options & RE_NO_GNU_OPS))
9535: /* MUTANT (del_stmt) */ /*               BUF_PUSH (wordend); */ 
9536: /* MUTANT (del_stmt) */ /*               break; */ 
9539: /* MUTANT (negate) */	      if(! (re_syntax_options & RE_NO_GNU_OPS))
9541: /* MUTANT (del_stmt) */ /*               BUF_PUSH (wordbound); */ 
9542: /* MUTANT (del_stmt) */ /*               break; */ 
9545: /* MUTANT (negate) */	      if(! (re_syntax_options & RE_NO_GNU_OPS))
9547: /* MUTANT (del_stmt) */ /*               BUF_PUSH (notwordbound); */ 
9548: /* MUTANT (del_stmt) */ /*               break; */ 
9551: /* MUTANT (negate) */	      if(! (re_syntax_options & RE_NO_GNU_OPS))
9553: /* MUTANT (del_stmt) */ /*               BUF_PUSH (begbuf); */ 
9554: /* MUTANT (del_stmt) */ /*               break; */ 
9557: /* MUTANT (negate) */	      if(! (re_syntax_options & RE_NO_GNU_OPS))
9559: /* MUTANT (del_stmt) */ /*               BUF_PUSH (endbuf); */ 
9560: /* MUTANT (del_stmt) */ /*               break; */ 
9562: /* MUTANT (rep_const) */            case '0': case '2': case '3': case '4': case '5':
9562: /* MUTANT (rep_const) */            case '-1': case '2': case '3': case '4': case '5':
9562: /* MUTANT (rep_const) */            case '((1)+1)': case '2': case '3': case '4': case '5':
9562: /* MUTANT (rep_const) */            case '1': case '0': case '3': case '4': case '5':
9562: /* MUTANT (rep_const) */            case '1': case '1': case '3': case '4': case '5':
9562: /* MUTANT (rep_const) */            case '1': case '-1': case '3': case '4': case '5':
9562: /* MUTANT (rep_const) */            case '1': case '((2)+1)': case '3': case '4': case '5':
9562: /* MUTANT (rep_const) */            case '1': case '((2)-1)': case '3': case '4': case '5':
9562: /* MUTANT (rep_const) */            case '1': case '2': case '0': case '4': case '5':
9562: /* MUTANT (rep_const) */            case '1': case '2': case '1': case '4': case '5':
9562: /* MUTANT (rep_const) */            case '1': case '2': case '-1': case '4': case '5':
9562: /* MUTANT (rep_const) */            case '1': case '2': case '((3)+1)': case '4': case '5':
9562: /* MUTANT (rep_const) */            case '1': case '2': case '((3)-1)': case '4': case '5':
9562: /* MUTANT (rep_const) */            case '1': case '2': case '3': case '0': case '5':
9562: /* MUTANT (rep_const) */            case '1': case '2': case '3': case '1': case '5':
9562: /* MUTANT (rep_const) */            case '1': case '2': case '3': case '-1': case '5':
9562: /* MUTANT (rep_const) */            case '1': case '2': case '3': case '((4)+1)': case '5':
9562: /* MUTANT (rep_const) */            case '1': case '2': case '3': case '((4)-1)': case '5':
9562: /* MUTANT (rep_const) */            case '1': case '2': case '3': case '4': case '0':
9562: /* MUTANT (rep_const) */            case '1': case '2': case '3': case '4': case '1':
9562: /* MUTANT (rep_const) */            case '1': case '2': case '3': case '4': case '-1':
9562: /* MUTANT (rep_const) */            case '1': case '2': case '3': case '4': case '((5)+1)':
9562: /* MUTANT (rep_const) */            case '1': case '2': case '3': case '4': case '((5)-1)':
9563: /* MUTANT (rep_const) */            case '0': case '7': case '8': case '9':
9563: /* MUTANT (rep_const) */            case '1': case '7': case '8': case '9':
9563: /* MUTANT (rep_const) */            case '-1': case '7': case '8': case '9':
9563: /* MUTANT (rep_const) */            case '((6)+1)': case '7': case '8': case '9':
9563: /* MUTANT (rep_const) */            case '((6)-1)': case '7': case '8': case '9':
9563: /* MUTANT (rep_const) */            case '6': case '0': case '8': case '9':
9563: /* MUTANT (rep_const) */            case '6': case '1': case '8': case '9':
9563: /* MUTANT (rep_const) */            case '6': case '-1': case '8': case '9':
9563: /* MUTANT (rep_const) */            case '6': case '((7)+1)': case '8': case '9':
9563: /* MUTANT (rep_const) */            case '6': case '((7)-1)': case '8': case '9':
9563: /* MUTANT (rep_const) */            case '6': case '7': case '0': case '9':
9563: /* MUTANT (rep_const) */            case '6': case '7': case '1': case '9':
9563: /* MUTANT (rep_const) */            case '6': case '7': case '-1': case '9':
9563: /* MUTANT (rep_const) */            case '6': case '7': case '((8)+1)': case '9':
9563: /* MUTANT (rep_const) */            case '6': case '7': case '((8)-1)': case '9':
9563: /* MUTANT (rep_const) */            case '6': case '7': case '8': case '0':
9563: /* MUTANT (rep_const) */            case '6': case '7': case '8': case '1':
9563: /* MUTANT (rep_const) */            case '6': case '7': case '8': case '-1':
9563: /* MUTANT (rep_const) */            case '6': case '7': case '8': case '((9)+1)':
9563: /* MUTANT (rep_const) */            case '6': case '7': case '8': case '((9)-1)':
9564: /* MUTANT (negate) */              if(! (syntax & RE_NO_BK_REFS))
9567: /* MUTANT (del_stmt) */ /*               c1 = c - '0'; */ 
9567: /* MUTANT (rep_const) */              c1 = c - '1';
9567: /* MUTANT (rep_const) */              c1 = c - '-1';
9569: /* MUTANT (rep_op) */              if (c1 <= regnum)
9569: /* MUTANT (rep_op) */              if (c1 < regnum)
9569: /* MUTANT (rep_op) */              if (c1 >= regnum)
9569: /* MUTANT (rep_op) */              if (c1 == regnum)
9569: /* MUTANT (rep_op) */              if (c1 != regnum)
9569: /* MUTANT (negate) */              if(! (c1 > regnum))
9573: /* MUTANT (negate) */              if(! (group_in_compile_stack (compile_stack, (regnum_t) c1)))
9576: /* MUTANT (del_stmt) */ /*               laststart = b; */ 
9577: /* MUTANT (del_stmt) */ /*               BUF_PUSH_2 (duplicate, c1); */ 
9578: /* MUTANT (del_stmt) */ /*               break; */ 
9581: /* MUTANT (rep_op) */            case '-':
9581: /* MUTANT (rep_op) */            case '*':
9581: /* MUTANT (rep_op) */            case '%':
9583: /* MUTANT (negate) */              if(! (syntax & RE_BK_PLUS_QM))
9594: /* MUTANT (del_stmt) */ /*               goto normal_char; */ 
9606: /* MUTANT (rep_op) */              && pending_exact + *pending_exact + 1 != b
9606: /* MUTANT (rep_op) */              || pending_exact - *pending_exact + 1 != b
9606: /* MUTANT (rep_op) */              || pending_exact * *pending_exact + 1 != b
9606: /* MUTANT (rep_op) */              || pending_exact % *pending_exact + 1 != b
9606: /* MUTANT (rep_op) */              || pending_exact + *pending_exact - 1 != b
9606: /* MUTANT (rep_op) */              || pending_exact + *pending_exact * 1 != b
9606: /* MUTANT (rep_op) */              || pending_exact + *pending_exact % 1 != b
9606: /* MUTANT (rep_op) */              || pending_exact + *pending_exact + 1 == b
9606: /* MUTANT (rep_const) */              || pending_exact + *pending_exact + 0 != b
9606: /* MUTANT (rep_const) */              || pending_exact + *pending_exact + -1 != b
9606: /* MUTANT (rep_const) */              || pending_exact + *pending_exact + ((1)+1) != b
9609: /* MUTANT (rep_op) */	      && *pending_exact == (1 << BYTEWIDTH) - 1
9609: /* MUTANT (rep_op) */	      || *pending_exact != (1 << BYTEWIDTH) - 1
9609: /* MUTANT (rep_const) */	      || *pending_exact == (0 << BYTEWIDTH) - 1
9609: /* MUTANT (rep_const) */	      || *pending_exact == (-1 << BYTEWIDTH) - 1
9609: /* MUTANT (rep_const) */	      || *pending_exact == (((1)+1) << BYTEWIDTH) - 1
9609: /* MUTANT (rep_const) */	      || *pending_exact == (1 << BYTEWIDTH) - 0
9609: /* MUTANT (rep_const) */	      || *pending_exact == (1 << BYTEWIDTH) - -1
9609: /* MUTANT (rep_const) */	      || *pending_exact == (1 << BYTEWIDTH) - ((1)+1)
9612: /* MUTANT (rep_op) */              && *p == '*' || *p == '^'
9612: /* MUTANT (rep_op) */              || *p != '*' || *p == '^'
9612: /* MUTANT (rep_op) */              || *p == '*' && *p == '^'
9612: /* MUTANT (rep_op) */              || *p == '*' || *p != '^'
9613: /* MUTANT (rep_op) */	      && ((syntax & RE_BK_PLUS_QM)
9614: /* MUTANT (rep_op) */		  ? *p != '\\' && (p[1] == '+' || p[1] == '?')
9614: /* MUTANT (rep_op) */		  ? *p == '\\' || (p[1] == '+' || p[1] == '?')
9614: /* MUTANT (rep_op) */		  ? *p == '\\' && (p[1] != '+' || p[1] == '?')
9614: /* MUTANT (rep_op) */		  ? *p == '\\' && (p[1] == '-' || p[1] == '?')
9614: /* MUTANT (rep_op) */		  ? *p == '\\' && (p[1] == '*' || p[1] == '?')
9614: /* MUTANT (rep_op) */		  ? *p == '\\' && (p[1] == '%' || p[1] == '?')
9614: /* MUTANT (rep_op) */		  ? *p == '\\' && (p[1] == '+' && p[1] == '?')
9614: /* MUTANT (rep_op) */		  ? *p == '\\' && (p[1] == '+' || p[1] != '?')
9614: /* MUTANT (rep_const) */		  ? *p == '\\' && (p[0] == '+' || p[1] == '?')
9614: /* MUTANT (rep_const) */		  ? *p == '\\' && (p[-1] == '+' || p[1] == '?')
9614: /* MUTANT (rep_const) */		  ? *p == '\\' && (p[((1)+1)] == '+' || p[1] == '?')
9614: /* MUTANT (rep_const) */		  ? *p == '\\' && (p[1] == '+' || p[0] == '?')
9614: /* MUTANT (rep_const) */		  ? *p == '\\' && (p[1] == '+' || p[-1] == '?')
9614: /* MUTANT (rep_const) */		  ? *p == '\\' && (p[1] == '+' || p[((1)+1)] == '?')
9615: /* MUTANT (rep_op) */		  : (*p != '+' || *p == '?'))
9615: /* MUTANT (rep_op) */		  : (*p == '-' || *p == '?'))
9615: /* MUTANT (rep_op) */		  : (*p == '*' || *p == '?'))
9615: /* MUTANT (rep_op) */		  : (*p == '%' || *p == '?'))
9615: /* MUTANT (rep_op) */		  : (*p == '+' && *p == '?'))
9615: /* MUTANT (rep_op) */		  : (*p == '+' || *p != '?'))
9616: /* MUTANT (rep_op) */	      && ((syntax & RE_INTERVALS)
9617: /* MUTANT (rep_op) */                  || ((syntax & RE_NO_BK_BRACES)
9618: /* MUTANT (rep_op) */		      ? *p != '{'
9619: /* MUTANT (rep_op) */                      : (p[0] != '\\' && p[1] == '{'))))
9619: /* MUTANT (rep_op) */                      : (p[0] == '\\' || p[1] == '{'))))
9619: /* MUTANT (rep_op) */                      : (p[0] == '\\' && p[1] != '{'))))
9619: /* MUTANT (rep_const) */                      : (p[1] == '\\' && p[1] == '{'))))
9619: /* MUTANT (rep_const) */                      : (p[-1] == '\\' && p[1] == '{'))))
9619: /* MUTANT (rep_const) */                      : (p[0] == '\\' && p[0] == '{'))))
9619: /* MUTANT (rep_const) */                      : (p[0] == '\\' && p[-1] == '{'))))
9619: /* MUTANT (rep_const) */                      : (p[0] == '\\' && p[((1)+1)] == '{'))))
9623: /* MUTANT (del_stmt) */ /*               laststart = b; */ 
9625: /* MUTANT (del_stmt) */ /* 	      BUF_PUSH_2 (exactn, 0); */ 
9625: /* MUTANT (rep_const) */	      BUF_PUSH_2 (exactn, 1);
9625: /* MUTANT (rep_const) */	      BUF_PUSH_2 (exactn, -1);
9626: /* MUTANT (del_stmt) */ /* 	      pending_exact = b - 1; */ 
9626: /* MUTANT (rep_const) */	      pending_exact = b - 0;
9626: /* MUTANT (rep_const) */	      pending_exact = b - -1;
9626: /* MUTANT (rep_const) */	      pending_exact = b - ((1)+1);
9630: /* MUTANT (del_stmt) */ /*           (*pending_exact)++; */ 
9630: /* MUTANT (rep_op) */          (*pending_exact)--;
9631: /* MUTANT (del_stmt) */ /* 	  break; */ 
9638: /* MUTANT (negate) */  if(! (fixup_alt_jump))
9641: /* MUTANT (negate) */  if(! (!COMPILE_STACK_EMPTY))
9646: /* MUTANT (negate) */  if(! (syntax & RE_NO_POSIX_BACKTRACKING))
9649: /* MUTANT (del_stmt) */ /*   free (compile_stack.stack); */ 
9652: /* MUTANT (del_stmt) */ /*   bufp->used = b - bufp->buffer; */ 
9655: /* MUTANT (negate) */  if(! (debug))
9657: /* MUTANT (del_stmt) */ /*       DEBUG_PRINT1 ("\nCompiled pattern: \n"); */ 
9658: /* MUTANT (del_stmt) */ /*       print_compiled_pattern (bufp); */ 
9667: /* MUTANT (del_stmt) */ /*     int num_regs = bufp->re_nsub + 1; */ 
9667: /* MUTANT (rep_op) */    int num_regs = bufp->re_nsub - 1;
9667: /* MUTANT (rep_op) */    int num_regs = bufp->re_nsub * 1;
9667: /* MUTANT (rep_op) */    int num_regs = bufp->re_nsub % 1;
9667: /* MUTANT (rep_const) */    int num_regs = bufp->re_nsub + 0;
9667: /* MUTANT (rep_const) */    int num_regs = bufp->re_nsub + -1;
9667: /* MUTANT (rep_const) */    int num_regs = bufp->re_nsub + ((1)+1);
9672: /* MUTANT (rep_op) */    if (fail_stack.size <= (2 * re_max_failures * MAX_FAILURE_ITEMS))
9672: /* MUTANT (rep_op) */    if (fail_stack.size > (2 * re_max_failures * MAX_FAILURE_ITEMS))
9672: /* MUTANT (rep_op) */    if (fail_stack.size >= (2 * re_max_failures * MAX_FAILURE_ITEMS))
9672: /* MUTANT (rep_op) */    if (fail_stack.size == (2 * re_max_failures * MAX_FAILURE_ITEMS))
9672: /* MUTANT (rep_op) */    if (fail_stack.size != (2 * re_max_failures * MAX_FAILURE_ITEMS))
9672: /* MUTANT (rep_const) */    if (fail_stack.size < (0 * re_max_failures * MAX_FAILURE_ITEMS))
9672: /* MUTANT (rep_const) */    if (fail_stack.size < (1 * re_max_failures * MAX_FAILURE_ITEMS))
9672: /* MUTANT (rep_const) */    if (fail_stack.size < (-1 * re_max_failures * MAX_FAILURE_ITEMS))
9672: /* MUTANT (rep_const) */    if (fail_stack.size < (((2)+1) * re_max_failures * MAX_FAILURE_ITEMS))
9672: /* MUTANT (rep_const) */    if (fail_stack.size < (((2)-1) * re_max_failures * MAX_FAILURE_ITEMS))
9672: /* MUTANT (negate) */    if(! (fail_stack.size < (2 * re_max_failures * MAX_FAILURE_ITEMS)))
9674: /* MUTANT (del_stmt) */ /* 	fail_stack.size = (2 * re_max_failures * MAX_FAILURE_ITEMS); */ 
9674: /* MUTANT (rep_const) */	fail_stack.size = (0 * re_max_failures * MAX_FAILURE_ITEMS);
9674: /* MUTANT (rep_const) */	fail_stack.size = (1 * re_max_failures * MAX_FAILURE_ITEMS);
9674: /* MUTANT (rep_const) */	fail_stack.size = (-1 * re_max_failures * MAX_FAILURE_ITEMS);
9674: /* MUTANT (rep_const) */	fail_stack.size = (((2)+1) * re_max_failures * MAX_FAILURE_ITEMS);
9674: /* MUTANT (rep_const) */	fail_stack.size = (((2)-1) * re_max_failures * MAX_FAILURE_ITEMS);
9677: /* MUTANT (negate) */	if(! (! fail_stack.stack))
9687: /* MUTANT (negate) */	if(! (! fail_stack.stack))
9713: /* MUTANT (del_stmt) */ /*     unsigned char *loc; */ 
9714: /* MUTANT (del_stmt) */ /*     int arg; */ 
9716: /* MUTANT (del_stmt) */ /*   *loc = (unsigned char) op; */ 
9717: /* MUTANT (del_stmt) */ /*   STORE_NUMBER (loc + 1, arg); */ 
9717: /* MUTANT (rep_op) */  STORE_NUMBER (loc - 1, arg);
9717: /* MUTANT (rep_op) */  STORE_NUMBER (loc * 1, arg);
9717: /* MUTANT (rep_op) */  STORE_NUMBER (loc % 1, arg);
9717: /* MUTANT (rep_const) */  STORE_NUMBER (loc + 0, arg);
9717: /* MUTANT (rep_const) */  STORE_NUMBER (loc + -1, arg);
9717: /* MUTANT (rep_const) */  STORE_NUMBER (loc + ((1)+1), arg);
9726: /* MUTANT (del_stmt) */ /*     unsigned char *loc; */ 
9727: /* MUTANT (del_stmt) */ /*     int arg1, arg2; */ 
9729: /* MUTANT (del_stmt) */ /*   *loc = (unsigned char) op; */ 
9730: /* MUTANT (del_stmt) */ /*   STORE_NUMBER (loc + 1, arg1); */ 
9730: /* MUTANT (rep_op) */  STORE_NUMBER (loc - 1, arg1);
9730: /* MUTANT (rep_op) */  STORE_NUMBER (loc * 1, arg1);
9730: /* MUTANT (rep_op) */  STORE_NUMBER (loc % 1, arg1);
9730: /* MUTANT (rep_const) */  STORE_NUMBER (loc + 0, arg1);
9730: /* MUTANT (rep_const) */  STORE_NUMBER (loc + -1, arg1);
9730: /* MUTANT (rep_const) */  STORE_NUMBER (loc + ((1)+1), arg1);
9731: /* MUTANT (del_stmt) */ /*   STORE_NUMBER (loc + 3, arg2); */ 
9731: /* MUTANT (rep_op) */  STORE_NUMBER (loc - 3, arg2);
9731: /* MUTANT (rep_op) */  STORE_NUMBER (loc * 3, arg2);
9731: /* MUTANT (rep_op) */  STORE_NUMBER (loc % 3, arg2);
9731: /* MUTANT (rep_const) */  STORE_NUMBER (loc + 0, arg2);
9731: /* MUTANT (rep_const) */  STORE_NUMBER (loc + 1, arg2);
9731: /* MUTANT (rep_const) */  STORE_NUMBER (loc + -1, arg2);
9731: /* MUTANT (rep_const) */  STORE_NUMBER (loc + ((3)+1), arg2);
9731: /* MUTANT (rep_const) */  STORE_NUMBER (loc + ((3)-1), arg2);
9741: /* MUTANT (del_stmt) */ /*     unsigned char *loc; */ 
9742: /* MUTANT (del_stmt) */ /*     int arg; */ 
9743: /* MUTANT (del_stmt) */ /*     unsigned char *end; */ 
9745: /* MUTANT (del_stmt) */ /*   register unsigned char *pfrom = end; */ 
9746: /* MUTANT (del_stmt) */ /*   register unsigned char *pto = end + 3; */ 
9746: /* MUTANT (rep_op) */  register unsigned char *pto = end - 3;
9746: /* MUTANT (rep_op) */  register unsigned char *pto = end * 3;
9746: /* MUTANT (rep_op) */  register unsigned char *pto = end % 3;
9746: /* MUTANT (rep_const) */  register unsigned char *pto = end + 0;
9746: /* MUTANT (rep_const) */  register unsigned char *pto = end + 1;
9746: /* MUTANT (rep_const) */  register unsigned char *pto = end + -1;
9746: /* MUTANT (rep_const) */  register unsigned char *pto = end + ((3)+1);
9746: /* MUTANT (rep_const) */  register unsigned char *pto = end + ((3)-1);
9748: /* MUTANT (rep_op) */  while (pfrom == loc)
9748: /* MUTANT (negate) */  while(! (pfrom != loc))
9751: /* MUTANT (del_stmt) */ /*   store_op1 (op, loc, arg); */ 
9760: /* MUTANT (del_stmt) */ /*     unsigned char *loc; */ 
9761: /* MUTANT (del_stmt) */ /*     int arg1, arg2; */ 
9762: /* MUTANT (del_stmt) */ /*     unsigned char *end; */ 
9764: /* MUTANT (del_stmt) */ /*   register unsigned char *pfrom = end; */ 
9765: /* MUTANT (del_stmt) */ /*   register unsigned char *pto = end + 5; */ 
9765: /* MUTANT (rep_op) */  register unsigned char *pto = end - 5;
9765: /* MUTANT (rep_op) */  register unsigned char *pto = end * 5;
9765: /* MUTANT (rep_op) */  register unsigned char *pto = end % 5;
9765: /* MUTANT (rep_const) */  register unsigned char *pto = end + 0;
9765: /* MUTANT (rep_const) */  register unsigned char *pto = end + 1;
9765: /* MUTANT (rep_const) */  register unsigned char *pto = end + -1;
9765: /* MUTANT (rep_const) */  register unsigned char *pto = end + ((5)+1);
9765: /* MUTANT (rep_const) */  register unsigned char *pto = end + ((5)-1);
9767: /* MUTANT (rep_op) */  while (pfrom == loc)
9767: /* MUTANT (negate) */  while(! (pfrom != loc))
9770: /* MUTANT (del_stmt) */ /*   store_op2 (op, loc, arg1, arg2); */ 
9781: /* MUTANT (del_stmt) */ /*     reg_syntax_t syntax; */ 
9783: /* MUTANT (del_stmt) */ /*   const char *prev = p - 2; */ 
9783: /* MUTANT (rep_const) */  const char *prev = p - 0;
9783: /* MUTANT (rep_const) */  const char *prev = p - 1;
9783: /* MUTANT (rep_const) */  const char *prev = p - -1;
9783: /* MUTANT (rep_const) */  const char *prev = p - ((2)+1);
9783: /* MUTANT (rep_const) */  const char *prev = p - ((2)-1);
9784: /* MUTANT (del_stmt) */ /*   boolean prev_prev_backslash = prev > pattern && prev[-1] == '\\'; */ 
9784: /* MUTANT (rep_op) */  boolean prev_prev_backslash = prev <= pattern && prev[-1] == '\\';
9784: /* MUTANT (rep_op) */  boolean prev_prev_backslash = prev < pattern && prev[-1] == '\\';
9784: /* MUTANT (rep_op) */  boolean prev_prev_backslash = prev >= pattern && prev[-1] == '\\';
9784: /* MUTANT (rep_op) */  boolean prev_prev_backslash = prev == pattern && prev[-1] == '\\';
9784: /* MUTANT (rep_op) */  boolean prev_prev_backslash = prev != pattern && prev[-1] == '\\';
9784: /* MUTANT (rep_op) */  boolean prev_prev_backslash = prev > pattern || prev[-1] == '\\';
9784: /* MUTANT (rep_op) */  boolean prev_prev_backslash = prev > pattern && prev[-1] != '\\';
9784: /* MUTANT (rep_const) */  boolean prev_prev_backslash = prev > pattern && prev[0] == '\\';
9784: /* MUTANT (rep_const) */  boolean prev_prev_backslash = prev > pattern && prev[1] == '\\';
9784: /* MUTANT (rep_const) */  boolean prev_prev_backslash = prev > pattern && prev[((-1)+1)] == '\\';
9784: /* MUTANT (rep_const) */  boolean prev_prev_backslash = prev > pattern && prev[((-1)-1)] == '\\';
9788: /* MUTANT (rep_op) */       (*prev != '(' && (syntax & RE_NO_BK_PARENS || prev_prev_backslash))
9788: /* MUTANT (rep_op) */       (*prev == '(' || (syntax & RE_NO_BK_PARENS || prev_prev_backslash))
9788: /* MUTANT (rep_op) */       (*prev == '(' && (syntax & RE_NO_BK_PARENS && prev_prev_backslash))
9790: /* MUTANT (rep_op) */    && (*prev == '|' && (syntax & RE_NO_BK_VBAR || prev_prev_backslash));
9790: /* MUTANT (rep_op) */    || (*prev != '|' && (syntax & RE_NO_BK_VBAR || prev_prev_backslash));
9790: /* MUTANT (rep_op) */    || (*prev == '&' && (syntax & RE_NO_BK_VBAR || prev_prev_backslash));
9790: /* MUTANT (rep_op) */    || (*prev == '|' || (syntax & RE_NO_BK_VBAR || prev_prev_backslash));
9790: /* MUTANT (rep_op) */    || (*prev == '|' && (syntax & RE_NO_BK_VBAR && prev_prev_backslash));
9800: /* MUTANT (del_stmt) */ /*     reg_syntax_t syntax; */ 
9802: /* MUTANT (del_stmt) */ /*   const char *next = p; */ 
9803: /* MUTANT (del_stmt) */ /*   boolean next_backslash = *next == '\\'; */ 
9803: /* MUTANT (rep_op) */  boolean next_backslash = *next != '\\';
9804: /* MUTANT (del_stmt) */ /*   const char *next_next = p + 1 < pend ? p + 1 : 0; */ 
9804: /* MUTANT (rep_op) */  const char *next_next = p - 1 < pend ? p + 1 : 0;
9804: /* MUTANT (rep_op) */  const char *next_next = p * 1 < pend ? p + 1 : 0;
9804: /* MUTANT (rep_op) */  const char *next_next = p % 1 < pend ? p + 1 : 0;
9804: /* MUTANT (rep_op) */  const char *next_next = p + 1 <= pend ? p + 1 : 0;
9804: /* MUTANT (rep_op) */  const char *next_next = p + 1 > pend ? p + 1 : 0;
9804: /* MUTANT (rep_op) */  const char *next_next = p + 1 >= pend ? p + 1 : 0;
9804: /* MUTANT (rep_op) */  const char *next_next = p + 1 == pend ? p + 1 : 0;
9804: /* MUTANT (rep_op) */  const char *next_next = p + 1 != pend ? p + 1 : 0;
9804: /* MUTANT (rep_op) */  const char *next_next = p + 1 < pend ? p - 1 : 0;
9804: /* MUTANT (rep_op) */  const char *next_next = p + 1 < pend ? p * 1 : 0;
9804: /* MUTANT (rep_op) */  const char *next_next = p + 1 < pend ? p % 1 : 0;
9804: /* MUTANT (rep_const) */  const char *next_next = p + 0 < pend ? p + 1 : 0;
9804: /* MUTANT (rep_const) */  const char *next_next = p + -1 < pend ? p + 1 : 0;
9804: /* MUTANT (rep_const) */  const char *next_next = p + ((1)+1) < pend ? p + 1 : 0;
9804: /* MUTANT (rep_const) */  const char *next_next = p + 1 < pend ? p + 0 : 0;
9804: /* MUTANT (rep_const) */  const char *next_next = p + 1 < pend ? p + -1 : 0;
9804: /* MUTANT (rep_const) */  const char *next_next = p + 1 < pend ? p + ((1)+1) : 0;
9804: /* MUTANT (rep_const) */  const char *next_next = p + 1 < pend ? p + 1 : 1;
9804: /* MUTANT (rep_const) */  const char *next_next = p + 1 < pend ? p + 1 : -1;
9808: /* MUTANT (rep_op) */       (syntax & RE_NO_BK_PARENS ? *next != ')'
9809: /* MUTANT (rep_op) */        : next_backslash || next_next && *next_next == ')')
9809: /* MUTANT (rep_op) */        : next_backslash && next_next || *next_next == ')')
9809: /* MUTANT (rep_op) */        : next_backslash && next_next && *next_next != ')')
9811: /* MUTANT (rep_op) */    && (syntax & RE_NO_BK_VBAR ? *next == '|'
9811: /* MUTANT (rep_op) */    || (syntax & RE_NO_BK_VBAR ? *next != '|'
9811: /* MUTANT (rep_op) */    || (syntax & RE_NO_BK_VBAR ? *next == '&'
9812: /* MUTANT (rep_op) */        : next_backslash || next_next && *next_next == '|');
9812: /* MUTANT (rep_op) */        : next_backslash && next_next || *next_next == '|');
9812: /* MUTANT (rep_op) */        : next_backslash && next_next && *next_next != '|');
9812: /* MUTANT (rep_op) */        : next_backslash && next_next && *next_next == '&');
9822: /* MUTANT (del_stmt) */ /*     regnum_t regnum; */ 
9824: /* MUTANT (del_stmt) */ /*   int this_element; */ 
9826: /* MUTANT (rep_const) */  for (this_element = compile_stack.avail - 0;
9826: /* MUTANT (rep_const) */  for (this_element = compile_stack.avail - -1;
9826: /* MUTANT (rep_const) */  for (this_element = compile_stack.avail - ((1)+1);
9827: /* MUTANT (del_stmt) */ /*        this_element >= 0; */ 
9827: /* MUTANT (rep_op) */       this_element <= 0;
9827: /* MUTANT (rep_op) */       this_element < 0;
9827: /* MUTANT (rep_op) */       this_element > 0;
9827: /* MUTANT (rep_op) */       this_element == 0;
9827: /* MUTANT (rep_op) */       this_element != 0;
9827: /* MUTANT (rep_const) */       this_element >= 1;
9827: /* MUTANT (rep_const) */       this_element >= -1;
9828: /* MUTANT (rep_op) */       this_element++)
9829: /* MUTANT (rep_op) */    if (compile_stack.stack[this_element].regnum != regnum)
9829: /* MUTANT (negate) */    if(! (compile_stack.stack[this_element].regnum == regnum))
9832: /* MUTANT (del_stmt) */ /*   return false; */ 
9850: /* MUTANT (del_stmt) */ /*     RE_TRANSLATE_TYPE translate; */ 
9851: /* MUTANT (del_stmt) */ /*     reg_syntax_t syntax; */ 
9852: /* MUTANT (del_stmt) */ /*     unsigned char *b; */ 
9854: /* MUTANT (del_stmt) */ /*   unsigned this_char; */ 
9856: /* MUTANT (del_stmt) */ /*   const char *p = *p_ptr; */ 
9857: /* MUTANT (del_stmt) */ /*   unsigned int range_start, range_end; */ 
9859: /* MUTANT (rep_op) */  if (p != pend)
9859: /* MUTANT (negate) */  if(! (p == pend))
9870: /* MUTANT (del_stmt) */ /*   range_start = ((const unsigned char *) p)[-2]; */ 
9870: /* MUTANT (rep_const) */  range_start = ((const unsigned char *) p)[0];
9870: /* MUTANT (rep_const) */  range_start = ((const unsigned char *) p)[1];
9870: /* MUTANT (rep_const) */  range_start = ((const unsigned char *) p)[-1];
9870: /* MUTANT (rep_const) */  range_start = ((const unsigned char *) p)[((-2)+1)];
9870: /* MUTANT (rep_const) */  range_start = ((const unsigned char *) p)[((-2)-1)];
9871: /* MUTANT (del_stmt) */ /*   range_end   = ((const unsigned char *) p)[0]; */ 
9871: /* MUTANT (rep_const) */  range_end   = ((const unsigned char *) p)[1];
9871: /* MUTANT (rep_const) */  range_end   = ((const unsigned char *) p)[-1];
9875: /* MUTANT (del_stmt) */ /*   (*p_ptr)++; */ 
9875: /* MUTANT (rep_op) */  (*p_ptr)--;
9878: /* MUTANT (rep_op) */  if (range_start <= range_end)
9878: /* MUTANT (rep_op) */  if (range_start < range_end)
9878: /* MUTANT (rep_op) */  if (range_start >= range_end)
9878: /* MUTANT (rep_op) */  if (range_start == range_end)
9878: /* MUTANT (rep_op) */  if (range_start != range_end)
9878: /* MUTANT (negate) */  if(! (range_start > range_end))
9885: /* MUTANT (rep_op) */  for (this_char = range_start; this_char < range_end; this_char++)
9885: /* MUTANT (rep_op) */  for (this_char = range_start; this_char > range_end; this_char++)
9885: /* MUTANT (rep_op) */  for (this_char = range_start; this_char >= range_end; this_char++)
9885: /* MUTANT (rep_op) */  for (this_char = range_start; this_char == range_end; this_char++)
9885: /* MUTANT (rep_op) */  for (this_char = range_start; this_char != range_end; this_char++)
9885: /* MUTANT (rep_op) */  for (this_char = range_start; this_char <= range_end; this_char--)
9887: /* MUTANT (del_stmt) */ /*       SET_LIST_BIT (TRANSLATE (this_char)); */ 
9910: /* MUTANT (del_stmt) */ /*   int j, k; */ 
9918: /* MUTANT (rep_const) */  unsigned num_regs = 1;
9918: /* MUTANT (rep_const) */  unsigned num_regs = -1;
9920: /* MUTANT (del_stmt) */ /*   register char *fastmap = bufp->fastmap; */ 
9921: /* MUTANT (del_stmt) */ /*   unsigned char *pattern = bufp->buffer; */ 
9922: /* MUTANT (del_stmt) */ /*   unsigned char *p = pattern; */ 
9923: /* MUTANT (del_stmt) */ /*   register unsigned char *pend = pattern + bufp->used; */ 
9923: /* MUTANT (rep_op) */  register unsigned char *pend = pattern - bufp->used;
9923: /* MUTANT (rep_op) */  register unsigned char *pend = pattern * bufp->used;
9923: /* MUTANT (rep_op) */  register unsigned char *pend = pattern % bufp->used;
9938: /* MUTANT (del_stmt) */ /*   boolean succeed_n_p = false; */ 
9940: /* MUTANT (del_stmt) */ /*   assert (fastmap != NULL && p != NULL); */ 
9940: /* MUTANT (rep_op) */  assert (fastmap == NULL && p != NULL);
9940: /* MUTANT (rep_op) */  assert (fastmap != NULL || p != NULL);
9940: /* MUTANT (rep_op) */  assert (fastmap != NULL && p == NULL);
9942: /* MUTANT (del_stmt) */ /*   INIT_FAIL_STACK (); */ 
9943: /* MUTANT (del_stmt) */ /*   bzero (fastmap, 1 << BYTEWIDTH); */   /* Assume nothing's valid.  */
9943: /* MUTANT (rep_const) */  bzero (fastmap, 0 << BYTEWIDTH);  /* Assume nothing's valid.  */
9943: /* MUTANT (rep_const) */  bzero (fastmap, -1 << BYTEWIDTH);  /* Assume nothing's valid.  */
9943: /* MUTANT (rep_const) */  bzero (fastmap, ((1)+1) << BYTEWIDTH);  /* Assume nothing's valid.  */
9944: /* MUTANT (del_stmt) */ /*   bufp->fastmap_accurate = 1; */ 	    /* It will be when we're done.  */
9944: /* MUTANT (rep_const) */  bufp->fastmap_accurate = 0;	    /* It will be when we're done.  */
9944: /* MUTANT (rep_const) */  bufp->fastmap_accurate = -1;	    /* It will be when we're done.  */
9944: /* MUTANT (rep_const) */  bufp->fastmap_accurate = ((1)+1);	    /* It will be when we're done.  */
9945: /* MUTANT (del_stmt) */ /*   bufp->can_be_null = 0; */ 
9945: /* MUTANT (rep_const) */  bufp->can_be_null = 1;
9945: /* MUTANT (rep_const) */  bufp->can_be_null = -1;
9947: /* MUTANT (rep_const) */  while (0)
9947: /* MUTANT (rep_const) */  while (-1)
9947: /* MUTANT (rep_const) */  while (((1)+1))
9947: /* MUTANT (negate) */  while(! (1))
9949: /* MUTANT (rep_op) */      if (p != pend || *p == succeed)
9949: /* MUTANT (rep_op) */      if (p == pend && *p == succeed)
9949: /* MUTANT (rep_op) */      if (p == pend || *p != succeed)
9949: /* MUTANT (negate) */      if(! (p == pend || *p == succeed))
9952: /* MUTANT (negate) */	  if(! (!FAIL_STACK_EMPTY ()))
9954: /* MUTANT (del_stmt) */ /* 	      bufp->can_be_null |= path_can_be_null; */ 
9957: /* MUTANT (del_stmt) */ /* 	      path_can_be_null = true; */ 
9959: /* MUTANT (del_stmt) */ /* 	      p = fail_stack.stack[--fail_stack.avail].pointer; */ 
9959: /* MUTANT (rep_op) */	      p = fail_stack.stack[++fail_stack.avail].pointer;
9961: /* MUTANT (del_stmt) */ /* 	      continue; */ 
9968: /* MUTANT (rep_op) */      assert (p <= pend);
9968: /* MUTANT (rep_op) */      assert (p > pend);
9968: /* MUTANT (rep_op) */      assert (p >= pend);
9968: /* MUTANT (rep_op) */      assert (p == pend);
9968: /* MUTANT (rep_op) */      assert (p != pend);
9970: /* MUTANT (rep_op) */      switch (SWITCH_ENUM_CAST ((re_opcode_t) *p--))
9979: /* MUTANT (rep_const) */	  bufp->can_be_null = 0;
9979: /* MUTANT (rep_const) */	  bufp->can_be_null = -1;
9979: /* MUTANT (rep_const) */	  bufp->can_be_null = ((1)+1);
9980: /* MUTANT (del_stmt) */ /*           goto done; */ 
9987: /* MUTANT (rep_const) */          fastmap[p[0]] = 1;
9987: /* MUTANT (rep_const) */          fastmap[p[-1]] = 1;
9987: /* MUTANT (rep_const) */          fastmap[p[((1)+1)]] = 1;
9987: /* MUTANT (rep_const) */          fastmap[p[1]] = 0;
9987: /* MUTANT (rep_const) */          fastmap[p[1]] = -1;
9987: /* MUTANT (rep_const) */          fastmap[p[1]] = ((1)+1);
9988: /* MUTANT (del_stmt) */ /* 	  break; */ 
9992: /* MUTANT (rep_op) */          for (j = *p-- * BYTEWIDTH - 1; j >= 0; j--)
9992: /* MUTANT (rep_op) */          for (j = *p++ * BYTEWIDTH - 1; j <= 0; j--)
9992: /* MUTANT (rep_op) */          for (j = *p++ * BYTEWIDTH - 1; j < 0; j--)
9992: /* MUTANT (rep_op) */          for (j = *p++ * BYTEWIDTH - 1; j > 0; j--)
9992: /* MUTANT (rep_op) */          for (j = *p++ * BYTEWIDTH - 1; j == 0; j--)
9992: /* MUTANT (rep_op) */          for (j = *p++ * BYTEWIDTH - 1; j != 0; j--)
9992: /* MUTANT (rep_op) */          for (j = *p++ * BYTEWIDTH - 1; j >= 0; j++)
9992: /* MUTANT (rep_const) */          for (j = *p++ * BYTEWIDTH - 0; j >= 0; j--)
9992: /* MUTANT (rep_const) */          for (j = *p++ * BYTEWIDTH - -1; j >= 0; j--)
9992: /* MUTANT (rep_const) */          for (j = *p++ * BYTEWIDTH - ((1)+1); j >= 0; j--)
9992: /* MUTANT (rep_const) */          for (j = *p++ * BYTEWIDTH - 1; j >= 1; j--)
9992: /* MUTANT (rep_const) */          for (j = *p++ * BYTEWIDTH - 1; j >= -1; j--)
9993: /* MUTANT (rep_op) */	    if (p[j / BYTEWIDTH] & (1 << (j + BYTEWIDTH)))
9993: /* MUTANT (rep_op) */	    if (p[j / BYTEWIDTH] & (1 << (j - BYTEWIDTH)))
9993: /* MUTANT (rep_op) */	    if (p[j / BYTEWIDTH] & (1 << (j * BYTEWIDTH)))
9993: /* MUTANT (rep_const) */	    if (p[j / BYTEWIDTH] & (0 << (j % BYTEWIDTH)))
9993: /* MUTANT (rep_const) */	    if (p[j / BYTEWIDTH] & (-1 << (j % BYTEWIDTH)))
9993: /* MUTANT (rep_const) */	    if (p[j / BYTEWIDTH] & (((1)+1) << (j % BYTEWIDTH)))
9993: /* MUTANT (negate) */	    if(! (p[j / BYTEWIDTH] & (1 << (j % BYTEWIDTH))))
9994: /* MUTANT (rep_const) */              fastmap[j] = 0;
9994: /* MUTANT (rep_const) */              fastmap[j] = -1;
9994: /* MUTANT (rep_const) */              fastmap[j] = ((1)+1);
9995: /* MUTANT (del_stmt) */ /* 	  break; */ 
10000: /* MUTANT (rep_op) */	  for (j = *p * BYTEWIDTH; j <= (1 << BYTEWIDTH); j++)
10000: /* MUTANT (rep_op) */	  for (j = *p * BYTEWIDTH; j > (1 << BYTEWIDTH); j++)
10000: /* MUTANT (rep_op) */	  for (j = *p * BYTEWIDTH; j >= (1 << BYTEWIDTH); j++)
10000: /* MUTANT (rep_op) */	  for (j = *p * BYTEWIDTH; j == (1 << BYTEWIDTH); j++)
10000: /* MUTANT (rep_op) */	  for (j = *p * BYTEWIDTH; j != (1 << BYTEWIDTH); j++)
10000: /* MUTANT (rep_op) */	  for (j = *p * BYTEWIDTH; j < (1 << BYTEWIDTH); j--)
10000: /* MUTANT (rep_const) */	  for (j = *p * BYTEWIDTH; j < (0 << BYTEWIDTH); j++)
10000: /* MUTANT (rep_const) */	  for (j = *p * BYTEWIDTH; j < (-1 << BYTEWIDTH); j++)
10000: /* MUTANT (rep_const) */	  for (j = *p * BYTEWIDTH; j < (((1)+1) << BYTEWIDTH); j++)
10001: /* MUTANT (rep_const) */            fastmap[j] = 0;
10001: /* MUTANT (rep_const) */            fastmap[j] = -1;
10001: /* MUTANT (rep_const) */            fastmap[j] = ((1)+1);
10003: /* MUTANT (rep_op) */	  for (j = *p-- * BYTEWIDTH - 1; j >= 0; j--)
10003: /* MUTANT (rep_op) */	  for (j = *p++ * BYTEWIDTH - 1; j <= 0; j--)
10003: /* MUTANT (rep_op) */	  for (j = *p++ * BYTEWIDTH - 1; j < 0; j--)
10003: /* MUTANT (rep_op) */	  for (j = *p++ * BYTEWIDTH - 1; j > 0; j--)
10003: /* MUTANT (rep_op) */	  for (j = *p++ * BYTEWIDTH - 1; j == 0; j--)
10003: /* MUTANT (rep_op) */	  for (j = *p++ * BYTEWIDTH - 1; j != 0; j--)
10003: /* MUTANT (rep_op) */	  for (j = *p++ * BYTEWIDTH - 1; j >= 0; j++)
10003: /* MUTANT (rep_const) */	  for (j = *p++ * BYTEWIDTH - 0; j >= 0; j--)
10003: /* MUTANT (rep_const) */	  for (j = *p++ * BYTEWIDTH - -1; j >= 0; j--)
10003: /* MUTANT (rep_const) */	  for (j = *p++ * BYTEWIDTH - ((1)+1); j >= 0; j--)
10003: /* MUTANT (rep_const) */	  for (j = *p++ * BYTEWIDTH - 1; j >= 1; j--)
10003: /* MUTANT (rep_const) */	  for (j = *p++ * BYTEWIDTH - 1; j >= -1; j--)
10004: /* MUTANT (rep_op) */	    if (!(p[j / BYTEWIDTH] & (1 << (j + BYTEWIDTH))))
10004: /* MUTANT (rep_op) */	    if (!(p[j / BYTEWIDTH] & (1 << (j - BYTEWIDTH))))
10004: /* MUTANT (rep_op) */	    if (!(p[j / BYTEWIDTH] & (1 << (j * BYTEWIDTH))))
10004: /* MUTANT (rep_const) */	    if (!(p[j / BYTEWIDTH] & (0 << (j % BYTEWIDTH))))
10004: /* MUTANT (rep_const) */	    if (!(p[j / BYTEWIDTH] & (-1 << (j % BYTEWIDTH))))
10004: /* MUTANT (rep_const) */	    if (!(p[j / BYTEWIDTH] & (((1)+1) << (j % BYTEWIDTH))))
10004: /* MUTANT (negate) */	    if(! (!(p[j / BYTEWIDTH] & (1 << (j % BYTEWIDTH)))))
10005: /* MUTANT (rep_const) */              fastmap[j] = 0;
10005: /* MUTANT (rep_const) */              fastmap[j] = -1;
10005: /* MUTANT (rep_const) */              fastmap[j] = ((1)+1);
10006: /* MUTANT (del_stmt) */ /*           break; */ 
10010: /* MUTANT (rep_op) */	  for (j = 0; j <= (1 << BYTEWIDTH); j++)
10010: /* MUTANT (rep_op) */	  for (j = 0; j > (1 << BYTEWIDTH); j++)
10010: /* MUTANT (rep_op) */	  for (j = 0; j >= (1 << BYTEWIDTH); j++)
10010: /* MUTANT (rep_op) */	  for (j = 0; j == (1 << BYTEWIDTH); j++)
10010: /* MUTANT (rep_op) */	  for (j = 0; j != (1 << BYTEWIDTH); j++)
10010: /* MUTANT (rep_op) */	  for (j = 0; j < (1 << BYTEWIDTH); j--)
10010: /* MUTANT (rep_const) */	  for (j = 1; j < (1 << BYTEWIDTH); j++)
10010: /* MUTANT (rep_const) */	  for (j = -1; j < (1 << BYTEWIDTH); j++)
10010: /* MUTANT (rep_const) */	  for (j = 0; j < (0 << BYTEWIDTH); j++)
10010: /* MUTANT (rep_const) */	  for (j = 0; j < (-1 << BYTEWIDTH); j++)
10010: /* MUTANT (rep_const) */	  for (j = 0; j < (((1)+1) << BYTEWIDTH); j++)
10011: /* MUTANT (rep_op) */	    if (SYNTAX (j) != Sword)
10011: /* MUTANT (negate) */	    if(! (SYNTAX (j) == Sword))
10012: /* MUTANT (rep_const) */	      fastmap[j] = 0;
10012: /* MUTANT (rep_const) */	      fastmap[j] = -1;
10012: /* MUTANT (rep_const) */	      fastmap[j] = ((1)+1);
10013: /* MUTANT (del_stmt) */ /* 	  break; */ 
10017: /* MUTANT (rep_op) */	  for (j = 0; j <= (1 << BYTEWIDTH); j++)
10017: /* MUTANT (rep_op) */	  for (j = 0; j > (1 << BYTEWIDTH); j++)
10017: /* MUTANT (rep_op) */	  for (j = 0; j >= (1 << BYTEWIDTH); j++)
10017: /* MUTANT (rep_op) */	  for (j = 0; j == (1 << BYTEWIDTH); j++)
10017: /* MUTANT (rep_op) */	  for (j = 0; j != (1 << BYTEWIDTH); j++)
10017: /* MUTANT (rep_op) */	  for (j = 0; j < (1 << BYTEWIDTH); j--)
10017: /* MUTANT (rep_const) */	  for (j = 1; j < (1 << BYTEWIDTH); j++)
10017: /* MUTANT (rep_const) */	  for (j = -1; j < (1 << BYTEWIDTH); j++)
10017: /* MUTANT (rep_const) */	  for (j = 0; j < (0 << BYTEWIDTH); j++)
10017: /* MUTANT (rep_const) */	  for (j = 0; j < (-1 << BYTEWIDTH); j++)
10017: /* MUTANT (rep_const) */	  for (j = 0; j < (((1)+1) << BYTEWIDTH); j++)
10018: /* MUTANT (rep_op) */	    if (SYNTAX (j) == Sword)
10018: /* MUTANT (negate) */	    if(! (SYNTAX (j) != Sword))
10019: /* MUTANT (rep_const) */	      fastmap[j] = 0;
10019: /* MUTANT (rep_const) */	      fastmap[j] = -1;
10019: /* MUTANT (rep_const) */	      fastmap[j] = ((1)+1);
10020: /* MUTANT (del_stmt) */ /* 	  break; */ 
10025: /* MUTANT (del_stmt) */ /* 	    int fastmap_newline = fastmap['\n']; */ 
10028: /* MUTANT (rep_op) */	    for (j = 0; j <= (1 << BYTEWIDTH); j++)
10028: /* MUTANT (rep_op) */	    for (j = 0; j > (1 << BYTEWIDTH); j++)
10028: /* MUTANT (rep_op) */	    for (j = 0; j >= (1 << BYTEWIDTH); j++)
10028: /* MUTANT (rep_op) */	    for (j = 0; j == (1 << BYTEWIDTH); j++)
10028: /* MUTANT (rep_op) */	    for (j = 0; j != (1 << BYTEWIDTH); j++)
10028: /* MUTANT (rep_op) */	    for (j = 0; j < (1 << BYTEWIDTH); j--)
10028: /* MUTANT (rep_const) */	    for (j = 1; j < (1 << BYTEWIDTH); j++)
10028: /* MUTANT (rep_const) */	    for (j = -1; j < (1 << BYTEWIDTH); j++)
10028: /* MUTANT (rep_const) */	    for (j = 0; j < (0 << BYTEWIDTH); j++)
10028: /* MUTANT (rep_const) */	    for (j = 0; j < (-1 << BYTEWIDTH); j++)
10028: /* MUTANT (rep_const) */	    for (j = 0; j < (((1)+1) << BYTEWIDTH); j++)
10029: /* MUTANT (rep_const) */	      fastmap[j] = 0;
10029: /* MUTANT (rep_const) */	      fastmap[j] = -1;
10029: /* MUTANT (rep_const) */	      fastmap[j] = ((1)+1);
10032: /* MUTANT (negate) */	    if(! (!(bufp->syntax & RE_DOT_NEWLINE)))
10037: /* MUTANT (negate) */	    else if(! (bufp->can_be_null))
10041: /* MUTANT (del_stmt) */ /* 	    break; */ 
10046: /* MUTANT (rep_op) */	  k = *p--;
10047: /* MUTANT (rep_op) */	  for (j = 0; j <= (1 << BYTEWIDTH); j++)
10047: /* MUTANT (rep_op) */	  for (j = 0; j > (1 << BYTEWIDTH); j++)
10047: /* MUTANT (rep_op) */	  for (j = 0; j >= (1 << BYTEWIDTH); j++)
10047: /* MUTANT (rep_op) */	  for (j = 0; j == (1 << BYTEWIDTH); j++)
10047: /* MUTANT (rep_op) */	  for (j = 0; j != (1 << BYTEWIDTH); j++)
10047: /* MUTANT (rep_op) */	  for (j = 0; j < (1 << BYTEWIDTH); j--)
10047: /* MUTANT (rep_const) */	  for (j = 1; j < (1 << BYTEWIDTH); j++)
10047: /* MUTANT (rep_const) */	  for (j = -1; j < (1 << BYTEWIDTH); j++)
10047: /* MUTANT (rep_const) */	  for (j = 0; j < (0 << BYTEWIDTH); j++)
10047: /* MUTANT (rep_const) */	  for (j = 0; j < (-1 << BYTEWIDTH); j++)
10047: /* MUTANT (rep_const) */	  for (j = 0; j < (((1)+1) << BYTEWIDTH); j++)
10048: /* MUTANT (rep_op) */	    if (SYNTAX (j) != (enum syntaxcode) k)
10048: /* MUTANT (negate) */	    if(! (SYNTAX (j) == (enum syntaxcode) k))
10049: /* MUTANT (rep_const) */	      fastmap[j] = 0;
10049: /* MUTANT (rep_const) */	      fastmap[j] = -1;
10049: /* MUTANT (rep_const) */	      fastmap[j] = ((1)+1);
10050: /* MUTANT (del_stmt) */ /* 	  break; */ 
10054: /* MUTANT (rep_op) */	  k = *p--;
10055: /* MUTANT (rep_op) */	  for (j = 0; j <= (1 << BYTEWIDTH); j++)
10055: /* MUTANT (rep_op) */	  for (j = 0; j > (1 << BYTEWIDTH); j++)
10055: /* MUTANT (rep_op) */	  for (j = 0; j >= (1 << BYTEWIDTH); j++)
10055: /* MUTANT (rep_op) */	  for (j = 0; j == (1 << BYTEWIDTH); j++)
10055: /* MUTANT (rep_op) */	  for (j = 0; j != (1 << BYTEWIDTH); j++)
10055: /* MUTANT (rep_op) */	  for (j = 0; j < (1 << BYTEWIDTH); j--)
10055: /* MUTANT (rep_const) */	  for (j = 1; j < (1 << BYTEWIDTH); j++)
10055: /* MUTANT (rep_const) */	  for (j = -1; j < (1 << BYTEWIDTH); j++)
10055: /* MUTANT (rep_const) */	  for (j = 0; j < (0 << BYTEWIDTH); j++)
10055: /* MUTANT (rep_const) */	  for (j = 0; j < (-1 << BYTEWIDTH); j++)
10055: /* MUTANT (rep_const) */	  for (j = 0; j < (((1)+1) << BYTEWIDTH); j++)
10056: /* MUTANT (rep_op) */	    if (SYNTAX (j) == (enum syntaxcode) k)
10056: /* MUTANT (negate) */	    if(! (SYNTAX (j) != (enum syntaxcode) k))
10057: /* MUTANT (rep_const) */	      fastmap[j] = 0;
10057: /* MUTANT (rep_const) */	      fastmap[j] = -1;
10057: /* MUTANT (rep_const) */	      fastmap[j] = ((1)+1);
10058: /* MUTANT (del_stmt) */ /* 	  break; */ 
10092: /* MUTANT (del_stmt) */ /* 	  p += j; */ 
10092: /* MUTANT (rep_op) */	  p -= j;
10092: /* MUTANT (rep_op) */	  p *= j;
10092: /* MUTANT (rep_op) */	  p %= j;
10093: /* MUTANT (rep_op) */	  if (j <= 0)
10093: /* MUTANT (rep_op) */	  if (j < 0)
10093: /* MUTANT (rep_op) */	  if (j >= 0)
10093: /* MUTANT (rep_op) */	  if (j == 0)
10093: /* MUTANT (rep_op) */	  if (j != 0)
10093: /* MUTANT (rep_const) */	  if (j > 1)
10093: /* MUTANT (rep_const) */	  if (j > -1)
10093: /* MUTANT (negate) */	  if(! (j > 0))
10101: /* MUTANT (rep_op) */          if ((re_opcode_t) *p == on_failure_jump
10102: /* MUTANT (rep_op) */	      || (re_opcode_t) *p != succeed_n)
10102: /* MUTANT (rep_op) */	      && (re_opcode_t) *p == succeed_n)
10105: /* MUTANT (del_stmt) */ /*           p++; */ 
10105: /* MUTANT (rep_op) */          p--;
10106: /* MUTANT (del_stmt) */ /*           EXTRACT_NUMBER_AND_INCR (j, p); */ 
10107: /* MUTANT (del_stmt) */ /*           p += j; */ 
10107: /* MUTANT (rep_op) */          p -= j;
10107: /* MUTANT (rep_op) */          p *= j;
10107: /* MUTANT (rep_op) */          p %= j;
10111: /* MUTANT (rep_op) */	      || fail_stack.stack[fail_stack.avail - 1].pointer == p)
10111: /* MUTANT (rep_op) */	      && fail_stack.stack[fail_stack.avail - 1].pointer != p)
10111: /* MUTANT (rep_const) */	      && fail_stack.stack[fail_stack.avail - 0].pointer == p)
10111: /* MUTANT (rep_const) */	      && fail_stack.stack[fail_stack.avail - -1].pointer == p)
10111: /* MUTANT (rep_const) */	      && fail_stack.stack[fail_stack.avail - ((1)+1)].pointer == p)
10112: /* MUTANT (rep_op) */            fail_stack.avail++;
10114: /* MUTANT (del_stmt) */ /*           continue; */ 
10129: /* MUTANT (rep_op) */          if (p - j < pend)
10129: /* MUTANT (rep_op) */          if (p * j < pend)
10129: /* MUTANT (rep_op) */          if (p % j < pend)
10129: /* MUTANT (rep_op) */          if (p + j <= pend)
10129: /* MUTANT (rep_op) */          if (p + j > pend)
10129: /* MUTANT (rep_op) */          if (p + j >= pend)
10129: /* MUTANT (rep_op) */          if (p + j == pend)
10129: /* MUTANT (rep_op) */          if (p + j != pend)
10129: /* MUTANT (negate) */          if(! (p + j < pend))
10131: /* MUTANT (rep_op) */              if (!PUSH_PATTERN_OP (p - j, fail_stack))
10131: /* MUTANT (rep_op) */              if (!PUSH_PATTERN_OP (p * j, fail_stack))
10131: /* MUTANT (rep_op) */              if (!PUSH_PATTERN_OP (p % j, fail_stack))
10131: /* MUTANT (negate) */              if(! (!PUSH_PATTERN_OP (p + j, fail_stack)))
10133: /* MUTANT (del_stmt) */ /* 		  RESET_FAIL_STACK (); */ 
10134: /* MUTANT (del_stmt) */ /* 		  return -2; */ 
10134: /* MUTANT (rep_const) */		  return 0;
10134: /* MUTANT (rep_const) */		  return 1;
10134: /* MUTANT (rep_const) */		  return -1;
10134: /* MUTANT (rep_const) */		  return ((-2)+1);
10134: /* MUTANT (rep_const) */		  return ((-2)-1);
10138: /* MUTANT (rep_const) */            bufp->can_be_null = 0;
10138: /* MUTANT (rep_const) */            bufp->can_be_null = -1;
10138: /* MUTANT (rep_const) */            bufp->can_be_null = ((1)+1);
10140: /* MUTANT (negate) */          if(! (succeed_n_p))
10142: /* MUTANT (del_stmt) */ /*               EXTRACT_NUMBER_AND_INCR (k, p); */ 	/* Skip the n.  */
10143: /* MUTANT (del_stmt) */ /*               succeed_n_p = false; */ 
10151: /* MUTANT (rep_op) */          p -= 2;
10151: /* MUTANT (rep_op) */          p *= 2;
10151: /* MUTANT (rep_op) */          p %= 2;
10151: /* MUTANT (rep_const) */          p += 0;
10151: /* MUTANT (rep_const) */          p += 1;
10151: /* MUTANT (rep_const) */          p += -1;
10151: /* MUTANT (rep_const) */          p += ((2)+1);
10151: /* MUTANT (rep_const) */          p += ((2)-1);
10154: /* MUTANT (del_stmt) */ /*           EXTRACT_NUMBER_AND_INCR (k, p); */ 
10155: /* MUTANT (rep_op) */          if (k != 0)
10155: /* MUTANT (rep_const) */          if (k == 1)
10155: /* MUTANT (rep_const) */          if (k == -1)
10155: /* MUTANT (negate) */          if(! (k == 0))
10157: /* MUTANT (del_stmt) */ /*               p -= 4; */ 
10157: /* MUTANT (rep_op) */              p += 4;
10157: /* MUTANT (rep_op) */              p *= 4;
10157: /* MUTANT (rep_op) */              p %= 4;
10157: /* MUTANT (rep_const) */              p -= 0;
10157: /* MUTANT (rep_const) */              p -= 1;
10157: /* MUTANT (rep_const) */              p -= -1;
10157: /* MUTANT (rep_const) */              p -= ((4)+1);
10157: /* MUTANT (rep_const) */              p -= ((4)-1);
10158: /* MUTANT (del_stmt) */ /*   	      succeed_n_p = true; */   /* Spaghetti code alert.  */
10159: /* MUTANT (del_stmt) */ /*               goto handle_on_failure_jump; */ 
10165: /* MUTANT (rep_op) */          p -= 4;
10165: /* MUTANT (rep_op) */          p *= 4;
10165: /* MUTANT (rep_op) */          p %= 4;
10165: /* MUTANT (rep_const) */          p += 0;
10165: /* MUTANT (rep_const) */          p += 1;
10165: /* MUTANT (rep_const) */          p += -1;
10165: /* MUTANT (rep_const) */          p += ((4)+1);
10165: /* MUTANT (rep_const) */          p += ((4)-1);
10166: /* MUTANT (del_stmt) */ /*           continue; */ 
10171: /* MUTANT (rep_op) */	  p -= 2;
10171: /* MUTANT (rep_op) */	  p *= 2;
10171: /* MUTANT (rep_op) */	  p %= 2;
10171: /* MUTANT (rep_const) */	  p += 0;
10171: /* MUTANT (rep_const) */	  p += 1;
10171: /* MUTANT (rep_const) */	  p += -1;
10171: /* MUTANT (rep_const) */	  p += ((2)+1);
10171: /* MUTANT (rep_const) */	  p += ((2)-1);
10172: /* MUTANT (del_stmt) */ /* 	  continue; */ 
10186: /* MUTANT (del_stmt) */ /*       p = pend; */ 
10195: /* MUTANT (del_stmt) */ /*   return 0; */ 
10195: /* MUTANT (rep_const) */  return 1;
10195: /* MUTANT (rep_const) */  return -1;
10214: /* MUTANT (del_stmt) */ /*     struct re_registers *regs; */ 
10215: /* MUTANT (del_stmt) */ /*     unsigned num_regs; */ 
10216: /* MUTANT (del_stmt) */ /*     regoff_t *starts, *ends; */ 
10218: /* MUTANT (negate) */  if(! (num_regs))
10220: /* MUTANT (del_stmt) */ /*       bufp->regs_allocated = REGS_REALLOCATE; */ 
10221: /* MUTANT (del_stmt) */ /*       regs->num_regs = num_regs; */ 
10222: /* MUTANT (del_stmt) */ /*       regs->start = starts; */ 
10223: /* MUTANT (del_stmt) */ /*       regs->end = ends; */ 
10227: /* MUTANT (del_stmt) */ /*       bufp->regs_allocated = REGS_UNALLOCATED; */ 
10228: /* MUTANT (del_stmt) */ /*       regs->num_regs = 0; */ 
10228: /* MUTANT (rep_const) */      regs->num_regs = 1;
10228: /* MUTANT (rep_const) */      regs->num_regs = -1;
10229: /* MUTANT (del_stmt) */ /*       regs->start = regs->end = (regoff_t *) 0; */ 
10229: /* MUTANT (rep_const) */      regs->start = regs->end = (regoff_t *) 1;
10229: /* MUTANT (rep_const) */      regs->start = regs->end = (regoff_t *) -1;
10241: /* MUTANT (del_stmt) */ /*      const char *string; */ 
10242: /* MUTANT (del_stmt) */ /*      int size, startpos, range; */ 
10243: /* MUTANT (del_stmt) */ /*      struct re_registers *regs; */ 
10245: /* MUTANT (rep_const) */  return re_search_2 (bufp, NULL, 1, string, size, startpos, range,
10245: /* MUTANT (rep_const) */  return re_search_2 (bufp, NULL, -1, string, size, startpos, range,
10274: /* MUTANT (del_stmt) */ /*      const char *string1, *string2; */ 
10275: /* MUTANT (del_stmt) */ /*      int size1, size2; */ 
10276: /* MUTANT (del_stmt) */ /*      int startpos; */ 
10277: /* MUTANT (del_stmt) */ /*      int range; */ 
10278: /* MUTANT (del_stmt) */ /*      struct re_registers *regs; */ 
10279: /* MUTANT (del_stmt) */ /*      int stop; */ 
10281: /* MUTANT (del_stmt) */ /*   int val; */ 
10282: /* MUTANT (del_stmt) */ /*   register char *fastmap = bufp->fastmap; */ 
10283: /* MUTANT (del_stmt) */ /*   register RE_TRANSLATE_TYPE translate = bufp->translate; */ 
10284: /* MUTANT (del_stmt) */ /*   int total_size = size1 + size2; */ 
10284: /* MUTANT (rep_op) */  int total_size = size1 - size2;
10284: /* MUTANT (rep_op) */  int total_size = size1 * size2;
10284: /* MUTANT (rep_op) */  int total_size = size1 % size2;
10285: /* MUTANT (del_stmt) */ /*   int endpos = startpos + range; */ 
10285: /* MUTANT (rep_op) */  int endpos = startpos - range;
10285: /* MUTANT (rep_op) */  int endpos = startpos * range;
10285: /* MUTANT (rep_op) */  int endpos = startpos % range;
10288: /* MUTANT (rep_op) */  if (startpos <= 0 || startpos > total_size)
10288: /* MUTANT (rep_op) */  if (startpos > 0 || startpos > total_size)
10288: /* MUTANT (rep_op) */  if (startpos >= 0 || startpos > total_size)
10288: /* MUTANT (rep_op) */  if (startpos == 0 || startpos > total_size)
10288: /* MUTANT (rep_op) */  if (startpos != 0 || startpos > total_size)
10288: /* MUTANT (rep_op) */  if (startpos < 0 && startpos > total_size)
10288: /* MUTANT (rep_op) */  if (startpos < 0 || startpos <= total_size)
10288: /* MUTANT (rep_op) */  if (startpos < 0 || startpos < total_size)
10288: /* MUTANT (rep_op) */  if (startpos < 0 || startpos >= total_size)
10288: /* MUTANT (rep_op) */  if (startpos < 0 || startpos == total_size)
10288: /* MUTANT (rep_op) */  if (startpos < 0 || startpos != total_size)
10288: /* MUTANT (rep_const) */  if (startpos < 1 || startpos > total_size)
10288: /* MUTANT (rep_const) */  if (startpos < -1 || startpos > total_size)
10288: /* MUTANT (negate) */  if(! (startpos < 0 || startpos > total_size))
10289: /* MUTANT (rep_const) */    return 0;
10289: /* MUTANT (rep_const) */    return 1;
10289: /* MUTANT (rep_const) */    return ((-1)+1);
10289: /* MUTANT (rep_const) */    return ((-1)-1);
10294: /* MUTANT (rep_op) */  if (endpos <= 0)
10294: /* MUTANT (rep_op) */  if (endpos > 0)
10294: /* MUTANT (rep_op) */  if (endpos >= 0)
10294: /* MUTANT (rep_op) */  if (endpos == 0)
10294: /* MUTANT (rep_op) */  if (endpos != 0)
10294: /* MUTANT (rep_const) */  if (endpos < 1)
10294: /* MUTANT (rep_const) */  if (endpos < -1)
10294: /* MUTANT (negate) */  if(! (endpos < 0))
10295: /* MUTANT (rep_const) */    range = 1 - startpos;
10295: /* MUTANT (rep_const) */    range = -1 - startpos;
10296: /* MUTANT (rep_op) */  else if (endpos <= total_size)
10296: /* MUTANT (rep_op) */  else if (endpos < total_size)
10296: /* MUTANT (rep_op) */  else if (endpos >= total_size)
10296: /* MUTANT (rep_op) */  else if (endpos == total_size)
10296: /* MUTANT (rep_op) */  else if (endpos != total_size)
10296: /* MUTANT (negate) */  else if(! (endpos > total_size))
10301: /* MUTANT (rep_op) */  if (bufp->used <= 0 && (re_opcode_t) bufp->buffer[0] == begbuf && range > 0)
10301: /* MUTANT (rep_op) */  if (bufp->used < 0 && (re_opcode_t) bufp->buffer[0] == begbuf && range > 0)
10301: /* MUTANT (rep_op) */  if (bufp->used >= 0 && (re_opcode_t) bufp->buffer[0] == begbuf && range > 0)
10301: /* MUTANT (rep_op) */  if (bufp->used == 0 && (re_opcode_t) bufp->buffer[0] == begbuf && range > 0)
10301: /* MUTANT (rep_op) */  if (bufp->used != 0 && (re_opcode_t) bufp->buffer[0] == begbuf && range > 0)
10301: /* MUTANT (rep_op) */  if (bufp->used > 0 || (re_opcode_t) bufp->buffer[0] == begbuf && range > 0)
10301: /* MUTANT (rep_op) */  if (bufp->used > 0 && (re_opcode_t) bufp->buffer[0] != begbuf && range > 0)
10301: /* MUTANT (rep_op) */  if (bufp->used > 0 && (re_opcode_t) bufp->buffer[0] == begbuf || range > 0)
10301: /* MUTANT (rep_op) */  if (bufp->used > 0 && (re_opcode_t) bufp->buffer[0] == begbuf && range <= 0)
10301: /* MUTANT (rep_op) */  if (bufp->used > 0 && (re_opcode_t) bufp->buffer[0] == begbuf && range < 0)
10301: /* MUTANT (rep_op) */  if (bufp->used > 0 && (re_opcode_t) bufp->buffer[0] == begbuf && range >= 0)
10301: /* MUTANT (rep_op) */  if (bufp->used > 0 && (re_opcode_t) bufp->buffer[0] == begbuf && range == 0)
10301: /* MUTANT (rep_op) */  if (bufp->used > 0 && (re_opcode_t) bufp->buffer[0] == begbuf && range != 0)
10301: /* MUTANT (rep_const) */  if (bufp->used > 1 && (re_opcode_t) bufp->buffer[0] == begbuf && range > 0)
10301: /* MUTANT (rep_const) */  if (bufp->used > -1 && (re_opcode_t) bufp->buffer[0] == begbuf && range > 0)
10301: /* MUTANT (rep_const) */  if (bufp->used > 0 && (re_opcode_t) bufp->buffer[1] == begbuf && range > 0)
10301: /* MUTANT (rep_const) */  if (bufp->used > 0 && (re_opcode_t) bufp->buffer[-1] == begbuf && range > 0)
10301: /* MUTANT (rep_const) */  if (bufp->used > 0 && (re_opcode_t) bufp->buffer[0] == begbuf && range > 1)
10301: /* MUTANT (rep_const) */  if (bufp->used > 0 && (re_opcode_t) bufp->buffer[0] == begbuf && range > -1)
10301: /* MUTANT (negate) */  if(! (bufp->used > 0 && (re_opcode_t) bufp->buffer[0] == begbuf && range > 0))
10303: /* MUTANT (rep_op) */      if (startpos <= 0)
10303: /* MUTANT (rep_op) */      if (startpos < 0)
10303: /* MUTANT (rep_op) */      if (startpos >= 0)
10303: /* MUTANT (rep_op) */      if (startpos == 0)
10303: /* MUTANT (rep_op) */      if (startpos != 0)
10303: /* MUTANT (rep_const) */      if (startpos > 1)
10303: /* MUTANT (rep_const) */      if (startpos > -1)
10303: /* MUTANT (negate) */      if(! (startpos > 0))
10304: /* MUTANT (rep_const) */	return 0;
10304: /* MUTANT (rep_const) */	return 1;
10304: /* MUTANT (rep_const) */	return ((-1)+1);
10304: /* MUTANT (rep_const) */	return ((-1)-1);
10306: /* MUTANT (rep_const) */	range = 0;
10306: /* MUTANT (rep_const) */	range = -1;
10306: /* MUTANT (rep_const) */	range = ((1)+1);
10312: /* MUTANT (rep_op) */  if (bufp->used <= 0 && (re_opcode_t) bufp->buffer[0] == at_dot && range > 0)
10312: /* MUTANT (rep_op) */  if (bufp->used < 0 && (re_opcode_t) bufp->buffer[0] == at_dot && range > 0)
10312: /* MUTANT (rep_op) */  if (bufp->used >= 0 && (re_opcode_t) bufp->buffer[0] == at_dot && range > 0)
10312: /* MUTANT (rep_op) */  if (bufp->used == 0 && (re_opcode_t) bufp->buffer[0] == at_dot && range > 0)
10312: /* MUTANT (rep_op) */  if (bufp->used != 0 && (re_opcode_t) bufp->buffer[0] == at_dot && range > 0)
10312: /* MUTANT (rep_op) */  if (bufp->used > 0 || (re_opcode_t) bufp->buffer[0] == at_dot && range > 0)
10312: /* MUTANT (rep_op) */  if (bufp->used > 0 && (re_opcode_t) bufp->buffer[0] != at_dot && range > 0)
10312: /* MUTANT (rep_op) */  if (bufp->used > 0 && (re_opcode_t) bufp->buffer[0] == at_dot || range > 0)
10312: /* MUTANT (rep_op) */  if (bufp->used > 0 && (re_opcode_t) bufp->buffer[0] == at_dot && range <= 0)
10312: /* MUTANT (rep_op) */  if (bufp->used > 0 && (re_opcode_t) bufp->buffer[0] == at_dot && range < 0)
10312: /* MUTANT (rep_op) */  if (bufp->used > 0 && (re_opcode_t) bufp->buffer[0] == at_dot && range >= 0)
10312: /* MUTANT (rep_op) */  if (bufp->used > 0 && (re_opcode_t) bufp->buffer[0] == at_dot && range == 0)
10312: /* MUTANT (rep_op) */  if (bufp->used > 0 && (re_opcode_t) bufp->buffer[0] == at_dot && range != 0)
10312: /* MUTANT (rep_const) */  if (bufp->used > 1 && (re_opcode_t) bufp->buffer[0] == at_dot && range > 0)
10312: /* MUTANT (rep_const) */  if (bufp->used > -1 && (re_opcode_t) bufp->buffer[0] == at_dot && range > 0)
10312: /* MUTANT (rep_const) */  if (bufp->used > 0 && (re_opcode_t) bufp->buffer[1] == at_dot && range > 0)
10312: /* MUTANT (rep_const) */  if (bufp->used > 0 && (re_opcode_t) bufp->buffer[-1] == at_dot && range > 0)
10312: /* MUTANT (rep_const) */  if (bufp->used > 0 && (re_opcode_t) bufp->buffer[0] == at_dot && range > 1)
10312: /* MUTANT (rep_const) */  if (bufp->used > 0 && (re_opcode_t) bufp->buffer[0] == at_dot && range > -1)
10312: /* MUTANT (negate) */  if(! (bufp->used > 0 && (re_opcode_t) bufp->buffer[0] == at_dot && range > 0))
10314: /* MUTANT (del_stmt) */ /*       range = PT - startpos; */ 
10315: /* MUTANT (rep_op) */      if (range < 0)
10315: /* MUTANT (rep_op) */      if (range > 0)
10315: /* MUTANT (rep_op) */      if (range >= 0)
10315: /* MUTANT (rep_op) */      if (range == 0)
10315: /* MUTANT (rep_op) */      if (range != 0)
10315: /* MUTANT (rep_const) */      if (range <= 1)
10315: /* MUTANT (rep_const) */      if (range <= -1)
10315: /* MUTANT (negate) */      if(! (range <= 0))
10316: /* MUTANT (rep_const) */	return 0;
10316: /* MUTANT (rep_const) */	return 1;
10316: /* MUTANT (rep_const) */	return ((-1)+1);
10316: /* MUTANT (rep_const) */	return ((-1)-1);
10321: /* MUTANT (rep_op) */  if (fastmap || !bufp->fastmap_accurate)
10321: /* MUTANT (negate) */  if(! (fastmap && !bufp->fastmap_accurate))
10322: /* MUTANT (rep_op) */    if (re_compile_fastmap (bufp) != -2)
10322: /* MUTANT (rep_const) */    if (re_compile_fastmap (bufp) == 0)
10322: /* MUTANT (rep_const) */    if (re_compile_fastmap (bufp) == 1)
10322: /* MUTANT (rep_const) */    if (re_compile_fastmap (bufp) == -1)
10322: /* MUTANT (rep_const) */    if (re_compile_fastmap (bufp) == ((-2)+1))
10322: /* MUTANT (rep_const) */    if (re_compile_fastmap (bufp) == ((-2)-1))
10322: /* MUTANT (negate) */    if(! (re_compile_fastmap (bufp) == -2))
10323: /* MUTANT (rep_const) */      return 0;
10323: /* MUTANT (rep_const) */      return 1;
10323: /* MUTANT (rep_const) */      return -1;
10323: /* MUTANT (rep_const) */      return ((-2)+1);
10323: /* MUTANT (rep_const) */      return ((-2)-1);
10332: /* MUTANT (rep_op) */      if (fastmap || startpos < total_size && !bufp->can_be_null)
10332: /* MUTANT (rep_op) */      if (fastmap && startpos <= total_size && !bufp->can_be_null)
10332: /* MUTANT (rep_op) */      if (fastmap && startpos > total_size && !bufp->can_be_null)
10332: /* MUTANT (rep_op) */      if (fastmap && startpos >= total_size && !bufp->can_be_null)
10332: /* MUTANT (rep_op) */      if (fastmap && startpos == total_size && !bufp->can_be_null)
10332: /* MUTANT (rep_op) */      if (fastmap && startpos != total_size && !bufp->can_be_null)
10332: /* MUTANT (rep_op) */      if (fastmap && startpos < total_size || !bufp->can_be_null)
10332: /* MUTANT (negate) */      if(! (fastmap && startpos < total_size && !bufp->can_be_null))
10334: /* MUTANT (rep_op) */	  if (range <= 0)	/* Searching forwards.  */
10334: /* MUTANT (rep_op) */	  if (range < 0)	/* Searching forwards.  */
10334: /* MUTANT (rep_op) */	  if (range >= 0)	/* Searching forwards.  */
10334: /* MUTANT (rep_op) */	  if (range == 0)	/* Searching forwards.  */
10334: /* MUTANT (rep_op) */	  if (range != 0)	/* Searching forwards.  */
10334: /* MUTANT (rep_const) */	  if (range > 1)	/* Searching forwards.  */
10334: /* MUTANT (rep_const) */	  if (range > -1)	/* Searching forwards.  */
10334: /* MUTANT (negate) */	  if(! (range > 0))	/* Searching forwards.  */
10336: /* MUTANT (del_stmt) */ /* 	      register const char *d; */ 
10337: /* MUTANT (del_stmt) */ /* 	      register int lim = 0; */ 
10337: /* MUTANT (rep_const) */	      register int lim = 1;
10337: /* MUTANT (rep_const) */	      register int lim = -1;
10338: /* MUTANT (del_stmt) */ /* 	      int irange = range; */ 
10340: /* MUTANT (rep_op) */              if (startpos <= size1 && startpos + range >= size1)
10340: /* MUTANT (rep_op) */              if (startpos > size1 && startpos + range >= size1)
10340: /* MUTANT (rep_op) */              if (startpos >= size1 && startpos + range >= size1)
10340: /* MUTANT (rep_op) */              if (startpos == size1 && startpos + range >= size1)
10340: /* MUTANT (rep_op) */              if (startpos != size1 && startpos + range >= size1)
10340: /* MUTANT (rep_op) */              if (startpos < size1 || startpos + range >= size1)
10340: /* MUTANT (rep_op) */              if (startpos < size1 && startpos - range >= size1)
10340: /* MUTANT (rep_op) */              if (startpos < size1 && startpos * range >= size1)
10340: /* MUTANT (rep_op) */              if (startpos < size1 && startpos % range >= size1)
10340: /* MUTANT (rep_op) */              if (startpos < size1 && startpos + range <= size1)
10340: /* MUTANT (rep_op) */              if (startpos < size1 && startpos + range < size1)
10340: /* MUTANT (rep_op) */              if (startpos < size1 && startpos + range > size1)
10340: /* MUTANT (rep_op) */              if (startpos < size1 && startpos + range == size1)
10340: /* MUTANT (rep_op) */              if (startpos < size1 && startpos + range != size1)
10340: /* MUTANT (negate) */              if(! (startpos < size1 && startpos + range >= size1))
10343: /* MUTANT (del_stmt) */ /* 	      d = (startpos >= size1 ? string2 - size1 : string1) + startpos; */ 
10343: /* MUTANT (rep_op) */	      d = (startpos <= size1 ? string2 - size1 : string1) + startpos;
10343: /* MUTANT (rep_op) */	      d = (startpos < size1 ? string2 - size1 : string1) + startpos;
10343: /* MUTANT (rep_op) */	      d = (startpos > size1 ? string2 - size1 : string1) + startpos;
10343: /* MUTANT (rep_op) */	      d = (startpos == size1 ? string2 - size1 : string1) + startpos;
10343: /* MUTANT (rep_op) */	      d = (startpos != size1 ? string2 - size1 : string1) + startpos;
10343: /* MUTANT (rep_op) */	      d = (startpos >= size1 ? string2 - size1 : string1) - startpos;
10343: /* MUTANT (rep_op) */	      d = (startpos >= size1 ? string2 - size1 : string1) * startpos;
10343: /* MUTANT (rep_op) */	      d = (startpos >= size1 ? string2 - size1 : string1) % startpos;
10347: /* MUTANT (negate) */	      if(! (translate))
10348: /* MUTANT (rep_op) */                while (range <= lim
10348: /* MUTANT (rep_op) */                while (range < lim
10348: /* MUTANT (rep_op) */                while (range >= lim
10348: /* MUTANT (rep_op) */                while (range == lim
10348: /* MUTANT (rep_op) */                while (range != lim
10349: /* MUTANT (rep_op) */                       || !fastmap[(unsigned char)
10350: /* MUTANT (rep_op) */				   translate[(unsigned char) *d--]])
10351: /* MUTANT (rep_op) */                  range++;
10353: /* MUTANT (rep_op) */                while (range <= lim && !fastmap[(unsigned char) *d++])
10353: /* MUTANT (rep_op) */                while (range < lim && !fastmap[(unsigned char) *d++])
10353: /* MUTANT (rep_op) */                while (range >= lim && !fastmap[(unsigned char) *d++])
10353: /* MUTANT (rep_op) */                while (range == lim && !fastmap[(unsigned char) *d++])
10353: /* MUTANT (rep_op) */                while (range != lim && !fastmap[(unsigned char) *d++])
10353: /* MUTANT (rep_op) */                while (range > lim || !fastmap[(unsigned char) *d++])
10353: /* MUTANT (rep_op) */                while (range > lim && !fastmap[(unsigned char) *d--])
10353: /* MUTANT (negate) */                while(! (range > lim && !fastmap[(unsigned char) *d++]))
10354: /* MUTANT (rep_op) */                  range++;
10356: /* MUTANT (del_stmt) */ /* 	      startpos += irange - range; */ 
10356: /* MUTANT (rep_op) */	      startpos -= irange - range;
10356: /* MUTANT (rep_op) */	      startpos *= irange - range;
10356: /* MUTANT (rep_op) */	      startpos %= irange - range;
10360: /* MUTANT (rep_op) */	      register char c = (size1 != 0 || startpos >= size1
10360: /* MUTANT (rep_op) */	      register char c = (size1 == 0 && startpos >= size1
10360: /* MUTANT (rep_op) */	      register char c = (size1 == 0 || startpos <= size1
10360: /* MUTANT (rep_op) */	      register char c = (size1 == 0 || startpos < size1
10360: /* MUTANT (rep_op) */	      register char c = (size1 == 0 || startpos > size1
10360: /* MUTANT (rep_op) */	      register char c = (size1 == 0 || startpos == size1
10360: /* MUTANT (rep_op) */	      register char c = (size1 == 0 || startpos != size1
10360: /* MUTANT (rep_const) */	      register char c = (size1 == 1 || startpos >= size1
10360: /* MUTANT (rep_const) */	      register char c = (size1 == -1 || startpos >= size1
10364: /* MUTANT (negate) */	      if(! (!fastmap[(unsigned char) TRANSLATE (c)]))
10370: /* MUTANT (rep_op) */      if (range <= 0 && startpos == total_size && fastmap
10370: /* MUTANT (rep_op) */      if (range < 0 && startpos == total_size && fastmap
10370: /* MUTANT (rep_op) */      if (range > 0 && startpos == total_size && fastmap
10370: /* MUTANT (rep_op) */      if (range == 0 && startpos == total_size && fastmap
10370: /* MUTANT (rep_op) */      if (range != 0 && startpos == total_size && fastmap
10370: /* MUTANT (rep_op) */      if (range >= 0 || startpos == total_size && fastmap
10370: /* MUTANT (rep_op) */      if (range >= 0 && startpos != total_size && fastmap
10370: /* MUTANT (rep_op) */      if (range >= 0 && startpos == total_size || fastmap
10370: /* MUTANT (rep_const) */      if (range >= 1 && startpos == total_size && fastmap
10370: /* MUTANT (rep_const) */      if (range >= -1 && startpos == total_size && fastmap
10371: /* MUTANT (rep_op) */          || !bufp->can_be_null)
10372: /* MUTANT (rep_const) */	return 0;
10372: /* MUTANT (rep_const) */	return 1;
10372: /* MUTANT (rep_const) */	return ((-1)+1);
10372: /* MUTANT (rep_const) */	return ((-1)-1);
10378: /* MUTANT (rep_const) */      alloca (1);
10378: /* MUTANT (rep_const) */      alloca (-1);
10382: /* MUTANT (rep_op) */      if (val <= 0)
10382: /* MUTANT (rep_op) */      if (val < 0)
10382: /* MUTANT (rep_op) */      if (val > 0)
10382: /* MUTANT (rep_op) */      if (val == 0)
10382: /* MUTANT (rep_op) */      if (val != 0)
10382: /* MUTANT (rep_const) */      if (val >= 1)
10382: /* MUTANT (rep_const) */      if (val >= -1)
10382: /* MUTANT (negate) */      if(! (val >= 0))
10385: /* MUTANT (rep_op) */      if (val != -2)
10385: /* MUTANT (rep_const) */      if (val == 0)
10385: /* MUTANT (rep_const) */      if (val == 1)
10385: /* MUTANT (rep_const) */      if (val == -1)
10385: /* MUTANT (rep_const) */      if (val == ((-2)+1))
10385: /* MUTANT (rep_const) */      if (val == ((-2)-1))
10385: /* MUTANT (negate) */      if(! (val == -2))
10386: /* MUTANT (rep_const) */	return 0;
10386: /* MUTANT (rep_const) */	return 1;
10386: /* MUTANT (rep_const) */	return -1;
10386: /* MUTANT (rep_const) */	return ((-2)+1);
10386: /* MUTANT (rep_const) */	return ((-2)-1);
10389: /* MUTANT (negate) */      if(! (!range))
10391: /* MUTANT (rep_op) */      else if (range <= 0)
10391: /* MUTANT (rep_op) */      else if (range < 0)
10391: /* MUTANT (rep_op) */      else if (range >= 0)
10391: /* MUTANT (rep_op) */      else if (range == 0)
10391: /* MUTANT (rep_op) */      else if (range != 0)
10391: /* MUTANT (rep_const) */      else if (range > 1)
10391: /* MUTANT (rep_const) */      else if (range > -1)
10391: /* MUTANT (negate) */      else if(! (range > 0))
10393: /* MUTANT (del_stmt) */ /*           range--; */ 
10393: /* MUTANT (rep_op) */          range++;
10394: /* MUTANT (del_stmt) */ /*           startpos++; */ 
10394: /* MUTANT (rep_op) */          startpos--;
10398: /* MUTANT (del_stmt) */ /*           range++; */ 
10398: /* MUTANT (rep_op) */          range--;
10399: /* MUTANT (del_stmt) */ /*           startpos--; */ 
10399: /* MUTANT (rep_op) */          startpos++;
10402: /* MUTANT (rep_const) */  return 0;
10402: /* MUTANT (rep_const) */  return 1;
10402: /* MUTANT (rep_const) */  return ((-1)+1);
10402: /* MUTANT (rep_const) */  return ((-1)-1);
10410: /* MUTANT (rep_op) */   : ((regoff_t) ((ptr) - string2 - size1)))
10410: /* MUTANT (rep_op) */   : ((regoff_t) ((ptr) - string2 * size1)))
10410: /* MUTANT (rep_op) */   : ((regoff_t) ((ptr) - string2 % size1)))
10419: /* MUTANT (rep_op) */  while (d != dend)						    	\
10419: /* MUTANT (negate) */  while(! (d == dend))						    	\
10422: /* MUTANT (rep_op) */      if (dend != end_match_2) 						\
10422: /* MUTANT (negate) */      if(! (dend == end_match_2)) 						\
10441: /* MUTANT (rep_op) */  (SYNTAX ((d) != end1 ? *string2					\
10442: /* MUTANT (rep_op) */           : (d) != string2 - 1 ? *(end1 - 1) : *(d))			\
10442: /* MUTANT (rep_const) */           : (d) == string2 - 0 ? *(end1 - 1) : *(d))			\
10442: /* MUTANT (rep_const) */           : (d) == string2 - -1 ? *(end1 - 1) : *(d))			\
10442: /* MUTANT (rep_const) */           : (d) == string2 - ((1)+1) ? *(end1 - 1) : *(d))			\
10442: /* MUTANT (rep_const) */           : (d) == string2 - 1 ? *(end1 - 0) : *(d))			\
10442: /* MUTANT (rep_const) */           : (d) == string2 - 1 ? *(end1 - -1) : *(d))			\
10442: /* MUTANT (rep_const) */           : (d) == string2 - 1 ? *(end1 - ((1)+1)) : *(d))			\
10443: /* MUTANT (rep_op) */   != Sword)
10446: #if 1 /* MUTANT (rep_const) */
10446: #if -1 /* MUTANT (rep_const) */
10450: /* MUTANT (rep_op) */  (AT_STRINGS_BEG (d) && AT_STRINGS_END (d)				\
10451: /* MUTANT (rep_op) */   && WORDCHAR_P (d - 1) != WORDCHAR_P (d))
10451: /* MUTANT (rep_op) */   || WORDCHAR_P (d - 1) == WORDCHAR_P (d))
10451: /* MUTANT (rep_const) */   || WORDCHAR_P (d - 0) != WORDCHAR_P (d))
10451: /* MUTANT (rep_const) */   || WORDCHAR_P (d - -1) != WORDCHAR_P (d))
10451: /* MUTANT (rep_const) */   || WORDCHAR_P (d - ((1)+1)) != WORDCHAR_P (d))
10469: /* MUTANT (rep_const) */  } while (1)
10469: /* MUTANT (rep_const) */  } while (-1)
10469: /* MUTANT (negate) */  } while(! (0))
10471: #define FREE_VARIABLES() ((void)1)  /* MUTANT (rep_const) *//* Do nothing!  But inhibit gcc warning.  */
10471: #define FREE_VARIABLES() ((void)-1)  /* MUTANT (rep_const) *//* Do nothing!  But inhibit gcc warning.  */
10481: #define NO_HIGHEST_ACTIVE_REG (0 << BYTEWIDTH) /* MUTANT (rep_const) */
10481: #define NO_HIGHEST_ACTIVE_REG (-1 << BYTEWIDTH) /* MUTANT (rep_const) */
10481: #define NO_HIGHEST_ACTIVE_REG (((1)+1) << BYTEWIDTH) /* MUTANT (rep_const) */
10482: #define NO_LOWEST_ACTIVE_REG (NO_HIGHEST_ACTIVE_REG + 0) /* MUTANT (rep_const) */
10482: #define NO_LOWEST_ACTIVE_REG (NO_HIGHEST_ACTIVE_REG + -1) /* MUTANT (rep_const) */
10482: #define NO_LOWEST_ACTIVE_REG (NO_HIGHEST_ACTIVE_REG + ((1)+1)) /* MUTANT (rep_const) */
10492: /* MUTANT (del_stmt) */ /*      const char *string; */ 
10493: /* MUTANT (del_stmt) */ /*      int size, pos; */ 
10494: /* MUTANT (del_stmt) */ /*      struct re_registers *regs; */ 
10496: /* MUTANT (rep_const) */  int result = re_match_2_internal (bufp, NULL, 1, string, size,
10496: /* MUTANT (rep_const) */  int result = re_match_2_internal (bufp, NULL, -1, string, size,
10500: /* MUTANT (rep_const) */  alloca (1);
10500: /* MUTANT (rep_const) */  alloca (-1);
10535: /* MUTANT (del_stmt) */ /*      const char *string1, *string2; */ 
10536: /* MUTANT (del_stmt) */ /*      int size1, size2; */ 
10537: /* MUTANT (del_stmt) */ /*      int pos; */ 
10538: /* MUTANT (del_stmt) */ /*      struct re_registers *regs; */ 
10539: /* MUTANT (del_stmt) */ /*      int stop; */ 
10545: /* MUTANT (rep_const) */  alloca (1);
10545: /* MUTANT (rep_const) */  alloca (-1);
10556: /* MUTANT (del_stmt) */ /*      const char *string1, *string2; */ 
10557: /* MUTANT (del_stmt) */ /*      int size1, size2; */ 
10558: /* MUTANT (del_stmt) */ /*      int pos; */ 
10559: /* MUTANT (del_stmt) */ /*      struct re_registers *regs; */ 
10560: /* MUTANT (del_stmt) */ /*      int stop; */ 
10563: /* MUTANT (del_stmt) */ /*   int mcnt; */ 
10564: /* MUTANT (del_stmt) */ /*   unsigned char *p1; */ 
10567: /* MUTANT (del_stmt) */ /*   const char *end1, *end2; */ 
10571: /* MUTANT (del_stmt) */ /*   const char *end_match_1, *end_match_2; */ 
10574: /* MUTANT (del_stmt) */ /*   const char *d, *dend; */ 
10577: /* MUTANT (del_stmt) */ /*   unsigned char *p = bufp->buffer; */ 
10578: /* MUTANT (del_stmt) */ /*   register unsigned char *pend = p + bufp->used; */ 
10578: /* MUTANT (rep_op) */  register unsigned char *pend = p - bufp->used;
10578: /* MUTANT (rep_op) */  register unsigned char *pend = p * bufp->used;
10578: /* MUTANT (rep_op) */  register unsigned char *pend = p % bufp->used;
10582: /* MUTANT (del_stmt) */ /*   unsigned char *just_past_start_mem = 0; */ 
10582: /* MUTANT (rep_const) */  unsigned char *just_past_start_mem = 1;
10582: /* MUTANT (rep_const) */  unsigned char *just_past_start_mem = -1;
10585: /* MUTANT (del_stmt) */ /*   RE_TRANSLATE_TYPE translate = bufp->translate; */ 
10600: /* MUTANT (rep_const) */  static unsigned failure_id = 1;
10600: /* MUTANT (rep_const) */  static unsigned failure_id = -1;
10601: /* MUTANT (del_stmt) */ /*   unsigned nfailure_points_pushed = 0, nfailure_points_popped = 0; */ 
10601: /* MUTANT (rep_const) */  unsigned nfailure_points_pushed = 1, nfailure_points_popped = 0;
10601: /* MUTANT (rep_const) */  unsigned nfailure_points_pushed = -1, nfailure_points_popped = 0;
10601: /* MUTANT (rep_const) */  unsigned nfailure_points_pushed = 0, nfailure_points_popped = 1;
10601: /* MUTANT (rep_const) */  unsigned nfailure_points_pushed = 0, nfailure_points_popped = -1;
10613: /* MUTANT (rep_op) */  size_t num_regs = bufp->re_nsub - 1;
10613: /* MUTANT (rep_op) */  size_t num_regs = bufp->re_nsub * 1;
10613: /* MUTANT (rep_op) */  size_t num_regs = bufp->re_nsub % 1;
10613: /* MUTANT (rep_const) */  size_t num_regs = bufp->re_nsub + 0;
10613: /* MUTANT (rep_const) */  size_t num_regs = bufp->re_nsub + -1;
10613: /* MUTANT (rep_const) */  size_t num_regs = bufp->re_nsub + ((1)+1);
10616: /* MUTANT (del_stmt) */ /*   active_reg_t lowest_active_reg = NO_LOWEST_ACTIVE_REG; */ 
10617: /* MUTANT (del_stmt) */ /*   active_reg_t highest_active_reg = NO_HIGHEST_ACTIVE_REG; */ 
10669: /* MUTANT (del_stmt) */ /*   int set_regs_matched_done = 0; */ 
10669: /* MUTANT (rep_const) */  int set_regs_matched_done = 1;
10669: /* MUTANT (rep_const) */  int set_regs_matched_done = -1;
10674: /* MUTANT (del_stmt) */ /*   register_info_type *reg_info_dummy; */ 
10679: /* MUTANT (rep_const) */  unsigned num_regs_pushed = 1;
10679: /* MUTANT (rep_const) */  unsigned num_regs_pushed = -1;
10684: /* MUTANT (del_stmt) */ /*   INIT_FAIL_STACK (); */ 
10692: /* MUTANT (negate) */  if(! (bufp->re_nsub))
10694: /* MUTANT (del_stmt) */ /*       regstart = REGEX_TALLOC (num_regs, const char *); */ 
10695: /* MUTANT (del_stmt) */ /*       regend = REGEX_TALLOC (num_regs, const char *); */ 
10696: /* MUTANT (del_stmt) */ /*       old_regstart = REGEX_TALLOC (num_regs, const char *); */ 
10697: /* MUTANT (del_stmt) */ /*       old_regend = REGEX_TALLOC (num_regs, const char *); */ 
10698: /* MUTANT (del_stmt) */ /*       best_regstart = REGEX_TALLOC (num_regs, const char *); */ 
10699: /* MUTANT (del_stmt) */ /*       best_regend = REGEX_TALLOC (num_regs, const char *); */ 
10700: /* MUTANT (del_stmt) */ /*       reg_info = REGEX_TALLOC (num_regs, register_info_type); */ 
10701: /* MUTANT (del_stmt) */ /*       reg_dummy = REGEX_TALLOC (num_regs, const char *); */ 
10702: /* MUTANT (del_stmt) */ /*       reg_info_dummy = REGEX_TALLOC (num_regs, register_info_type); */ 
10704: /* MUTANT (rep_op) */      if (!(regstart || regend && old_regstart && old_regend && reg_info
10704: /* MUTANT (rep_op) */      if (!(regstart && regend || old_regstart && old_regend && reg_info
10704: /* MUTANT (rep_op) */      if (!(regstart && regend && old_regstart || old_regend && reg_info
10704: /* MUTANT (rep_op) */      if (!(regstart && regend && old_regstart && old_regend || reg_info
10705: /* MUTANT (rep_op) */            || best_regstart && best_regend && reg_dummy && reg_info_dummy))
10705: /* MUTANT (rep_op) */            && best_regstart || best_regend && reg_dummy && reg_info_dummy))
10705: /* MUTANT (rep_op) */            && best_regstart && best_regend || reg_dummy && reg_info_dummy))
10705: /* MUTANT (rep_op) */            && best_regstart && best_regend && reg_dummy || reg_info_dummy))
10707: /* MUTANT (del_stmt) */ /*           FREE_VARIABLES (); */ 
10708: /* MUTANT (del_stmt) */ /*           return -2; */ 
10708: /* MUTANT (rep_const) */          return 0;
10708: /* MUTANT (rep_const) */          return 1;
10708: /* MUTANT (rep_const) */          return -1;
10708: /* MUTANT (rep_const) */          return ((-2)+1);
10708: /* MUTANT (rep_const) */          return ((-2)-1);
10717: /* MUTANT (del_stmt) */ /*       reg_info = reg_info_dummy = (register_info_type *) NULL; */ 
10722: /* MUTANT (rep_op) */  if (pos <= 0 || pos > size1 + size2)
10722: /* MUTANT (rep_op) */  if (pos > 0 || pos > size1 + size2)
10722: /* MUTANT (rep_op) */  if (pos >= 0 || pos > size1 + size2)
10722: /* MUTANT (rep_op) */  if (pos == 0 || pos > size1 + size2)
10722: /* MUTANT (rep_op) */  if (pos != 0 || pos > size1 + size2)
10722: /* MUTANT (rep_op) */  if (pos < 0 && pos > size1 + size2)
10722: /* MUTANT (rep_op) */  if (pos < 0 || pos <= size1 + size2)
10722: /* MUTANT (rep_op) */  if (pos < 0 || pos < size1 + size2)
10722: /* MUTANT (rep_op) */  if (pos < 0 || pos >= size1 + size2)
10722: /* MUTANT (rep_op) */  if (pos < 0 || pos == size1 + size2)
10722: /* MUTANT (rep_op) */  if (pos < 0 || pos != size1 + size2)
10722: /* MUTANT (rep_op) */  if (pos < 0 || pos > size1 - size2)
10722: /* MUTANT (rep_op) */  if (pos < 0 || pos > size1 * size2)
10722: /* MUTANT (rep_op) */  if (pos < 0 || pos > size1 % size2)
10722: /* MUTANT (rep_const) */  if (pos < 1 || pos > size1 + size2)
10722: /* MUTANT (rep_const) */  if (pos < -1 || pos > size1 + size2)
10722: /* MUTANT (negate) */  if(! (pos < 0 || pos > size1 + size2))
10724: /* MUTANT (del_stmt) */ /*       FREE_VARIABLES (); */ 
10725: /* MUTANT (del_stmt) */ /*       return -1; */ 
10725: /* MUTANT (rep_const) */      return 0;
10725: /* MUTANT (rep_const) */      return 1;
10725: /* MUTANT (rep_const) */      return ((-1)+1);
10725: /* MUTANT (rep_const) */      return ((-1)-1);
10731: /* MUTANT (rep_op) */  for (mcnt = 1; (unsigned) mcnt <= num_regs; mcnt++)
10731: /* MUTANT (rep_op) */  for (mcnt = 1; (unsigned) mcnt > num_regs; mcnt++)
10731: /* MUTANT (rep_op) */  for (mcnt = 1; (unsigned) mcnt >= num_regs; mcnt++)
10731: /* MUTANT (rep_op) */  for (mcnt = 1; (unsigned) mcnt == num_regs; mcnt++)
10731: /* MUTANT (rep_op) */  for (mcnt = 1; (unsigned) mcnt != num_regs; mcnt++)
10731: /* MUTANT (rep_op) */  for (mcnt = 1; (unsigned) mcnt < num_regs; mcnt--)
10731: /* MUTANT (rep_const) */  for (mcnt = 0; (unsigned) mcnt < num_regs; mcnt++)
10731: /* MUTANT (rep_const) */  for (mcnt = -1; (unsigned) mcnt < num_regs; mcnt++)
10731: /* MUTANT (rep_const) */  for (mcnt = ((1)+1); (unsigned) mcnt < num_regs; mcnt++)
10736: /* MUTANT (del_stmt) */ /*       REG_MATCH_NULL_STRING_P (reg_info[mcnt]) = MATCH_NULL_UNSET_VALUE; */ 
10737: /* MUTANT (del_stmt) */ /*       IS_ACTIVE (reg_info[mcnt]) = 0; */ 
10737: /* MUTANT (rep_const) */      IS_ACTIVE (reg_info[mcnt]) = 1;
10737: /* MUTANT (rep_const) */      IS_ACTIVE (reg_info[mcnt]) = -1;
10738: /* MUTANT (del_stmt) */ /*       MATCHED_SOMETHING (reg_info[mcnt]) = 0; */ 
10738: /* MUTANT (rep_const) */      MATCHED_SOMETHING (reg_info[mcnt]) = 1;
10738: /* MUTANT (rep_const) */      MATCHED_SOMETHING (reg_info[mcnt]) = -1;
10739: /* MUTANT (del_stmt) */ /*       EVER_MATCHED_SOMETHING (reg_info[mcnt]) = 0; */ 
10739: /* MUTANT (rep_const) */      EVER_MATCHED_SOMETHING (reg_info[mcnt]) = 1;
10739: /* MUTANT (rep_const) */      EVER_MATCHED_SOMETHING (reg_info[mcnt]) = -1;
10744: /* MUTANT (rep_op) */  if (size2 != 0 && string1 != NULL)
10744: /* MUTANT (rep_op) */  if (size2 == 0 || string1 != NULL)
10744: /* MUTANT (rep_op) */  if (size2 == 0 && string1 == NULL)
10744: /* MUTANT (rep_const) */  if (size2 == 1 && string1 != NULL)
10744: /* MUTANT (rep_const) */  if (size2 == -1 && string1 != NULL)
10744: /* MUTANT (negate) */  if(! (size2 == 0 && string1 != NULL))
10746: /* MUTANT (del_stmt) */ /*       string2 = string1; */ 
10747: /* MUTANT (del_stmt) */ /*       size2 = size1; */ 
10748: /* MUTANT (del_stmt) */ /*       string1 = 0; */ 
10748: /* MUTANT (rep_const) */      string1 = 1;
10748: /* MUTANT (rep_const) */      string1 = -1;
10749: /* MUTANT (del_stmt) */ /*       size1 = 0; */ 
10749: /* MUTANT (rep_const) */      size1 = 1;
10749: /* MUTANT (rep_const) */      size1 = -1;
10751: /* MUTANT (rep_op) */  end1 = string1 - size1;
10751: /* MUTANT (rep_op) */  end1 = string1 * size1;
10751: /* MUTANT (rep_op) */  end1 = string1 % size1;
10752: /* MUTANT (del_stmt) */ /*   end2 = string2 + size2; */ 
10752: /* MUTANT (rep_op) */  end2 = string2 - size2;
10752: /* MUTANT (rep_op) */  end2 = string2 * size2;
10752: /* MUTANT (rep_op) */  end2 = string2 % size2;
10755: /* MUTANT (rep_op) */  if (stop < size1)
10755: /* MUTANT (rep_op) */  if (stop > size1)
10755: /* MUTANT (rep_op) */  if (stop >= size1)
10755: /* MUTANT (rep_op) */  if (stop == size1)
10755: /* MUTANT (rep_op) */  if (stop != size1)
10755: /* MUTANT (negate) */  if(! (stop <= size1))
10757: /* MUTANT (del_stmt) */ /*       end_match_1 = string1 + stop; */ 
10757: /* MUTANT (rep_op) */      end_match_1 = string1 - stop;
10757: /* MUTANT (rep_op) */      end_match_1 = string1 * stop;
10757: /* MUTANT (rep_op) */      end_match_1 = string1 % stop;
10758: /* MUTANT (del_stmt) */ /*       end_match_2 = string2; */ 
10762: /* MUTANT (del_stmt) */ /*       end_match_1 = end1; */ 
10763: /* MUTANT (del_stmt) */ /*       end_match_2 = string2 + stop - size1; */ 
10763: /* MUTANT (rep_op) */      end_match_2 = string2 - stop - size1;
10763: /* MUTANT (rep_op) */      end_match_2 = string2 * stop - size1;
10763: /* MUTANT (rep_op) */      end_match_2 = string2 % stop - size1;
10772: /* MUTANT (rep_op) */  if (size1 <= 0 && pos <= size1)
10772: /* MUTANT (rep_op) */  if (size1 < 0 && pos <= size1)
10772: /* MUTANT (rep_op) */  if (size1 >= 0 && pos <= size1)
10772: /* MUTANT (rep_op) */  if (size1 == 0 && pos <= size1)
10772: /* MUTANT (rep_op) */  if (size1 != 0 && pos <= size1)
10772: /* MUTANT (rep_op) */  if (size1 > 0 || pos <= size1)
10772: /* MUTANT (rep_op) */  if (size1 > 0 && pos < size1)
10772: /* MUTANT (rep_op) */  if (size1 > 0 && pos > size1)
10772: /* MUTANT (rep_op) */  if (size1 > 0 && pos >= size1)
10772: /* MUTANT (rep_op) */  if (size1 > 0 && pos == size1)
10772: /* MUTANT (rep_op) */  if (size1 > 0 && pos != size1)
10772: /* MUTANT (rep_const) */  if (size1 > 1 && pos <= size1)
10772: /* MUTANT (rep_const) */  if (size1 > -1 && pos <= size1)
10772: /* MUTANT (negate) */  if(! (size1 > 0 && pos <= size1))
10774: /* MUTANT (del_stmt) */ /*       d = string1 + pos; */ 
10774: /* MUTANT (rep_op) */      d = string1 - pos;
10774: /* MUTANT (rep_op) */      d = string1 * pos;
10774: /* MUTANT (rep_op) */      d = string1 % pos;
10775: /* MUTANT (del_stmt) */ /*       dend = end_match_1; */ 
10779: /* MUTANT (del_stmt) */ /*       d = string2 + pos - size1; */ 
10779: /* MUTANT (rep_op) */      d = string2 - pos - size1;
10779: /* MUTANT (rep_op) */      d = string2 * pos - size1;
10779: /* MUTANT (rep_op) */      d = string2 % pos - size1;
10780: /* MUTANT (del_stmt) */ /*       dend = end_match_2; */ 
10784: /* MUTANT (del_stmt) */ /*   DEBUG_PRINT_COMPILED_PATTERN (bufp, p, pend); */ 
10785: /* MUTANT (del_stmt) */ /*   DEBUG_PRINT1 ("The string to match is: `"); */ 
10786: /* MUTANT (del_stmt) */ /*   DEBUG_PRINT_DOUBLE_STRING (d, string1, size1, string2, size2); */ 
10787: /* MUTANT (del_stmt) */ /*   DEBUG_PRINT1 ("'\n"); */ 
10800: /* MUTANT (rep_op) */      if (p != pend)
10800: /* MUTANT (negate) */      if(! (p == pend))
10802: /* MUTANT (del_stmt) */ /*           DEBUG_PRINT1 ("end of pattern ... "); */ 
10806: /* MUTANT (rep_op) */          if (d == end_match_2)
10806: /* MUTANT (negate) */          if(! (d != end_match_2))
10811: /* MUTANT (rep_op) */				    != MATCHING_IN_FIRST_STRING);
10813: /* MUTANT (del_stmt) */ /* 	      boolean best_match_p; */ 
10817: /* MUTANT (negate) */	      if(! (same_str_p))
10818: /* MUTANT (rep_op) */		best_match_p = d <= match_end;
10818: /* MUTANT (rep_op) */		best_match_p = d < match_end;
10818: /* MUTANT (rep_op) */		best_match_p = d >= match_end;
10818: /* MUTANT (rep_op) */		best_match_p = d == match_end;
10818: /* MUTANT (rep_op) */		best_match_p = d != match_end;
10822: /* MUTANT (del_stmt) */ /*               DEBUG_PRINT1 ("backtracking.\n"); */ 
10824: /* MUTANT (negate) */              if(! (!FAIL_STACK_EMPTY ()))
10828: /* MUTANT (rep_op) */                  if (!best_regs_set && best_match_p)
10828: /* MUTANT (negate) */                  if(! (!best_regs_set || best_match_p))
10830: /* MUTANT (del_stmt) */ /*                       best_regs_set = true; */ 
10831: /* MUTANT (del_stmt) */ /*                       match_end = d; */ 
10833: /* MUTANT (del_stmt) */ /*                       DEBUG_PRINT1 ("\nSAVING match as best so far.\n"); */ 
10835: /* MUTANT (rep_op) */                      for (mcnt = 1; (unsigned) mcnt <= num_regs; mcnt++)
10835: /* MUTANT (rep_op) */                      for (mcnt = 1; (unsigned) mcnt > num_regs; mcnt++)
10835: /* MUTANT (rep_op) */                      for (mcnt = 1; (unsigned) mcnt >= num_regs; mcnt++)
10835: /* MUTANT (rep_op) */                      for (mcnt = 1; (unsigned) mcnt == num_regs; mcnt++)
10835: /* MUTANT (rep_op) */                      for (mcnt = 1; (unsigned) mcnt != num_regs; mcnt++)
10835: /* MUTANT (rep_op) */                      for (mcnt = 1; (unsigned) mcnt < num_regs; mcnt--)
10835: /* MUTANT (rep_const) */                      for (mcnt = 0; (unsigned) mcnt < num_regs; mcnt++)
10835: /* MUTANT (rep_const) */                      for (mcnt = -1; (unsigned) mcnt < num_regs; mcnt++)
10835: /* MUTANT (rep_const) */                      for (mcnt = ((1)+1); (unsigned) mcnt < num_regs; mcnt++)
10837: /* MUTANT (del_stmt) */ /*                           best_regstart[mcnt] = regstart[mcnt]; */ 
10838: /* MUTANT (del_stmt) */ /*                           best_regend[mcnt] = regend[mcnt]; */ 
10847: /* MUTANT (rep_op) */              else if (best_regs_set || !best_match_p)
10847: /* MUTANT (negate) */              else if(! (best_regs_set && !best_match_p))
10857: /* MUTANT (del_stmt) */ /*                   d = match_end; */ 
10858: /* MUTANT (rep_op) */                  dend = ((d <= string1 && d <= end1)
10858: /* MUTANT (rep_op) */                  dend = ((d < string1 && d <= end1)
10858: /* MUTANT (rep_op) */                  dend = ((d > string1 && d <= end1)
10858: /* MUTANT (rep_op) */                  dend = ((d == string1 && d <= end1)
10858: /* MUTANT (rep_op) */                  dend = ((d != string1 && d <= end1)
10858: /* MUTANT (rep_op) */                  dend = ((d >= string1 || d <= end1)
10858: /* MUTANT (rep_op) */                  dend = ((d >= string1 && d < end1)
10858: /* MUTANT (rep_op) */                  dend = ((d >= string1 && d > end1)
10858: /* MUTANT (rep_op) */                  dend = ((d >= string1 && d >= end1)
10858: /* MUTANT (rep_op) */                  dend = ((d >= string1 && d == end1)
10858: /* MUTANT (rep_op) */                  dend = ((d >= string1 && d != end1)
10861: /* MUTANT (rep_op) */		  for (mcnt = 1; (unsigned) mcnt <= num_regs; mcnt++)
10861: /* MUTANT (rep_op) */		  for (mcnt = 1; (unsigned) mcnt > num_regs; mcnt++)
10861: /* MUTANT (rep_op) */		  for (mcnt = 1; (unsigned) mcnt >= num_regs; mcnt++)
10861: /* MUTANT (rep_op) */		  for (mcnt = 1; (unsigned) mcnt == num_regs; mcnt++)
10861: /* MUTANT (rep_op) */		  for (mcnt = 1; (unsigned) mcnt != num_regs; mcnt++)
10861: /* MUTANT (rep_op) */		  for (mcnt = 1; (unsigned) mcnt < num_regs; mcnt--)
10861: /* MUTANT (rep_const) */		  for (mcnt = 0; (unsigned) mcnt < num_regs; mcnt++)
10861: /* MUTANT (rep_const) */		  for (mcnt = -1; (unsigned) mcnt < num_regs; mcnt++)
10861: /* MUTANT (rep_const) */		  for (mcnt = ((1)+1); (unsigned) mcnt < num_regs; mcnt++)
10863: /* MUTANT (del_stmt) */ /* 		      regstart[mcnt] = best_regstart[mcnt]; */ 
10864: /* MUTANT (del_stmt) */ /* 		      regend[mcnt] = best_regend[mcnt]; */ 
10873: /* MUTANT (rep_op) */          if (regs || !bufp->no_sub)
10873: /* MUTANT (negate) */          if(! (regs && !bufp->no_sub))
10876: /* MUTANT (rep_op) */              if (bufp->regs_allocated != REGS_UNALLOCATED)
10876: /* MUTANT (negate) */              if(! (bufp->regs_allocated == REGS_UNALLOCATED))
10880: /* MUTANT (del_stmt) */ /*                   regs->num_regs = MAX (RE_NREGS, num_regs + 1); */ 
10880: /* MUTANT (rep_op) */                  regs->num_regs = MAX (RE_NREGS, num_regs - 1);
10880: /* MUTANT (rep_op) */                  regs->num_regs = MAX (RE_NREGS, num_regs * 1);
10880: /* MUTANT (rep_op) */                  regs->num_regs = MAX (RE_NREGS, num_regs % 1);
10880: /* MUTANT (rep_const) */                  regs->num_regs = MAX (RE_NREGS, num_regs + 0);
10880: /* MUTANT (rep_const) */                  regs->num_regs = MAX (RE_NREGS, num_regs + -1);
10880: /* MUTANT (rep_const) */                  regs->num_regs = MAX (RE_NREGS, num_regs + ((1)+1));
10881: /* MUTANT (del_stmt) */ /*                   regs->start = TALLOC (regs->num_regs, regoff_t); */ 
10882: /* MUTANT (del_stmt) */ /*                   regs->end = TALLOC (regs->num_regs, regoff_t); */ 
10883: /* MUTANT (rep_op) */                  if (regs->start != NULL || regs->end == NULL)
10883: /* MUTANT (rep_op) */                  if (regs->start == NULL && regs->end == NULL)
10883: /* MUTANT (rep_op) */                  if (regs->start == NULL || regs->end != NULL)
10883: /* MUTANT (negate) */                  if(! (regs->start == NULL || regs->end == NULL))
10885: /* MUTANT (del_stmt) */ /* 		      FREE_VARIABLES (); */ 
10886: /* MUTANT (del_stmt) */ /* 		      return -2; */ 
10886: /* MUTANT (rep_const) */		      return 0;
10886: /* MUTANT (rep_const) */		      return 1;
10886: /* MUTANT (rep_const) */		      return -1;
10886: /* MUTANT (rep_const) */		      return ((-2)+1);
10886: /* MUTANT (rep_const) */		      return ((-2)-1);
10890: /* MUTANT (rep_op) */              else if (bufp->regs_allocated != REGS_REALLOCATE)
10890: /* MUTANT (negate) */              else if(! (bufp->regs_allocated == REGS_REALLOCATE))
10894: /* MUTANT (rep_op) */                  if (regs->num_regs <= num_regs + 1)
10894: /* MUTANT (rep_op) */                  if (regs->num_regs > num_regs + 1)
10894: /* MUTANT (rep_op) */                  if (regs->num_regs >= num_regs + 1)
10894: /* MUTANT (rep_op) */                  if (regs->num_regs == num_regs + 1)
10894: /* MUTANT (rep_op) */                  if (regs->num_regs != num_regs + 1)
10894: /* MUTANT (rep_op) */                  if (regs->num_regs < num_regs - 1)
10894: /* MUTANT (rep_op) */                  if (regs->num_regs < num_regs * 1)
10894: /* MUTANT (rep_op) */                  if (regs->num_regs < num_regs % 1)
10894: /* MUTANT (rep_const) */                  if (regs->num_regs < num_regs + 0)
10894: /* MUTANT (rep_const) */                  if (regs->num_regs < num_regs + -1)
10894: /* MUTANT (rep_const) */                  if (regs->num_regs < num_regs + ((1)+1))
10894: /* MUTANT (negate) */                  if(! (regs->num_regs < num_regs + 1))
10896: /* MUTANT (del_stmt) */ /*                       regs->num_regs = num_regs + 1; */ 
10896: /* MUTANT (rep_op) */                      regs->num_regs = num_regs - 1;
10896: /* MUTANT (rep_op) */                      regs->num_regs = num_regs * 1;
10896: /* MUTANT (rep_op) */                      regs->num_regs = num_regs % 1;
10896: /* MUTANT (rep_const) */                      regs->num_regs = num_regs + 0;
10896: /* MUTANT (rep_const) */                      regs->num_regs = num_regs + -1;
10896: /* MUTANT (rep_const) */                      regs->num_regs = num_regs + ((1)+1);
10897: /* MUTANT (del_stmt) */ /*                       RETALLOC (regs->start, regs->num_regs, regoff_t); */ 
10898: /* MUTANT (del_stmt) */ /*                       RETALLOC (regs->end, regs->num_regs, regoff_t); */ 
10899: /* MUTANT (rep_op) */                      if (regs->start != NULL || regs->end == NULL)
10899: /* MUTANT (rep_op) */                      if (regs->start == NULL && regs->end == NULL)
10899: /* MUTANT (rep_op) */                      if (regs->start == NULL || regs->end != NULL)
10899: /* MUTANT (negate) */                      if(! (regs->start == NULL || regs->end == NULL))
10901: /* MUTANT (del_stmt) */ /* 			  FREE_VARIABLES (); */ 
10902: /* MUTANT (del_stmt) */ /* 			  return -2; */ 
10902: /* MUTANT (rep_const) */			  return 0;
10902: /* MUTANT (rep_const) */			  return 1;
10902: /* MUTANT (rep_const) */			  return -1;
10902: /* MUTANT (rep_const) */			  return ((-2)+1);
10902: /* MUTANT (rep_const) */			  return ((-2)-1);
10910: /* MUTANT (del_stmt) */ /* 		  assert (bufp->regs_allocated == REGS_FIXED); */ 
10910: /* MUTANT (rep_op) */		  assert (bufp->regs_allocated != REGS_FIXED);
10916: /* MUTANT (rep_op) */              if (regs->num_regs <= 0)
10916: /* MUTANT (rep_op) */              if (regs->num_regs < 0)
10916: /* MUTANT (rep_op) */              if (regs->num_regs >= 0)
10916: /* MUTANT (rep_op) */              if (regs->num_regs == 0)
10916: /* MUTANT (rep_op) */              if (regs->num_regs != 0)
10916: /* MUTANT (rep_const) */              if (regs->num_regs > 1)
10916: /* MUTANT (rep_const) */              if (regs->num_regs > -1)
10916: /* MUTANT (negate) */              if(! (regs->num_regs > 0))
10918: /* MUTANT (del_stmt) */ /*                   regs->start[0] = pos; */ 
10918: /* MUTANT (rep_const) */                  regs->start[1] = pos;
10918: /* MUTANT (rep_const) */                  regs->start[-1] = pos;
10919: /* MUTANT (rep_const) */                  regs->end[1] = (MATCHING_IN_FIRST_STRING
10919: /* MUTANT (rep_const) */                  regs->end[-1] = (MATCHING_IN_FIRST_STRING
10921: /* MUTANT (rep_op) */			          : ((regoff_t) (d - string2 - size1)));
10921: /* MUTANT (rep_op) */			          : ((regoff_t) (d - string2 * size1)));
10921: /* MUTANT (rep_op) */			          : ((regoff_t) (d - string2 % size1)));
10926: /* MUTANT (rep_op) */	      for (mcnt = 1; (unsigned) mcnt <= MIN (num_regs, regs->num_regs);
10926: /* MUTANT (rep_op) */	      for (mcnt = 1; (unsigned) mcnt > MIN (num_regs, regs->num_regs);
10926: /* MUTANT (rep_op) */	      for (mcnt = 1; (unsigned) mcnt >= MIN (num_regs, regs->num_regs);
10926: /* MUTANT (rep_op) */	      for (mcnt = 1; (unsigned) mcnt == MIN (num_regs, regs->num_regs);
10926: /* MUTANT (rep_op) */	      for (mcnt = 1; (unsigned) mcnt != MIN (num_regs, regs->num_regs);
10926: /* MUTANT (rep_const) */	      for (mcnt = 0; (unsigned) mcnt < MIN (num_regs, regs->num_regs);
10926: /* MUTANT (rep_const) */	      for (mcnt = -1; (unsigned) mcnt < MIN (num_regs, regs->num_regs);
10926: /* MUTANT (rep_const) */	      for (mcnt = ((1)+1); (unsigned) mcnt < MIN (num_regs, regs->num_regs);
10927: /* MUTANT (rep_op) */		   mcnt--)
10929: /* MUTANT (rep_op) */                  if (REG_UNSET (regstart[mcnt]) && REG_UNSET (regend[mcnt]))
10929: /* MUTANT (negate) */                  if(! (REG_UNSET (regstart[mcnt]) || REG_UNSET (regend[mcnt])))
10930: /* MUTANT (rep_const) */                    regs->start[mcnt] = regs->end[mcnt] = 0;
10930: /* MUTANT (rep_const) */                    regs->start[mcnt] = regs->end[mcnt] = 1;
10930: /* MUTANT (rep_const) */                    regs->start[mcnt] = regs->end[mcnt] = ((-1)+1);
10930: /* MUTANT (rep_const) */                    regs->start[mcnt] = regs->end[mcnt] = ((-1)-1);
10945: /* MUTANT (rep_op) */              for (mcnt = num_regs; (unsigned) mcnt <= regs->num_regs; mcnt++)
10945: /* MUTANT (rep_op) */              for (mcnt = num_regs; (unsigned) mcnt > regs->num_regs; mcnt++)
10945: /* MUTANT (rep_op) */              for (mcnt = num_regs; (unsigned) mcnt >= regs->num_regs; mcnt++)
10945: /* MUTANT (rep_op) */              for (mcnt = num_regs; (unsigned) mcnt == regs->num_regs; mcnt++)
10945: /* MUTANT (rep_op) */              for (mcnt = num_regs; (unsigned) mcnt != regs->num_regs; mcnt++)
10945: /* MUTANT (rep_op) */              for (mcnt = num_regs; (unsigned) mcnt < regs->num_regs; mcnt--)
10946: /* MUTANT (rep_const) */                regs->start[mcnt] = regs->end[mcnt] = 0;
10946: /* MUTANT (rep_const) */                regs->start[mcnt] = regs->end[mcnt] = 1;
10946: /* MUTANT (rep_const) */                regs->start[mcnt] = regs->end[mcnt] = ((-1)+1);
10946: /* MUTANT (rep_const) */                regs->start[mcnt] = regs->end[mcnt] = ((-1)-1);
10952: /* MUTANT (del_stmt) */ /*           DEBUG_PRINT2 ("%u registers pushed.\n", num_regs_pushed); */ 
10958: /* MUTANT (del_stmt) */ /*           DEBUG_PRINT2 ("Returning %d from re_match_2.\n", mcnt); */ 
10960: /* MUTANT (del_stmt) */ /*           FREE_VARIABLES (); */ 
10961: /* MUTANT (del_stmt) */ /*           return mcnt; */ 
10965: /* MUTANT (rep_op) */      switch (SWITCH_ENUM_CAST ((re_opcode_t) *p--))
10971: /* MUTANT (del_stmt) */ /*           break; */ 
10975: /* MUTANT (del_stmt) */ /* 	  goto succeed_label; */ 
10981: /* MUTANT (rep_op) */	  mcnt = *p--;
10982: /* MUTANT (del_stmt) */ /*           DEBUG_PRINT2 ("EXECUTING exactn %d.\n", mcnt); */ 
10986: /* MUTANT (negate) */          if(! (translate))
10990: /* MUTANT (del_stmt) */ /* 		  PREFETCH (); */ 
10991: /* MUTANT (rep_op) */		  if ((unsigned char) translate[(unsigned char) *d--]
10992: /* MUTANT (rep_op) */		      == (unsigned char) *p++)
10992: /* MUTANT (rep_op) */		      != (unsigned char) *p--)
10995: /* MUTANT (rep_op) */	      while (++mcnt);
10995: /* MUTANT (negate) */	      while(! (--mcnt));
11001: /* MUTANT (del_stmt) */ /* 		  PREFETCH (); */ 
11002: /* MUTANT (del_stmt) */ /* 		  if (*d++ != (char) *p++) goto fail; */ 
11002: /* MUTANT (rep_op) */		  if (*d-- != (char) *p++) goto fail;
11002: /* MUTANT (rep_op) */		  if (*d++ == (char) *p++) goto fail;
11002: /* MUTANT (rep_op) */		  if (*d++ != (char) *p--) goto fail;
11002: /* MUTANT (negate) */		  if(! (*d++ != (char) *p++)) goto fail;
11004: /* MUTANT (rep_op) */	      while (++mcnt);
11004: /* MUTANT (negate) */	      while(! (--mcnt));
11007: /* MUTANT (del_stmt) */ /*           break; */ 
11014: /* MUTANT (del_stmt) */ /*           PREFETCH (); */ 
11016: /* MUTANT (rep_op) */          if ((!(bufp->syntax & RE_DOT_NEWLINE) || TRANSLATE (*d) == '\n')
11016: /* MUTANT (rep_op) */          if ((!(bufp->syntax & RE_DOT_NEWLINE) && TRANSLATE (*d) != '\n')
11017: /* MUTANT (rep_op) */              && (bufp->syntax & RE_DOT_NOT_NULL && TRANSLATE (*d) == '\000'))
11017: /* MUTANT (rep_op) */              || (bufp->syntax & RE_DOT_NOT_NULL || TRANSLATE (*d) == '\000'))
11017: /* MUTANT (rep_op) */              || (bufp->syntax & RE_DOT_NOT_NULL && TRANSLATE (*d) != '\000'))
11017: /* MUTANT (rep_const) */              || (bufp->syntax & RE_DOT_NOT_NULL && TRANSLATE (*d) == '\0'))
11017: /* MUTANT (rep_const) */              || (bufp->syntax & RE_DOT_NOT_NULL && TRANSLATE (*d) == '\1'))
11017: /* MUTANT (rep_const) */              || (bufp->syntax & RE_DOT_NOT_NULL && TRANSLATE (*d) == '\-1'))
11017: /* MUTANT (rep_const) */              || (bufp->syntax & RE_DOT_NOT_NULL && TRANSLATE (*d) == '\((000)+1)'))
11017: /* MUTANT (rep_const) */              || (bufp->syntax & RE_DOT_NOT_NULL && TRANSLATE (*d) == '\((000)-1)'))
11020: /* MUTANT (del_stmt) */ /*           SET_REGS_MATCHED (); */ 
11021: /* MUTANT (del_stmt) */ /*           DEBUG_PRINT2 ("  Matched `%d'.\n", *d); */ 
11022: /* MUTANT (del_stmt) */ /*           d++; */ 
11022: /* MUTANT (rep_op) */          d--;
11023: /* MUTANT (del_stmt) */ /* 	  break; */ 
11029: /* MUTANT (del_stmt) */ /* 	    register unsigned char c; */ 
11030: /* MUTANT (del_stmt) */ /* 	    boolean not = (re_opcode_t) *(p - 1) == charset_not; */ 
11030: /* MUTANT (rep_op) */	    boolean not = (re_opcode_t) *(p - 1) != charset_not;
11030: /* MUTANT (rep_const) */	    boolean not = (re_opcode_t) *(p - 0) == charset_not;
11030: /* MUTANT (rep_const) */	    boolean not = (re_opcode_t) *(p - -1) == charset_not;
11030: /* MUTANT (rep_const) */	    boolean not = (re_opcode_t) *(p - ((1)+1)) == charset_not;
11032: /* MUTANT (del_stmt) */ /*             DEBUG_PRINT2 ("EXECUTING charset%s.\n", not ? "_not" : ""); */ 
11034: /* MUTANT (del_stmt) */ /* 	    PREFETCH (); */ 
11035: /* MUTANT (del_stmt) */ /* 	    c = TRANSLATE (*d); */  /* The character to match.  */
11039: /* MUTANT (rep_op) */	    if (c <= (unsigned) (*p * BYTEWIDTH)
11039: /* MUTANT (rep_op) */	    if (c > (unsigned) (*p * BYTEWIDTH)
11039: /* MUTANT (rep_op) */	    if (c >= (unsigned) (*p * BYTEWIDTH)
11039: /* MUTANT (rep_op) */	    if (c == (unsigned) (*p * BYTEWIDTH)
11039: /* MUTANT (rep_op) */	    if (c != (unsigned) (*p * BYTEWIDTH)
11040: /* MUTANT (rep_op) */		|| p[1 + c / BYTEWIDTH] & (1 << (c % BYTEWIDTH)))
11040: /* MUTANT (rep_op) */		&& p[1 - c / BYTEWIDTH] & (1 << (c % BYTEWIDTH)))
11040: /* MUTANT (rep_op) */		&& p[1 * c / BYTEWIDTH] & (1 << (c % BYTEWIDTH)))
11040: /* MUTANT (rep_op) */		&& p[1 % c / BYTEWIDTH] & (1 << (c % BYTEWIDTH)))
11040: /* MUTANT (rep_op) */		&& p[1 + c / BYTEWIDTH] & (1 << (c + BYTEWIDTH)))
11040: /* MUTANT (rep_op) */		&& p[1 + c / BYTEWIDTH] & (1 << (c - BYTEWIDTH)))
11040: /* MUTANT (rep_op) */		&& p[1 + c / BYTEWIDTH] & (1 << (c * BYTEWIDTH)))
11040: /* MUTANT (rep_const) */		&& p[0 + c / BYTEWIDTH] & (1 << (c % BYTEWIDTH)))
11040: /* MUTANT (rep_const) */		&& p[-1 + c / BYTEWIDTH] & (1 << (c % BYTEWIDTH)))
11040: /* MUTANT (rep_const) */		&& p[((1)+1) + c / BYTEWIDTH] & (1 << (c % BYTEWIDTH)))
11040: /* MUTANT (rep_const) */		&& p[1 + c / BYTEWIDTH] & (0 << (c % BYTEWIDTH)))
11040: /* MUTANT (rep_const) */		&& p[1 + c / BYTEWIDTH] & (-1 << (c % BYTEWIDTH)))
11040: /* MUTANT (rep_const) */		&& p[1 + c / BYTEWIDTH] & (((1)+1) << (c % BYTEWIDTH)))
11043: /* MUTANT (del_stmt) */ /* 	    p += 1 + *p; */ 
11043: /* MUTANT (rep_op) */	    p -= 1 + *p;
11043: /* MUTANT (rep_op) */	    p *= 1 + *p;
11043: /* MUTANT (rep_op) */	    p %= 1 + *p;
11043: /* MUTANT (rep_op) */	    p += 1 - *p;
11043: /* MUTANT (rep_op) */	    p += 1 * *p;
11043: /* MUTANT (rep_op) */	    p += 1 % *p;
11043: /* MUTANT (rep_const) */	    p += 0 + *p;
11043: /* MUTANT (rep_const) */	    p += -1 + *p;
11043: /* MUTANT (rep_const) */	    p += ((1)+1) + *p;
11045: /* MUTANT (del_stmt) */ /* 	    if (!not) goto fail; */ 
11045: /* MUTANT (negate) */	    if(! (!not)) goto fail;
11047: /* MUTANT (del_stmt) */ /* 	    SET_REGS_MATCHED (); */ 
11048: /* MUTANT (del_stmt) */ /*             d++; */ 
11048: /* MUTANT (rep_op) */            d--;
11049: /* MUTANT (del_stmt) */ /* 	    break; */ 
11059: /* MUTANT (rep_const) */	  DEBUG_PRINT3 ("EXECUTING start_memory %d (%d):\n", *p, p[0]);
11059: /* MUTANT (rep_const) */	  DEBUG_PRINT3 ("EXECUTING start_memory %d (%d):\n", *p, p[-1]);
11059: /* MUTANT (rep_const) */	  DEBUG_PRINT3 ("EXECUTING start_memory %d (%d):\n", *p, p[((1)+1)]);
11062: /* MUTANT (del_stmt) */ /* 	  p1 = p; */ 		/* To send to group_match_null_string_p.  */
11064: /* MUTANT (rep_op) */          if (REG_MATCH_NULL_STRING_P (reg_info[*p]) != MATCH_NULL_UNSET_VALUE)
11064: /* MUTANT (negate) */          if(! (REG_MATCH_NULL_STRING_P (reg_info[*p]) == MATCH_NULL_UNSET_VALUE))
11079: /* MUTANT (del_stmt) */ /*           regstart[*p] = d; */ 
11080: /* MUTANT (del_stmt) */ /* 	  DEBUG_PRINT2 ("  regstart: %d\n", POINTER_TO_OFFSET (regstart[*p])); */ 
11082: /* MUTANT (del_stmt) */ /*           IS_ACTIVE (reg_info[*p]) = 1; */ 
11082: /* MUTANT (rep_const) */          IS_ACTIVE (reg_info[*p]) = 0;
11082: /* MUTANT (rep_const) */          IS_ACTIVE (reg_info[*p]) = -1;
11082: /* MUTANT (rep_const) */          IS_ACTIVE (reg_info[*p]) = ((1)+1);
11083: /* MUTANT (del_stmt) */ /*           MATCHED_SOMETHING (reg_info[*p]) = 0; */ 
11083: /* MUTANT (rep_const) */          MATCHED_SOMETHING (reg_info[*p]) = 1;
11083: /* MUTANT (rep_const) */          MATCHED_SOMETHING (reg_info[*p]) = -1;
11086: /* MUTANT (del_stmt) */ /* 	  set_regs_matched_done = 0; */ 
11086: /* MUTANT (rep_const) */	  set_regs_matched_done = 1;
11086: /* MUTANT (rep_const) */	  set_regs_matched_done = -1;
11089: /* MUTANT (del_stmt) */ /*           highest_active_reg = *p; */ 
11093: /* MUTANT (rep_op) */          if (lowest_active_reg != NO_LOWEST_ACTIVE_REG)
11093: /* MUTANT (negate) */          if(! (lowest_active_reg == NO_LOWEST_ACTIVE_REG))
11097: /* MUTANT (del_stmt) */ /*           p += 2; */ 
11097: /* MUTANT (rep_op) */          p -= 2;
11097: /* MUTANT (rep_op) */          p *= 2;
11097: /* MUTANT (rep_op) */          p %= 2;
11097: /* MUTANT (rep_const) */          p += 0;
11097: /* MUTANT (rep_const) */          p += 1;
11097: /* MUTANT (rep_const) */          p += -1;
11097: /* MUTANT (rep_const) */          p += ((2)+1);
11097: /* MUTANT (rep_const) */          p += ((2)-1);
11098: /* MUTANT (del_stmt) */ /* 	  just_past_start_mem = p; */ 
11100: /* MUTANT (del_stmt) */ /*           break; */ 
11107: /* MUTANT (rep_const) */	  DEBUG_PRINT3 ("EXECUTING stop_memory %d (%d):\n", *p, p[0]);
11107: /* MUTANT (rep_const) */	  DEBUG_PRINT3 ("EXECUTING stop_memory %d (%d):\n", *p, p[-1]);
11107: /* MUTANT (rep_const) */	  DEBUG_PRINT3 ("EXECUTING stop_memory %d (%d):\n", *p, p[((1)+1)]);
11120: /* MUTANT (del_stmt) */ /*           regend[*p] = d; */ 
11121: /* MUTANT (del_stmt) */ /* 	  DEBUG_PRINT2 ("      regend: %d\n", POINTER_TO_OFFSET (regend[*p])); */ 
11124: /* MUTANT (del_stmt) */ /*           IS_ACTIVE (reg_info[*p]) = 0; */ 
11124: /* MUTANT (rep_const) */          IS_ACTIVE (reg_info[*p]) = 1;
11124: /* MUTANT (rep_const) */          IS_ACTIVE (reg_info[*p]) = -1;
11127: /* MUTANT (del_stmt) */ /* 	  set_regs_matched_done = 0; */ 
11127: /* MUTANT (rep_const) */	  set_regs_matched_done = 1;
11127: /* MUTANT (rep_const) */	  set_regs_matched_done = -1;
11131: /* MUTANT (rep_op) */          if (lowest_active_reg != highest_active_reg)
11131: /* MUTANT (negate) */          if(! (lowest_active_reg == highest_active_reg))
11133: /* MUTANT (del_stmt) */ /*               lowest_active_reg = NO_LOWEST_ACTIVE_REG; */ 
11134: /* MUTANT (del_stmt) */ /*               highest_active_reg = NO_HIGHEST_ACTIVE_REG; */ 
11141: /* MUTANT (del_stmt) */ /*               unsigned char r = *p - 1; */ 
11141: /* MUTANT (rep_const) */              unsigned char r = *p - 0;
11141: /* MUTANT (rep_const) */              unsigned char r = *p - -1;
11141: /* MUTANT (rep_const) */              unsigned char r = *p - ((1)+1);
11142: /* MUTANT (rep_op) */              while (r <= 0 && !IS_ACTIVE (reg_info[r]))
11142: /* MUTANT (rep_op) */              while (r < 0 && !IS_ACTIVE (reg_info[r]))
11142: /* MUTANT (rep_op) */              while (r >= 0 && !IS_ACTIVE (reg_info[r]))
11142: /* MUTANT (rep_op) */              while (r == 0 && !IS_ACTIVE (reg_info[r]))
11142: /* MUTANT (rep_op) */              while (r != 0 && !IS_ACTIVE (reg_info[r]))
11142: /* MUTANT (rep_op) */              while (r > 0 || !IS_ACTIVE (reg_info[r]))
11142: /* MUTANT (rep_const) */              while (r > 1 && !IS_ACTIVE (reg_info[r]))
11142: /* MUTANT (rep_const) */              while (r > -1 && !IS_ACTIVE (reg_info[r]))
11142: /* MUTANT (negate) */              while(! (r > 0 && !IS_ACTIVE (reg_info[r])))
11143: /* MUTANT (rep_op) */                r++;
11152: /* MUTANT (rep_op) */	      if (r != 0)
11152: /* MUTANT (rep_const) */	      if (r == 1)
11152: /* MUTANT (rep_const) */	      if (r == -1)
11152: /* MUTANT (negate) */	      if(! (r == 0))
11154: /* MUTANT (del_stmt) */ /*                   lowest_active_reg = NO_LOWEST_ACTIVE_REG; */ 
11155: /* MUTANT (del_stmt) */ /*                   highest_active_reg = NO_HIGHEST_ACTIVE_REG; */ 
11167: /* MUTANT (rep_op) */               && just_past_start_mem == p - 1)
11167: /* MUTANT (rep_op) */               || just_past_start_mem != p - 1)
11167: /* MUTANT (rep_const) */               || just_past_start_mem == p - 0)
11167: /* MUTANT (rep_const) */               || just_past_start_mem == p - -1)
11167: /* MUTANT (rep_const) */               || just_past_start_mem == p - ((1)+1))
11168: /* MUTANT (rep_op) */	      || (p + 2) < pend)
11168: /* MUTANT (rep_op) */	      && (p - 2) < pend)
11168: /* MUTANT (rep_op) */	      && (p * 2) < pend)
11168: /* MUTANT (rep_op) */	      && (p % 2) < pend)
11168: /* MUTANT (rep_op) */	      && (p + 2) <= pend)
11168: /* MUTANT (rep_op) */	      && (p + 2) > pend)
11168: /* MUTANT (rep_op) */	      && (p + 2) >= pend)
11168: /* MUTANT (rep_op) */	      && (p + 2) == pend)
11168: /* MUTANT (rep_op) */	      && (p + 2) != pend)
11168: /* MUTANT (rep_const) */	      && (p + 0) < pend)
11168: /* MUTANT (rep_const) */	      && (p + 1) < pend)
11168: /* MUTANT (rep_const) */	      && (p + -1) < pend)
11168: /* MUTANT (rep_const) */	      && (p + ((2)+1)) < pend)
11168: /* MUTANT (rep_const) */	      && (p + ((2)-1)) < pend)
11170: /* MUTANT (del_stmt) */ /*               boolean is_a_jump_n = false; */ 
11172: /* MUTANT (del_stmt) */ /*               p1 = p + 2; */ 
11172: /* MUTANT (rep_op) */              p1 = p - 2;
11172: /* MUTANT (rep_op) */              p1 = p * 2;
11172: /* MUTANT (rep_op) */              p1 = p % 2;
11172: /* MUTANT (rep_const) */              p1 = p + 0;
11172: /* MUTANT (rep_const) */              p1 = p + 1;
11172: /* MUTANT (rep_const) */              p1 = p + -1;
11172: /* MUTANT (rep_const) */              p1 = p + ((2)+1);
11172: /* MUTANT (rep_const) */              p1 = p + ((2)-1);
11173: /* MUTANT (del_stmt) */ /*               mcnt = 0; */ 
11173: /* MUTANT (rep_const) */              mcnt = 1;
11173: /* MUTANT (rep_const) */              mcnt = -1;
11174: /* MUTANT (rep_op) */              switch ((re_opcode_t) *p1--)
11183: /* MUTANT (negate) */		    if(! (is_a_jump_n))
11184: /* MUTANT (rep_op) */		      p1 -= 2;
11184: /* MUTANT (rep_op) */		      p1 *= 2;
11184: /* MUTANT (rep_op) */		      p1 %= 2;
11184: /* MUTANT (rep_const) */		      p1 += 0;
11184: /* MUTANT (rep_const) */		      p1 += 1;
11184: /* MUTANT (rep_const) */		      p1 += -1;
11184: /* MUTANT (rep_const) */		      p1 += ((2)+1);
11184: /* MUTANT (rep_const) */		      p1 += ((2)-1);
11185: /* MUTANT (del_stmt) */ /*                     break; */ 
11190: /* MUTANT (rep_op) */	      p1 -= mcnt;
11190: /* MUTANT (rep_op) */	      p1 *= mcnt;
11190: /* MUTANT (rep_op) */	      p1 %= mcnt;
11197: /* MUTANT (rep_op) */              if (mcnt <= 0 && (re_opcode_t) *p1 == on_failure_jump
11197: /* MUTANT (rep_op) */              if (mcnt > 0 && (re_opcode_t) *p1 == on_failure_jump
11197: /* MUTANT (rep_op) */              if (mcnt >= 0 && (re_opcode_t) *p1 == on_failure_jump
11197: /* MUTANT (rep_op) */              if (mcnt == 0 && (re_opcode_t) *p1 == on_failure_jump
11197: /* MUTANT (rep_op) */              if (mcnt != 0 && (re_opcode_t) *p1 == on_failure_jump
11197: /* MUTANT (rep_op) */              if (mcnt < 0 || (re_opcode_t) *p1 == on_failure_jump
11197: /* MUTANT (rep_op) */              if (mcnt < 0 && (re_opcode_t) *p1 != on_failure_jump
11197: /* MUTANT (rep_const) */              if (mcnt < 1 && (re_opcode_t) *p1 == on_failure_jump
11197: /* MUTANT (rep_const) */              if (mcnt < -1 && (re_opcode_t) *p1 == on_failure_jump
11198: /* MUTANT (rep_op) */                  || (re_opcode_t) p1[3] == start_memory && p1[4] == *p)
11198: /* MUTANT (rep_op) */                  && (re_opcode_t) p1[3] != start_memory && p1[4] == *p)
11198: /* MUTANT (rep_op) */                  && (re_opcode_t) p1[3] == start_memory || p1[4] == *p)
11198: /* MUTANT (rep_op) */                  && (re_opcode_t) p1[3] == start_memory && p1[4] != *p)
11198: /* MUTANT (rep_const) */                  && (re_opcode_t) p1[0] == start_memory && p1[4] == *p)
11198: /* MUTANT (rep_const) */                  && (re_opcode_t) p1[1] == start_memory && p1[4] == *p)
11198: /* MUTANT (rep_const) */                  && (re_opcode_t) p1[-1] == start_memory && p1[4] == *p)
11198: /* MUTANT (rep_const) */                  && (re_opcode_t) p1[((3)+1)] == start_memory && p1[4] == *p)
11198: /* MUTANT (rep_const) */                  && (re_opcode_t) p1[((3)-1)] == start_memory && p1[4] == *p)
11198: /* MUTANT (rep_const) */                  && (re_opcode_t) p1[3] == start_memory && p1[0] == *p)
11198: /* MUTANT (rep_const) */                  && (re_opcode_t) p1[3] == start_memory && p1[1] == *p)
11198: /* MUTANT (rep_const) */                  && (re_opcode_t) p1[3] == start_memory && p1[-1] == *p)
11198: /* MUTANT (rep_const) */                  && (re_opcode_t) p1[3] == start_memory && p1[((4)+1)] == *p)
11198: /* MUTANT (rep_const) */                  && (re_opcode_t) p1[3] == start_memory && p1[((4)-1)] == *p)
11210: /* MUTANT (negate) */                  if(! (EVER_MATCHED_SOMETHING (reg_info[*p])))
11212: /* MUTANT (del_stmt) */ /* 		      unsigned r; */ 
11214: /* MUTANT (del_stmt) */ /*                       EVER_MATCHED_SOMETHING (reg_info[*p]) = 0; */ 
11214: /* MUTANT (rep_const) */                      EVER_MATCHED_SOMETHING (reg_info[*p]) = 1;
11214: /* MUTANT (rep_const) */                      EVER_MATCHED_SOMETHING (reg_info[*p]) = -1;
11217: /* MUTANT (rep_op) */                      for (r = *p; r <= (unsigned) *p + (unsigned) *(p + 1);
11217: /* MUTANT (rep_op) */                      for (r = *p; r > (unsigned) *p + (unsigned) *(p + 1);
11217: /* MUTANT (rep_op) */                      for (r = *p; r >= (unsigned) *p + (unsigned) *(p + 1);
11217: /* MUTANT (rep_op) */                      for (r = *p; r == (unsigned) *p + (unsigned) *(p + 1);
11217: /* MUTANT (rep_op) */                      for (r = *p; r != (unsigned) *p + (unsigned) *(p + 1);
11217: /* MUTANT (rep_op) */                      for (r = *p; r < (unsigned) *p - (unsigned) *(p + 1);
11217: /* MUTANT (rep_op) */                      for (r = *p; r < (unsigned) *p * (unsigned) *(p + 1);
11217: /* MUTANT (rep_op) */                      for (r = *p; r < (unsigned) *p % (unsigned) *(p + 1);
11217: /* MUTANT (rep_op) */                      for (r = *p; r < (unsigned) *p + (unsigned) *(p - 1);
11217: /* MUTANT (rep_op) */                      for (r = *p; r < (unsigned) *p + (unsigned) *(p * 1);
11217: /* MUTANT (rep_op) */                      for (r = *p; r < (unsigned) *p + (unsigned) *(p % 1);
11217: /* MUTANT (rep_const) */                      for (r = *p; r < (unsigned) *p + (unsigned) *(p + 0);
11217: /* MUTANT (rep_const) */                      for (r = *p; r < (unsigned) *p + (unsigned) *(p + -1);
11217: /* MUTANT (rep_const) */                      for (r = *p; r < (unsigned) *p + (unsigned) *(p + ((1)+1));
11218: /* MUTANT (rep_op) */			   r--)
11220: /* MUTANT (del_stmt) */ /*                           regstart[r] = old_regstart[r]; */ 
11223: /* MUTANT (rep_op) */                          if (old_regend[r] <= regstart[r])
11223: /* MUTANT (rep_op) */                          if (old_regend[r] < regstart[r])
11223: /* MUTANT (rep_op) */                          if (old_regend[r] > regstart[r])
11223: /* MUTANT (rep_op) */                          if (old_regend[r] == regstart[r])
11223: /* MUTANT (rep_op) */                          if (old_regend[r] != regstart[r])
11223: /* MUTANT (negate) */                          if(! (old_regend[r] >= regstart[r]))
11227: /* MUTANT (rep_op) */		  p1--;
11228: /* MUTANT (del_stmt) */ /*                   EXTRACT_NUMBER_AND_INCR (mcnt, p1); */ 
11229: /* MUTANT (del_stmt) */ /*                   PUSH_FAILURE_POINT (p1 + mcnt, d, -2); */ 
11229: /* MUTANT (rep_op) */                  PUSH_FAILURE_POINT (p1 - mcnt, d, -2);
11229: /* MUTANT (rep_op) */                  PUSH_FAILURE_POINT (p1 * mcnt, d, -2);
11229: /* MUTANT (rep_op) */                  PUSH_FAILURE_POINT (p1 % mcnt, d, -2);
11229: /* MUTANT (rep_const) */                  PUSH_FAILURE_POINT (p1 + mcnt, d, 0);
11229: /* MUTANT (rep_const) */                  PUSH_FAILURE_POINT (p1 + mcnt, d, 1);
11229: /* MUTANT (rep_const) */                  PUSH_FAILURE_POINT (p1 + mcnt, d, -1);
11229: /* MUTANT (rep_const) */                  PUSH_FAILURE_POINT (p1 + mcnt, d, ((-2)+1));
11229: /* MUTANT (rep_const) */                  PUSH_FAILURE_POINT (p1 + mcnt, d, ((-2)-1));
11231: /* MUTANT (del_stmt) */ /*                   goto fail; */ 
11236: /* MUTANT (rep_op) */          p -= 2;
11236: /* MUTANT (rep_op) */          p *= 2;
11236: /* MUTANT (rep_op) */          p %= 2;
11236: /* MUTANT (rep_const) */          p += 0;
11236: /* MUTANT (rep_const) */          p += 1;
11236: /* MUTANT (rep_const) */          p += -1;
11236: /* MUTANT (rep_const) */          p += ((2)+1);
11236: /* MUTANT (rep_const) */          p += ((2)-1);
11237: /* MUTANT (del_stmt) */ /*           break; */ 
11244: /* MUTANT (del_stmt) */ /* 	    register const char *d2, *dend2; */ 
11245: /* MUTANT (del_stmt) */ /* 	    int regno = *p++; */    /* Get which register to match against.  */
11245: /* MUTANT (rep_op) */	    int regno = *p--;   /* Get which register to match against.  */
11246: /* MUTANT (del_stmt) */ /* 	    DEBUG_PRINT2 ("EXECUTING duplicate %d.\n", regno); */ 
11249: /* MUTANT (rep_op) */            if (REG_UNSET (regstart[regno]) && REG_UNSET (regend[regno]))
11249: /* MUTANT (negate) */            if(! (REG_UNSET (regstart[regno]) || REG_UNSET (regend[regno])))
11253: /* MUTANT (del_stmt) */ /*             d2 = regstart[regno]; */ 
11261: /* MUTANT (rep_op) */		      != FIRST_STRING_P (regend[regno]))
11267: /* MUTANT (rep_op) */		while (d2 != dend2)
11267: /* MUTANT (negate) */		while(! (d2 == dend2))
11269: /* MUTANT (del_stmt) */ /* 		    if (dend2 == end_match_2) break; */ 
11269: /* MUTANT (rep_op) */		    if (dend2 != end_match_2) break;
11269: /* MUTANT (negate) */		    if(! (dend2 == end_match_2)) break;
11270: /* MUTANT (del_stmt) */ /* 		    if (dend2 == regend[regno]) break; */ 
11270: /* MUTANT (rep_op) */		    if (dend2 != regend[regno]) break;
11270: /* MUTANT (negate) */		    if(! (dend2 == regend[regno])) break;
11273: /* MUTANT (del_stmt) */ /*                     d2 = string2; */ 
11274: /* MUTANT (del_stmt) */ /*                     dend2 = regend[regno]; */ 
11277: /* MUTANT (rep_op) */		if (d2 != dend2) break;
11277: /* MUTANT (negate) */		if(! (d2 == dend2)) break;
11280: /* MUTANT (del_stmt) */ /* 		PREFETCH (); */ 
11283: /* MUTANT (del_stmt) */ /* 		mcnt = dend - d; */ 
11287: /* MUTANT (rep_op) */                if (mcnt <= dend2 - d2)
11287: /* MUTANT (rep_op) */                if (mcnt < dend2 - d2)
11287: /* MUTANT (rep_op) */                if (mcnt >= dend2 - d2)
11287: /* MUTANT (rep_op) */                if (mcnt == dend2 - d2)
11287: /* MUTANT (rep_op) */                if (mcnt != dend2 - d2)
11287: /* MUTANT (negate) */                if(! (mcnt > dend2 - d2))
11296: /* MUTANT (del_stmt) */ /* 		d += mcnt, d2 += mcnt; */ 
11296: /* MUTANT (rep_op) */		d -= mcnt, d2 += mcnt;
11296: /* MUTANT (rep_op) */		d *= mcnt, d2 += mcnt;
11296: /* MUTANT (rep_op) */		d %= mcnt, d2 += mcnt;
11296: /* MUTANT (rep_op) */		d += mcnt, d2 -= mcnt;
11296: /* MUTANT (rep_op) */		d += mcnt, d2 *= mcnt;
11296: /* MUTANT (rep_op) */		d += mcnt, d2 %= mcnt;
11299: /* MUTANT (del_stmt) */ /* 		SET_REGS_MATCHED (); */ 
11311: /* MUTANT (negate) */          if(! (AT_STRINGS_BEG (d)))
11313: /* MUTANT (del_stmt) */ /*               if (!bufp->not_bol) break; */ 
11313: /* MUTANT (negate) */              if(! (!bufp->not_bol)) break;
11315: /* MUTANT (rep_op) */          else if (d[-1] != '\n' && bufp->newline_anchor)
11315: /* MUTANT (rep_op) */          else if (d[-1] == '\n' || bufp->newline_anchor)
11315: /* MUTANT (rep_const) */          else if (d[0] == '\n' && bufp->newline_anchor)
11315: /* MUTANT (rep_const) */          else if (d[1] == '\n' && bufp->newline_anchor)
11315: /* MUTANT (rep_const) */          else if (d[((-1)+1)] == '\n' && bufp->newline_anchor)
11315: /* MUTANT (rep_const) */          else if (d[((-1)-1)] == '\n' && bufp->newline_anchor)
11315: /* MUTANT (negate) */          else if(! (d[-1] == '\n' && bufp->newline_anchor))
11317: /* MUTANT (del_stmt) */ /*               break; */ 
11327: /* MUTANT (negate) */          if(! (AT_STRINGS_END (d)))
11329: /* MUTANT (del_stmt) */ /*               if (!bufp->not_eol) break; */ 
11329: /* MUTANT (negate) */              if(! (!bufp->not_eol)) break;
11333: /* MUTANT (rep_op) */          else if ((d != end1 ? *string2 : *d) == '\n'
11333: /* MUTANT (rep_op) */          else if ((d == end1 ? *string2 : *d) != '\n'
11334: /* MUTANT (rep_op) */                   || bufp->newline_anchor)
11336: /* MUTANT (del_stmt) */ /*               break; */ 
11344: /* MUTANT (negate) */          if(! (AT_STRINGS_BEG (d)))
11346: /* MUTANT (del_stmt) */ /*           goto fail; */ 
11352: /* MUTANT (negate) */	  if(! (AT_STRINGS_END (d)))
11354: /* MUTANT (del_stmt) */ /*           goto fail; */ 
11376: /* MUTANT (del_stmt) */ /*           EXTRACT_NUMBER_AND_INCR (mcnt, p); */ 
11378: /* MUTANT (rep_op) */          DEBUG_PRINT3 (" %d (to %p):\n", mcnt, p - mcnt);
11378: /* MUTANT (rep_op) */          DEBUG_PRINT3 (" %d (to %p):\n", mcnt, p * mcnt);
11378: /* MUTANT (rep_op) */          DEBUG_PRINT3 (" %d (to %p):\n", mcnt, p % mcnt);
11380: /* MUTANT (rep_op) */          DEBUG_PRINT3 (" %d (to 0x%x):\n", mcnt, p - mcnt);
11380: /* MUTANT (rep_op) */          DEBUG_PRINT3 (" %d (to 0x%x):\n", mcnt, p * mcnt);
11380: /* MUTANT (rep_op) */          DEBUG_PRINT3 (" %d (to 0x%x):\n", mcnt, p % mcnt);
11380: /* MUTANT (rep_const) */          DEBUG_PRINT3 (" %d (to 1x%x):\n", mcnt, p + mcnt);
11380: /* MUTANT (rep_const) */          DEBUG_PRINT3 (" %d (to -1x%x):\n", mcnt, p + mcnt);
11383: /* MUTANT (rep_op) */          PUSH_FAILURE_POINT (p - mcnt, NULL, -2);
11383: /* MUTANT (rep_op) */          PUSH_FAILURE_POINT (p * mcnt, NULL, -2);
11383: /* MUTANT (rep_op) */          PUSH_FAILURE_POINT (p % mcnt, NULL, -2);
11383: /* MUTANT (rep_const) */          PUSH_FAILURE_POINT (p + mcnt, NULL, 0);
11383: /* MUTANT (rep_const) */          PUSH_FAILURE_POINT (p + mcnt, NULL, 1);
11383: /* MUTANT (rep_const) */          PUSH_FAILURE_POINT (p + mcnt, NULL, -1);
11383: /* MUTANT (rep_const) */          PUSH_FAILURE_POINT (p + mcnt, NULL, ((-2)+1));
11383: /* MUTANT (rep_const) */          PUSH_FAILURE_POINT (p + mcnt, NULL, ((-2)-1));
11384: /* MUTANT (del_stmt) */ /*           break; */ 
11403: /* MUTANT (del_stmt) */ /*           EXTRACT_NUMBER_AND_INCR (mcnt, p); */ 
11405: /* MUTANT (rep_op) */          DEBUG_PRINT3 (" %d (to %p)", mcnt, p - mcnt);
11405: /* MUTANT (rep_op) */          DEBUG_PRINT3 (" %d (to %p)", mcnt, p * mcnt);
11405: /* MUTANT (rep_op) */          DEBUG_PRINT3 (" %d (to %p)", mcnt, p % mcnt);
11407: /* MUTANT (rep_op) */          DEBUG_PRINT3 (" %d (to 0x%x)", mcnt, p - mcnt);
11407: /* MUTANT (rep_op) */          DEBUG_PRINT3 (" %d (to 0x%x)", mcnt, p * mcnt);
11407: /* MUTANT (rep_op) */          DEBUG_PRINT3 (" %d (to 0x%x)", mcnt, p % mcnt);
11407: /* MUTANT (rep_const) */          DEBUG_PRINT3 (" %d (to 1x%x)", mcnt, p + mcnt);
11407: /* MUTANT (rep_const) */          DEBUG_PRINT3 (" %d (to -1x%x)", mcnt, p + mcnt);
11425: /* MUTANT (rep_op) */          while (p1 <= pend && (re_opcode_t) *p1 == no_op)
11425: /* MUTANT (rep_op) */          while (p1 > pend && (re_opcode_t) *p1 == no_op)
11425: /* MUTANT (rep_op) */          while (p1 >= pend && (re_opcode_t) *p1 == no_op)
11425: /* MUTANT (rep_op) */          while (p1 == pend && (re_opcode_t) *p1 == no_op)
11425: /* MUTANT (rep_op) */          while (p1 != pend && (re_opcode_t) *p1 == no_op)
11425: /* MUTANT (rep_op) */          while (p1 < pend || (re_opcode_t) *p1 == no_op)
11425: /* MUTANT (rep_op) */          while (p1 < pend && (re_opcode_t) *p1 != no_op)
11425: /* MUTANT (negate) */          while(! (p1 < pend && (re_opcode_t) *p1 == no_op))
11426: /* MUTANT (rep_op) */            p1--;
11428: /* MUTANT (rep_op) */          if (p1 <= pend && (re_opcode_t) *p1 == start_memory)
11428: /* MUTANT (rep_op) */          if (p1 > pend && (re_opcode_t) *p1 == start_memory)
11428: /* MUTANT (rep_op) */          if (p1 >= pend && (re_opcode_t) *p1 == start_memory)
11428: /* MUTANT (rep_op) */          if (p1 == pend && (re_opcode_t) *p1 == start_memory)
11428: /* MUTANT (rep_op) */          if (p1 != pend && (re_opcode_t) *p1 == start_memory)
11428: /* MUTANT (rep_op) */          if (p1 < pend || (re_opcode_t) *p1 == start_memory)
11428: /* MUTANT (rep_op) */          if (p1 < pend && (re_opcode_t) *p1 != start_memory)
11428: /* MUTANT (negate) */          if(! (p1 < pend && (re_opcode_t) *p1 == start_memory))
11434: /* MUTANT (del_stmt) */ /*               highest_active_reg = *(p1 + 1) + *(p1 + 2); */ 
11434: /* MUTANT (rep_op) */              highest_active_reg = *(p1 - 1) + *(p1 + 2);
11434: /* MUTANT (rep_op) */              highest_active_reg = *(p1 * 1) + *(p1 + 2);
11434: /* MUTANT (rep_op) */              highest_active_reg = *(p1 % 1) + *(p1 + 2);
11434: /* MUTANT (rep_op) */              highest_active_reg = *(p1 + 1) - *(p1 + 2);
11434: /* MUTANT (rep_op) */              highest_active_reg = *(p1 + 1) * *(p1 + 2);
11434: /* MUTANT (rep_op) */              highest_active_reg = *(p1 + 1) % *(p1 + 2);
11434: /* MUTANT (rep_op) */              highest_active_reg = *(p1 + 1) + *(p1 - 2);
11434: /* MUTANT (rep_op) */              highest_active_reg = *(p1 + 1) + *(p1 * 2);
11434: /* MUTANT (rep_op) */              highest_active_reg = *(p1 + 1) + *(p1 % 2);
11434: /* MUTANT (rep_const) */              highest_active_reg = *(p1 + 0) + *(p1 + 2);
11434: /* MUTANT (rep_const) */              highest_active_reg = *(p1 + -1) + *(p1 + 2);
11434: /* MUTANT (rep_const) */              highest_active_reg = *(p1 + ((1)+1)) + *(p1 + 2);
11434: /* MUTANT (rep_const) */              highest_active_reg = *(p1 + 1) + *(p1 + 0);
11434: /* MUTANT (rep_const) */              highest_active_reg = *(p1 + 1) + *(p1 + 1);
11434: /* MUTANT (rep_const) */              highest_active_reg = *(p1 + 1) + *(p1 + -1);
11434: /* MUTANT (rep_const) */              highest_active_reg = *(p1 + 1) + *(p1 + ((2)+1));
11434: /* MUTANT (rep_const) */              highest_active_reg = *(p1 + 1) + *(p1 + ((2)-1));
11435: /* MUTANT (rep_op) */              if (lowest_active_reg != NO_LOWEST_ACTIVE_REG)
11435: /* MUTANT (negate) */              if(! (lowest_active_reg == NO_LOWEST_ACTIVE_REG))
11436: /* MUTANT (rep_op) */                lowest_active_reg = *(p1 - 1);
11436: /* MUTANT (rep_op) */                lowest_active_reg = *(p1 * 1);
11436: /* MUTANT (rep_op) */                lowest_active_reg = *(p1 % 1);
11436: /* MUTANT (rep_const) */                lowest_active_reg = *(p1 + 0);
11436: /* MUTANT (rep_const) */                lowest_active_reg = *(p1 + -1);
11436: /* MUTANT (rep_const) */                lowest_active_reg = *(p1 + ((1)+1));
11440: /* MUTANT (del_stmt) */ /*           PUSH_FAILURE_POINT (p + mcnt, d, -2); */ 
11440: /* MUTANT (rep_op) */          PUSH_FAILURE_POINT (p - mcnt, d, -2);
11440: /* MUTANT (rep_op) */          PUSH_FAILURE_POINT (p * mcnt, d, -2);
11440: /* MUTANT (rep_op) */          PUSH_FAILURE_POINT (p % mcnt, d, -2);
11440: /* MUTANT (rep_const) */          PUSH_FAILURE_POINT (p + mcnt, d, 0);
11440: /* MUTANT (rep_const) */          PUSH_FAILURE_POINT (p + mcnt, d, 1);
11440: /* MUTANT (rep_const) */          PUSH_FAILURE_POINT (p + mcnt, d, -1);
11440: /* MUTANT (rep_const) */          PUSH_FAILURE_POINT (p + mcnt, d, ((-2)+1));
11440: /* MUTANT (rep_const) */          PUSH_FAILURE_POINT (p + mcnt, d, ((-2)-1));
11441: /* MUTANT (del_stmt) */ /*           break; */ 
11448: /* MUTANT (del_stmt) */ /*           DEBUG_PRINT2 ("EXECUTING maybe_pop_jump %d.\n", mcnt); */ 
11450: /* MUTANT (del_stmt) */ /* 	    register unsigned char *p2 = p; */ 
11469: /* MUTANT (rep_const) */	    while (0)
11469: /* MUTANT (rep_const) */	    while (-1)
11469: /* MUTANT (rep_const) */	    while (((1)+1))
11469: /* MUTANT (negate) */	    while(! (1))
11471: /* MUTANT (rep_op) */		if (p2 - 2 < pend
11471: /* MUTANT (rep_op) */		if (p2 * 2 < pend
11471: /* MUTANT (rep_op) */		if (p2 % 2 < pend
11471: /* MUTANT (rep_op) */		if (p2 + 2 <= pend
11471: /* MUTANT (rep_op) */		if (p2 + 2 > pend
11471: /* MUTANT (rep_op) */		if (p2 + 2 >= pend
11471: /* MUTANT (rep_op) */		if (p2 + 2 == pend
11471: /* MUTANT (rep_op) */		if (p2 + 2 != pend
11471: /* MUTANT (rep_const) */		if (p2 + 0 < pend
11471: /* MUTANT (rep_const) */		if (p2 + 1 < pend
11471: /* MUTANT (rep_const) */		if (p2 + -1 < pend
11471: /* MUTANT (rep_const) */		if (p2 + ((2)+1) < pend
11471: /* MUTANT (rep_const) */		if (p2 + ((2)-1) < pend
11472: /* MUTANT (rep_op) */		    || ((re_opcode_t) *p2 == stop_memory
11472: /* MUTANT (rep_op) */		    && ((re_opcode_t) *p2 != stop_memory
11473: /* MUTANT (rep_op) */			&& (re_opcode_t) *p2 == start_memory))
11473: /* MUTANT (rep_op) */			|| (re_opcode_t) *p2 != start_memory))
11474: /* MUTANT (rep_op) */		  p2 -= 3;
11474: /* MUTANT (rep_op) */		  p2 *= 3;
11474: /* MUTANT (rep_op) */		  p2 %= 3;
11474: /* MUTANT (rep_const) */		  p2 += 0;
11474: /* MUTANT (rep_const) */		  p2 += 1;
11474: /* MUTANT (rep_const) */		  p2 += -1;
11474: /* MUTANT (rep_const) */		  p2 += ((3)+1);
11474: /* MUTANT (rep_const) */		  p2 += ((3)-1);
11475: /* MUTANT (rep_op) */		else if (p2 - 6 < pend
11475: /* MUTANT (rep_op) */		else if (p2 * 6 < pend
11475: /* MUTANT (rep_op) */		else if (p2 % 6 < pend
11475: /* MUTANT (rep_op) */		else if (p2 + 6 <= pend
11475: /* MUTANT (rep_op) */		else if (p2 + 6 > pend
11475: /* MUTANT (rep_op) */		else if (p2 + 6 >= pend
11475: /* MUTANT (rep_op) */		else if (p2 + 6 == pend
11475: /* MUTANT (rep_op) */		else if (p2 + 6 != pend
11475: /* MUTANT (rep_const) */		else if (p2 + 0 < pend
11475: /* MUTANT (rep_const) */		else if (p2 + 1 < pend
11475: /* MUTANT (rep_const) */		else if (p2 + -1 < pend
11475: /* MUTANT (rep_const) */		else if (p2 + ((6)+1) < pend
11475: /* MUTANT (rep_const) */		else if (p2 + ((6)-1) < pend
11476: /* MUTANT (rep_op) */			 || (re_opcode_t) *p2 == dummy_failure_jump)
11476: /* MUTANT (rep_op) */			 && (re_opcode_t) *p2 != dummy_failure_jump)
11477: /* MUTANT (rep_op) */		  p2 -= 6;
11477: /* MUTANT (rep_op) */		  p2 *= 6;
11477: /* MUTANT (rep_op) */		  p2 %= 6;
11477: /* MUTANT (rep_const) */		  p2 += 0;
11477: /* MUTANT (rep_const) */		  p2 += 1;
11477: /* MUTANT (rep_const) */		  p2 += -1;
11477: /* MUTANT (rep_const) */		  p2 += ((6)+1);
11477: /* MUTANT (rep_const) */		  p2 += ((6)-1);
11482: /* MUTANT (rep_op) */	    p1 = p - mcnt;
11482: /* MUTANT (rep_op) */	    p1 = p * mcnt;
11482: /* MUTANT (rep_op) */	    p1 = p % mcnt;
11488: /* MUTANT (rep_op) */            if (p2 != pend)
11488: /* MUTANT (negate) */            if(! (p2 == pend))
11493: /* MUTANT (del_stmt) */ /*   	        p[-3] = (unsigned char) pop_failure_jump; */ 
11493: /* MUTANT (rep_const) */  	        p[0] = (unsigned char) pop_failure_jump;
11493: /* MUTANT (rep_const) */  	        p[1] = (unsigned char) pop_failure_jump;
11493: /* MUTANT (rep_const) */  	        p[-1] = (unsigned char) pop_failure_jump;
11493: /* MUTANT (rep_const) */  	        p[((-3)+1)] = (unsigned char) pop_failure_jump;
11493: /* MUTANT (rep_const) */  	        p[((-3)-1)] = (unsigned char) pop_failure_jump;
11498: /* MUTANT (rep_op) */            else if ((re_opcode_t) *p2 != exactn
11499: /* MUTANT (rep_op) */		     && (bufp->newline_anchor && (re_opcode_t) *p2 == endline))
11499: /* MUTANT (rep_op) */		     || (bufp->newline_anchor || (re_opcode_t) *p2 == endline))
11499: /* MUTANT (rep_op) */		     || (bufp->newline_anchor && (re_opcode_t) *p2 != endline))
11502: /* MUTANT (rep_op) */                  = *p2 != (unsigned char) endline ? '\n' : p2[2];
11502: /* MUTANT (rep_const) */                  = *p2 == (unsigned char) endline ? '\n' : p2[0];
11502: /* MUTANT (rep_const) */                  = *p2 == (unsigned char) endline ? '\n' : p2[1];
11502: /* MUTANT (rep_const) */                  = *p2 == (unsigned char) endline ? '\n' : p2[-1];
11502: /* MUTANT (rep_const) */                  = *p2 == (unsigned char) endline ? '\n' : p2[((2)+1)];
11502: /* MUTANT (rep_const) */                  = *p2 == (unsigned char) endline ? '\n' : p2[((2)-1)];
11504: /* MUTANT (rep_op) */                if ((re_opcode_t) p1[3] != exactn && p1[5] != c)
11504: /* MUTANT (rep_op) */                if ((re_opcode_t) p1[3] == exactn || p1[5] != c)
11504: /* MUTANT (rep_op) */                if ((re_opcode_t) p1[3] == exactn && p1[5] == c)
11504: /* MUTANT (rep_const) */                if ((re_opcode_t) p1[0] == exactn && p1[5] != c)
11504: /* MUTANT (rep_const) */                if ((re_opcode_t) p1[1] == exactn && p1[5] != c)
11504: /* MUTANT (rep_const) */                if ((re_opcode_t) p1[-1] == exactn && p1[5] != c)
11504: /* MUTANT (rep_const) */                if ((re_opcode_t) p1[((3)+1)] == exactn && p1[5] != c)
11504: /* MUTANT (rep_const) */                if ((re_opcode_t) p1[((3)-1)] == exactn && p1[5] != c)
11504: /* MUTANT (rep_const) */                if ((re_opcode_t) p1[3] == exactn && p1[0] != c)
11504: /* MUTANT (rep_const) */                if ((re_opcode_t) p1[3] == exactn && p1[1] != c)
11504: /* MUTANT (rep_const) */                if ((re_opcode_t) p1[3] == exactn && p1[-1] != c)
11504: /* MUTANT (rep_const) */                if ((re_opcode_t) p1[3] == exactn && p1[((5)+1)] != c)
11504: /* MUTANT (rep_const) */                if ((re_opcode_t) p1[3] == exactn && p1[((5)-1)] != c)
11504: /* MUTANT (negate) */                if(! ((re_opcode_t) p1[3] == exactn && p1[5] != c))
11506: /* MUTANT (del_stmt) */ /*   		    p[-3] = (unsigned char) pop_failure_jump; */ 
11506: /* MUTANT (rep_const) */  		    p[0] = (unsigned char) pop_failure_jump;
11506: /* MUTANT (rep_const) */  		    p[1] = (unsigned char) pop_failure_jump;
11506: /* MUTANT (rep_const) */  		    p[-1] = (unsigned char) pop_failure_jump;
11506: /* MUTANT (rep_const) */  		    p[((-3)+1)] = (unsigned char) pop_failure_jump;
11506: /* MUTANT (rep_const) */  		    p[((-3)-1)] = (unsigned char) pop_failure_jump;
11508: /* MUTANT (rep_const) */                                  c, p1[0]);
11508: /* MUTANT (rep_const) */                                  c, p1[1]);
11508: /* MUTANT (rep_const) */                                  c, p1[-1]);
11508: /* MUTANT (rep_const) */                                  c, p1[((5)+1)]);
11508: /* MUTANT (rep_const) */                                  c, p1[((5)-1)]);
11511: /* MUTANT (rep_op) */		else if ((re_opcode_t) p1[3] != charset
11511: /* MUTANT (rep_const) */		else if ((re_opcode_t) p1[0] == charset
11511: /* MUTANT (rep_const) */		else if ((re_opcode_t) p1[1] == charset
11511: /* MUTANT (rep_const) */		else if ((re_opcode_t) p1[-1] == charset
11511: /* MUTANT (rep_const) */		else if ((re_opcode_t) p1[((3)+1)] == charset
11511: /* MUTANT (rep_const) */		else if ((re_opcode_t) p1[((3)-1)] == charset
11512: /* MUTANT (rep_op) */			 && (re_opcode_t) p1[3] == charset_not)
11512: /* MUTANT (rep_op) */			 || (re_opcode_t) p1[3] != charset_not)
11512: /* MUTANT (rep_const) */			 || (re_opcode_t) p1[0] == charset_not)
11512: /* MUTANT (rep_const) */			 || (re_opcode_t) p1[1] == charset_not)
11512: /* MUTANT (rep_const) */			 || (re_opcode_t) p1[-1] == charset_not)
11512: /* MUTANT (rep_const) */			 || (re_opcode_t) p1[((3)+1)] == charset_not)
11512: /* MUTANT (rep_const) */			 || (re_opcode_t) p1[((3)-1)] == charset_not)
11514: /* MUTANT (del_stmt) */ /* 		    int not = (re_opcode_t) p1[3] == charset_not; */ 
11514: /* MUTANT (rep_op) */		    int not = (re_opcode_t) p1[3] != charset_not;
11514: /* MUTANT (rep_const) */		    int not = (re_opcode_t) p1[0] == charset_not;
11514: /* MUTANT (rep_const) */		    int not = (re_opcode_t) p1[1] == charset_not;
11514: /* MUTANT (rep_const) */		    int not = (re_opcode_t) p1[-1] == charset_not;
11514: /* MUTANT (rep_const) */		    int not = (re_opcode_t) p1[((3)+1)] == charset_not;
11514: /* MUTANT (rep_const) */		    int not = (re_opcode_t) p1[((3)-1)] == charset_not;
11516: /* MUTANT (rep_op) */		    if (c <= (unsigned char) (p1[4] * BYTEWIDTH)
11516: /* MUTANT (rep_op) */		    if (c > (unsigned char) (p1[4] * BYTEWIDTH)
11516: /* MUTANT (rep_op) */		    if (c >= (unsigned char) (p1[4] * BYTEWIDTH)
11516: /* MUTANT (rep_op) */		    if (c == (unsigned char) (p1[4] * BYTEWIDTH)
11516: /* MUTANT (rep_op) */		    if (c != (unsigned char) (p1[4] * BYTEWIDTH)
11516: /* MUTANT (rep_const) */		    if (c < (unsigned char) (p1[0] * BYTEWIDTH)
11516: /* MUTANT (rep_const) */		    if (c < (unsigned char) (p1[1] * BYTEWIDTH)
11516: /* MUTANT (rep_const) */		    if (c < (unsigned char) (p1[-1] * BYTEWIDTH)
11516: /* MUTANT (rep_const) */		    if (c < (unsigned char) (p1[((4)+1)] * BYTEWIDTH)
11516: /* MUTANT (rep_const) */		    if (c < (unsigned char) (p1[((4)-1)] * BYTEWIDTH)
11517: /* MUTANT (rep_op) */			|| p1[5 + c / BYTEWIDTH] & (1 << (c % BYTEWIDTH)))
11517: /* MUTANT (rep_op) */			&& p1[5 - c / BYTEWIDTH] & (1 << (c % BYTEWIDTH)))
11517: /* MUTANT (rep_op) */			&& p1[5 * c / BYTEWIDTH] & (1 << (c % BYTEWIDTH)))
11517: /* MUTANT (rep_op) */			&& p1[5 % c / BYTEWIDTH] & (1 << (c % BYTEWIDTH)))
11517: /* MUTANT (rep_op) */			&& p1[5 + c / BYTEWIDTH] & (1 << (c + BYTEWIDTH)))
11517: /* MUTANT (rep_op) */			&& p1[5 + c / BYTEWIDTH] & (1 << (c - BYTEWIDTH)))
11517: /* MUTANT (rep_op) */			&& p1[5 + c / BYTEWIDTH] & (1 << (c * BYTEWIDTH)))
11517: /* MUTANT (rep_const) */			&& p1[0 + c / BYTEWIDTH] & (1 << (c % BYTEWIDTH)))
11517: /* MUTANT (rep_const) */			&& p1[1 + c / BYTEWIDTH] & (1 << (c % BYTEWIDTH)))
11517: /* MUTANT (rep_const) */			&& p1[-1 + c / BYTEWIDTH] & (1 << (c % BYTEWIDTH)))
11517: /* MUTANT (rep_const) */			&& p1[((5)+1) + c / BYTEWIDTH] & (1 << (c % BYTEWIDTH)))
11517: /* MUTANT (rep_const) */			&& p1[((5)-1) + c / BYTEWIDTH] & (1 << (c % BYTEWIDTH)))
11517: /* MUTANT (rep_const) */			&& p1[5 + c / BYTEWIDTH] & (0 << (c % BYTEWIDTH)))
11517: /* MUTANT (rep_const) */			&& p1[5 + c / BYTEWIDTH] & (-1 << (c % BYTEWIDTH)))
11517: /* MUTANT (rep_const) */			&& p1[5 + c / BYTEWIDTH] & (((1)+1) << (c % BYTEWIDTH)))
11522: /* MUTANT (negate) */		    if(! (!not))
11524: /* MUTANT (del_stmt) */ /*   		        p[-3] = (unsigned char) pop_failure_jump; */ 
11524: /* MUTANT (rep_const) */  		        p[0] = (unsigned char) pop_failure_jump;
11524: /* MUTANT (rep_const) */  		        p[1] = (unsigned char) pop_failure_jump;
11524: /* MUTANT (rep_const) */  		        p[-1] = (unsigned char) pop_failure_jump;
11524: /* MUTANT (rep_const) */  		        p[((-3)+1)] = (unsigned char) pop_failure_jump;
11524: /* MUTANT (rep_const) */  		        p[((-3)-1)] = (unsigned char) pop_failure_jump;
11525: /* MUTANT (del_stmt) */ /*                         DEBUG_PRINT1 ("  No match => pop_failure_jump.\n"); */ 
11529: /* MUTANT (rep_op) */            else if ((re_opcode_t) *p2 != charset)
11529: /* MUTANT (negate) */            else if(! ((re_opcode_t) *p2 == charset))
11533: /* MUTANT (rep_op) */                  = *p2 != (unsigned char) endline ? '\n' : p2[2];
11533: /* MUTANT (rep_const) */                  = *p2 == (unsigned char) endline ? '\n' : p2[0];
11533: /* MUTANT (rep_const) */                  = *p2 == (unsigned char) endline ? '\n' : p2[1];
11533: /* MUTANT (rep_const) */                  = *p2 == (unsigned char) endline ? '\n' : p2[-1];
11533: /* MUTANT (rep_const) */                  = *p2 == (unsigned char) endline ? '\n' : p2[((2)+1)];
11533: /* MUTANT (rep_const) */                  = *p2 == (unsigned char) endline ? '\n' : p2[((2)-1)];
11536: #if 1 /* MUTANT (rep_const) */
11536: #if -1 /* MUTANT (rep_const) */
11537: /* MUTANT (rep_op) */                if ((re_opcode_t) p1[3] != exactn
11537: /* MUTANT (rep_const) */                if ((re_opcode_t) p1[0] == exactn
11537: /* MUTANT (rep_const) */                if ((re_opcode_t) p1[1] == exactn
11537: /* MUTANT (rep_const) */                if ((re_opcode_t) p1[-1] == exactn
11537: /* MUTANT (rep_const) */                if ((re_opcode_t) p1[((3)+1)] == exactn
11537: /* MUTANT (rep_const) */                if ((re_opcode_t) p1[((3)-1)] == exactn
11538: /* MUTANT (rep_op) */		    || ! ((int) p2[1] * BYTEWIDTH > (int) p1[5]
11538: /* MUTANT (rep_op) */		    && ! ((int) p2[1] * BYTEWIDTH <= (int) p1[5]
11538: /* MUTANT (rep_op) */		    && ! ((int) p2[1] * BYTEWIDTH < (int) p1[5]
11538: /* MUTANT (rep_op) */		    && ! ((int) p2[1] * BYTEWIDTH >= (int) p1[5]
11538: /* MUTANT (rep_op) */		    && ! ((int) p2[1] * BYTEWIDTH == (int) p1[5]
11538: /* MUTANT (rep_op) */		    && ! ((int) p2[1] * BYTEWIDTH != (int) p1[5]
11538: /* MUTANT (rep_const) */		    && ! ((int) p2[0] * BYTEWIDTH > (int) p1[5]
11538: /* MUTANT (rep_const) */		    && ! ((int) p2[-1] * BYTEWIDTH > (int) p1[5]
11538: /* MUTANT (rep_const) */		    && ! ((int) p2[((1)+1)] * BYTEWIDTH > (int) p1[5]
11538: /* MUTANT (rep_const) */		    && ! ((int) p2[1] * BYTEWIDTH > (int) p1[0]
11538: /* MUTANT (rep_const) */		    && ! ((int) p2[1] * BYTEWIDTH > (int) p1[1]
11538: /* MUTANT (rep_const) */		    && ! ((int) p2[1] * BYTEWIDTH > (int) p1[-1]
11538: /* MUTANT (rep_const) */		    && ! ((int) p2[1] * BYTEWIDTH > (int) p1[((5)+1)]
11538: /* MUTANT (rep_const) */		    && ! ((int) p2[1] * BYTEWIDTH > (int) p1[((5)-1)]
11539: /* MUTANT (rep_op) */			  || (p2[2 + p1[5] / BYTEWIDTH]
11539: /* MUTANT (rep_op) */			  && (p2[2 - p1[5] / BYTEWIDTH]
11539: /* MUTANT (rep_op) */			  && (p2[2 * p1[5] / BYTEWIDTH]
11539: /* MUTANT (rep_op) */			  && (p2[2 % p1[5] / BYTEWIDTH]
11539: /* MUTANT (rep_const) */			  && (p2[0 + p1[5] / BYTEWIDTH]
11539: /* MUTANT (rep_const) */			  && (p2[1 + p1[5] / BYTEWIDTH]
11539: /* MUTANT (rep_const) */			  && (p2[-1 + p1[5] / BYTEWIDTH]
11539: /* MUTANT (rep_const) */			  && (p2[((2)+1) + p1[5] / BYTEWIDTH]
11539: /* MUTANT (rep_const) */			  && (p2[((2)-1) + p1[5] / BYTEWIDTH]
11539: /* MUTANT (rep_const) */			  && (p2[2 + p1[0] / BYTEWIDTH]
11539: /* MUTANT (rep_const) */			  && (p2[2 + p1[1] / BYTEWIDTH]
11539: /* MUTANT (rep_const) */			  && (p2[2 + p1[-1] / BYTEWIDTH]
11539: /* MUTANT (rep_const) */			  && (p2[2 + p1[((5)+1)] / BYTEWIDTH]
11539: /* MUTANT (rep_const) */			  && (p2[2 + p1[((5)-1)] / BYTEWIDTH]
11540: /* MUTANT (rep_op) */			      & (1 << (p1[5] + BYTEWIDTH)))))
11540: /* MUTANT (rep_op) */			      & (1 << (p1[5] - BYTEWIDTH)))))
11540: /* MUTANT (rep_op) */			      & (1 << (p1[5] * BYTEWIDTH)))))
11540: /* MUTANT (rep_const) */			      & (0 << (p1[5] % BYTEWIDTH)))))
11540: /* MUTANT (rep_const) */			      & (-1 << (p1[5] % BYTEWIDTH)))))
11540: /* MUTANT (rep_const) */			      & (((1)+1) << (p1[5] % BYTEWIDTH)))))
11540: /* MUTANT (rep_const) */			      & (1 << (p1[0] % BYTEWIDTH)))))
11540: /* MUTANT (rep_const) */			      & (1 << (p1[1] % BYTEWIDTH)))))
11540: /* MUTANT (rep_const) */			      & (1 << (p1[-1] % BYTEWIDTH)))))
11540: /* MUTANT (rep_const) */			      & (1 << (p1[((5)+1)] % BYTEWIDTH)))))
11540: /* MUTANT (rep_const) */			      & (1 << (p1[((5)-1)] % BYTEWIDTH)))))
11542: /* MUTANT (rep_op) */                if ((re_opcode_t) p1[3] != exactn
11542: /* MUTANT (rep_const) */                if ((re_opcode_t) p1[0] == exactn
11542: /* MUTANT (rep_const) */                if ((re_opcode_t) p1[1] == exactn
11542: /* MUTANT (rep_const) */                if ((re_opcode_t) p1[-1] == exactn
11542: /* MUTANT (rep_const) */                if ((re_opcode_t) p1[((3)+1)] == exactn
11542: /* MUTANT (rep_const) */                if ((re_opcode_t) p1[((3)-1)] == exactn
11543: /* MUTANT (rep_op) */		    || ! ((int) p2[1] * BYTEWIDTH > (int) p1[4]
11543: /* MUTANT (rep_op) */		    && ! ((int) p2[1] * BYTEWIDTH <= (int) p1[4]
11543: /* MUTANT (rep_op) */		    && ! ((int) p2[1] * BYTEWIDTH < (int) p1[4]
11543: /* MUTANT (rep_op) */		    && ! ((int) p2[1] * BYTEWIDTH >= (int) p1[4]
11543: /* MUTANT (rep_op) */		    && ! ((int) p2[1] * BYTEWIDTH == (int) p1[4]
11543: /* MUTANT (rep_op) */		    && ! ((int) p2[1] * BYTEWIDTH != (int) p1[4]
11543: /* MUTANT (rep_const) */		    && ! ((int) p2[0] * BYTEWIDTH > (int) p1[4]
11543: /* MUTANT (rep_const) */		    && ! ((int) p2[-1] * BYTEWIDTH > (int) p1[4]
11543: /* MUTANT (rep_const) */		    && ! ((int) p2[((1)+1)] * BYTEWIDTH > (int) p1[4]
11543: /* MUTANT (rep_const) */		    && ! ((int) p2[1] * BYTEWIDTH > (int) p1[0]
11543: /* MUTANT (rep_const) */		    && ! ((int) p2[1] * BYTEWIDTH > (int) p1[1]
11543: /* MUTANT (rep_const) */		    && ! ((int) p2[1] * BYTEWIDTH > (int) p1[-1]
11543: /* MUTANT (rep_const) */		    && ! ((int) p2[1] * BYTEWIDTH > (int) p1[((4)+1)]
11543: /* MUTANT (rep_const) */		    && ! ((int) p2[1] * BYTEWIDTH > (int) p1[((4)-1)]
11544: /* MUTANT (rep_op) */			  || (p2[2 + p1[4] / BYTEWIDTH]
11544: /* MUTANT (rep_op) */			  && (p2[2 - p1[4] / BYTEWIDTH]
11544: /* MUTANT (rep_op) */			  && (p2[2 * p1[4] / BYTEWIDTH]
11544: /* MUTANT (rep_op) */			  && (p2[2 % p1[4] / BYTEWIDTH]
11544: /* MUTANT (rep_const) */			  && (p2[0 + p1[4] / BYTEWIDTH]
11544: /* MUTANT (rep_const) */			  && (p2[1 + p1[4] / BYTEWIDTH]
11544: /* MUTANT (rep_const) */			  && (p2[-1 + p1[4] / BYTEWIDTH]
11544: /* MUTANT (rep_const) */			  && (p2[((2)+1) + p1[4] / BYTEWIDTH]
11544: /* MUTANT (rep_const) */			  && (p2[((2)-1) + p1[4] / BYTEWIDTH]
11544: /* MUTANT (rep_const) */			  && (p2[2 + p1[0] / BYTEWIDTH]
11544: /* MUTANT (rep_const) */			  && (p2[2 + p1[1] / BYTEWIDTH]
11544: /* MUTANT (rep_const) */			  && (p2[2 + p1[-1] / BYTEWIDTH]
11544: /* MUTANT (rep_const) */			  && (p2[2 + p1[((4)+1)] / BYTEWIDTH]
11544: /* MUTANT (rep_const) */			  && (p2[2 + p1[((4)-1)] / BYTEWIDTH]
11545: /* MUTANT (rep_op) */			      & (1 << (p1[4] + BYTEWIDTH)))))
11545: /* MUTANT (rep_op) */			      & (1 << (p1[4] - BYTEWIDTH)))))
11545: /* MUTANT (rep_op) */			      & (1 << (p1[4] * BYTEWIDTH)))))
11545: /* MUTANT (rep_const) */			      & (0 << (p1[4] % BYTEWIDTH)))))
11545: /* MUTANT (rep_const) */			      & (-1 << (p1[4] % BYTEWIDTH)))))
11545: /* MUTANT (rep_const) */			      & (((1)+1) << (p1[4] % BYTEWIDTH)))))
11545: /* MUTANT (rep_const) */			      & (1 << (p1[0] % BYTEWIDTH)))))
11545: /* MUTANT (rep_const) */			      & (1 << (p1[1] % BYTEWIDTH)))))
11545: /* MUTANT (rep_const) */			      & (1 << (p1[-1] % BYTEWIDTH)))))
11545: /* MUTANT (rep_const) */			      & (1 << (p1[((4)+1)] % BYTEWIDTH)))))
11545: /* MUTANT (rep_const) */			      & (1 << (p1[((4)-1)] % BYTEWIDTH)))))
11548: /* MUTANT (del_stmt) */ /*   		    p[-3] = (unsigned char) pop_failure_jump; */ 
11548: /* MUTANT (rep_const) */  		    p[0] = (unsigned char) pop_failure_jump;
11548: /* MUTANT (rep_const) */  		    p[1] = (unsigned char) pop_failure_jump;
11548: /* MUTANT (rep_const) */  		    p[-1] = (unsigned char) pop_failure_jump;
11548: /* MUTANT (rep_const) */  		    p[((-3)+1)] = (unsigned char) pop_failure_jump;
11548: /* MUTANT (rep_const) */  		    p[((-3)-1)] = (unsigned char) pop_failure_jump;
11550: /* MUTANT (rep_const) */                                  c, p1[0]);
11550: /* MUTANT (rep_const) */                                  c, p1[1]);
11550: /* MUTANT (rep_const) */                                  c, p1[-1]);
11550: /* MUTANT (rep_const) */                                  c, p1[((5)+1)]);
11550: /* MUTANT (rep_const) */                                  c, p1[((5)-1)]);
11553: /* MUTANT (rep_op) */		else if ((re_opcode_t) p1[3] != charset_not)
11553: /* MUTANT (rep_const) */		else if ((re_opcode_t) p1[0] == charset_not)
11553: /* MUTANT (rep_const) */		else if ((re_opcode_t) p1[1] == charset_not)
11553: /* MUTANT (rep_const) */		else if ((re_opcode_t) p1[-1] == charset_not)
11553: /* MUTANT (rep_const) */		else if ((re_opcode_t) p1[((3)+1)] == charset_not)
11553: /* MUTANT (rep_const) */		else if ((re_opcode_t) p1[((3)-1)] == charset_not)
11553: /* MUTANT (negate) */		else if(! ((re_opcode_t) p1[3] == charset_not))
11555: /* MUTANT (del_stmt) */ /* 		    int idx; */ 
11558: /* MUTANT (rep_op) */		    for (idx = 0; idx <= (int) p2[1]; idx++)
11558: /* MUTANT (rep_op) */		    for (idx = 0; idx > (int) p2[1]; idx++)
11558: /* MUTANT (rep_op) */		    for (idx = 0; idx >= (int) p2[1]; idx++)
11558: /* MUTANT (rep_op) */		    for (idx = 0; idx == (int) p2[1]; idx++)
11558: /* MUTANT (rep_op) */		    for (idx = 0; idx != (int) p2[1]; idx++)
11558: /* MUTANT (rep_op) */		    for (idx = 0; idx < (int) p2[1]; idx--)
11558: /* MUTANT (rep_const) */		    for (idx = 1; idx < (int) p2[1]; idx++)
11558: /* MUTANT (rep_const) */		    for (idx = -1; idx < (int) p2[1]; idx++)
11558: /* MUTANT (rep_const) */		    for (idx = 0; idx < (int) p2[0]; idx++)
11558: /* MUTANT (rep_const) */		    for (idx = 0; idx < (int) p2[-1]; idx++)
11558: /* MUTANT (rep_const) */		    for (idx = 0; idx < (int) p2[((1)+1)]; idx++)
11559: /* MUTANT (rep_op) */		      if (! (p2[2 - idx] == 0
11559: /* MUTANT (rep_op) */		      if (! (p2[2 * idx] == 0
11559: /* MUTANT (rep_op) */		      if (! (p2[2 % idx] == 0
11559: /* MUTANT (rep_op) */		      if (! (p2[2 + idx] != 0
11559: /* MUTANT (rep_const) */		      if (! (p2[0 + idx] == 0
11559: /* MUTANT (rep_const) */		      if (! (p2[1 + idx] == 0
11559: /* MUTANT (rep_const) */		      if (! (p2[-1 + idx] == 0
11559: /* MUTANT (rep_const) */		      if (! (p2[((2)+1) + idx] == 0
11559: /* MUTANT (rep_const) */		      if (! (p2[((2)-1) + idx] == 0
11559: /* MUTANT (rep_const) */		      if (! (p2[2 + idx] == 1
11559: /* MUTANT (rep_const) */		      if (! (p2[2 + idx] == -1
11560: /* MUTANT (rep_op) */			     && (idx < (int) p1[4]
11560: /* MUTANT (rep_op) */			     || (idx <= (int) p1[4]
11560: /* MUTANT (rep_op) */			     || (idx > (int) p1[4]
11560: /* MUTANT (rep_op) */			     || (idx >= (int) p1[4]
11560: /* MUTANT (rep_op) */			     || (idx == (int) p1[4]
11560: /* MUTANT (rep_op) */			     || (idx != (int) p1[4]
11560: /* MUTANT (rep_const) */			     || (idx < (int) p1[0]
11560: /* MUTANT (rep_const) */			     || (idx < (int) p1[1]
11560: /* MUTANT (rep_const) */			     || (idx < (int) p1[-1]
11560: /* MUTANT (rep_const) */			     || (idx < (int) p1[((4)+1)]
11560: /* MUTANT (rep_const) */			     || (idx < (int) p1[((4)-1)]
11561: /* MUTANT (rep_op) */				 || ((p2[2 + idx] & ~ p1[5 + idx]) == 0))))
11561: /* MUTANT (rep_op) */				 && ((p2[2 - idx] & ~ p1[5 + idx]) == 0))))
11561: /* MUTANT (rep_op) */				 && ((p2[2 * idx] & ~ p1[5 + idx]) == 0))))
11561: /* MUTANT (rep_op) */				 && ((p2[2 % idx] & ~ p1[5 + idx]) == 0))))
11561: /* MUTANT (rep_op) */				 && ((p2[2 + idx] & ~ p1[5 - idx]) == 0))))
11561: /* MUTANT (rep_op) */				 && ((p2[2 + idx] & ~ p1[5 * idx]) == 0))))
11561: /* MUTANT (rep_op) */				 && ((p2[2 + idx] & ~ p1[5 % idx]) == 0))))
11561: /* MUTANT (rep_op) */				 && ((p2[2 + idx] & ~ p1[5 + idx]) != 0))))
11561: /* MUTANT (rep_const) */				 && ((p2[0 + idx] & ~ p1[5 + idx]) == 0))))
11561: /* MUTANT (rep_const) */				 && ((p2[1 + idx] & ~ p1[5 + idx]) == 0))))
11561: /* MUTANT (rep_const) */				 && ((p2[-1 + idx] & ~ p1[5 + idx]) == 0))))
11561: /* MUTANT (rep_const) */				 && ((p2[((2)+1) + idx] & ~ p1[5 + idx]) == 0))))
11561: /* MUTANT (rep_const) */				 && ((p2[((2)-1) + idx] & ~ p1[5 + idx]) == 0))))
11561: /* MUTANT (rep_const) */				 && ((p2[2 + idx] & ~ p1[0 + idx]) == 0))))
11561: /* MUTANT (rep_const) */				 && ((p2[2 + idx] & ~ p1[1 + idx]) == 0))))
11561: /* MUTANT (rep_const) */				 && ((p2[2 + idx] & ~ p1[-1 + idx]) == 0))))
11561: /* MUTANT (rep_const) */				 && ((p2[2 + idx] & ~ p1[((5)+1) + idx]) == 0))))
11561: /* MUTANT (rep_const) */				 && ((p2[2 + idx] & ~ p1[((5)-1) + idx]) == 0))))
11561: /* MUTANT (rep_const) */				 && ((p2[2 + idx] & ~ p1[5 + idx]) == 1))))
11561: /* MUTANT (rep_const) */				 && ((p2[2 + idx] & ~ p1[5 + idx]) == -1))))
11564: /* MUTANT (rep_op) */		    if (idx != p2[1])
11564: /* MUTANT (rep_const) */		    if (idx == p2[0])
11564: /* MUTANT (rep_const) */		    if (idx == p2[-1])
11564: /* MUTANT (rep_const) */		    if (idx == p2[((1)+1)])
11564: /* MUTANT (negate) */		    if(! (idx == p2[1]))
11566: /* MUTANT (del_stmt) */ /*   		        p[-3] = (unsigned char) pop_failure_jump; */ 
11566: /* MUTANT (rep_const) */  		        p[0] = (unsigned char) pop_failure_jump;
11566: /* MUTANT (rep_const) */  		        p[1] = (unsigned char) pop_failure_jump;
11566: /* MUTANT (rep_const) */  		        p[-1] = (unsigned char) pop_failure_jump;
11566: /* MUTANT (rep_const) */  		        p[((-3)+1)] = (unsigned char) pop_failure_jump;
11566: /* MUTANT (rep_const) */  		        p[((-3)-1)] = (unsigned char) pop_failure_jump;
11567: /* MUTANT (del_stmt) */ /*                         DEBUG_PRINT1 ("  No match => pop_failure_jump.\n"); */ 
11570: /* MUTANT (rep_op) */		else if ((re_opcode_t) p1[3] != charset)
11570: /* MUTANT (rep_const) */		else if ((re_opcode_t) p1[0] == charset)
11570: /* MUTANT (rep_const) */		else if ((re_opcode_t) p1[1] == charset)
11570: /* MUTANT (rep_const) */		else if ((re_opcode_t) p1[-1] == charset)
11570: /* MUTANT (rep_const) */		else if ((re_opcode_t) p1[((3)+1)] == charset)
11570: /* MUTANT (rep_const) */		else if ((re_opcode_t) p1[((3)-1)] == charset)
11570: /* MUTANT (negate) */		else if(! ((re_opcode_t) p1[3] == charset))
11572: /* MUTANT (del_stmt) */ /* 		    int idx; */ 
11575: /* MUTANT (rep_const) */		    for (idx = 1;
11575: /* MUTANT (rep_const) */		    for (idx = -1;
11576: /* MUTANT (del_stmt) */ /* 			 idx < (int) p2[1] && idx < (int) p1[4]; */ 
11576: /* MUTANT (rep_op) */			 idx <= (int) p2[1] && idx < (int) p1[4];
11576: /* MUTANT (rep_op) */			 idx > (int) p2[1] && idx < (int) p1[4];
11576: /* MUTANT (rep_op) */			 idx >= (int) p2[1] && idx < (int) p1[4];
11576: /* MUTANT (rep_op) */			 idx == (int) p2[1] && idx < (int) p1[4];
11576: /* MUTANT (rep_op) */			 idx != (int) p2[1] && idx < (int) p1[4];
11576: /* MUTANT (rep_op) */			 idx < (int) p2[1] || idx < (int) p1[4];
11576: /* MUTANT (rep_op) */			 idx < (int) p2[1] && idx <= (int) p1[4];
11576: /* MUTANT (rep_op) */			 idx < (int) p2[1] && idx > (int) p1[4];
11576: /* MUTANT (rep_op) */			 idx < (int) p2[1] && idx >= (int) p1[4];
11576: /* MUTANT (rep_op) */			 idx < (int) p2[1] && idx == (int) p1[4];
11576: /* MUTANT (rep_op) */			 idx < (int) p2[1] && idx != (int) p1[4];
11576: /* MUTANT (rep_const) */			 idx < (int) p2[0] && idx < (int) p1[4];
11576: /* MUTANT (rep_const) */			 idx < (int) p2[-1] && idx < (int) p1[4];
11576: /* MUTANT (rep_const) */			 idx < (int) p2[((1)+1)] && idx < (int) p1[4];
11576: /* MUTANT (rep_const) */			 idx < (int) p2[1] && idx < (int) p1[0];
11576: /* MUTANT (rep_const) */			 idx < (int) p2[1] && idx < (int) p1[1];
11576: /* MUTANT (rep_const) */			 idx < (int) p2[1] && idx < (int) p1[-1];
11576: /* MUTANT (rep_const) */			 idx < (int) p2[1] && idx < (int) p1[((4)+1)];
11576: /* MUTANT (rep_const) */			 idx < (int) p2[1] && idx < (int) p1[((4)-1)];
11577: /* MUTANT (rep_op) */			 idx--)
11578: /* MUTANT (rep_op) */		      if ((p2[2 - idx] & p1[5 + idx]) != 0)
11578: /* MUTANT (rep_op) */		      if ((p2[2 * idx] & p1[5 + idx]) != 0)
11578: /* MUTANT (rep_op) */		      if ((p2[2 % idx] & p1[5 + idx]) != 0)
11578: /* MUTANT (rep_op) */		      if ((p2[2 + idx] & p1[5 - idx]) != 0)
11578: /* MUTANT (rep_op) */		      if ((p2[2 + idx] & p1[5 * idx]) != 0)
11578: /* MUTANT (rep_op) */		      if ((p2[2 + idx] & p1[5 % idx]) != 0)
11578: /* MUTANT (rep_op) */		      if ((p2[2 + idx] & p1[5 + idx]) == 0)
11578: /* MUTANT (rep_const) */		      if ((p2[0 + idx] & p1[5 + idx]) != 0)
11578: /* MUTANT (rep_const) */		      if ((p2[1 + idx] & p1[5 + idx]) != 0)
11578: /* MUTANT (rep_const) */		      if ((p2[-1 + idx] & p1[5 + idx]) != 0)
11578: /* MUTANT (rep_const) */		      if ((p2[((2)+1) + idx] & p1[5 + idx]) != 0)
11578: /* MUTANT (rep_const) */		      if ((p2[((2)-1) + idx] & p1[5 + idx]) != 0)
11578: /* MUTANT (rep_const) */		      if ((p2[2 + idx] & p1[0 + idx]) != 0)
11578: /* MUTANT (rep_const) */		      if ((p2[2 + idx] & p1[1 + idx]) != 0)
11578: /* MUTANT (rep_const) */		      if ((p2[2 + idx] & p1[-1 + idx]) != 0)
11578: /* MUTANT (rep_const) */		      if ((p2[2 + idx] & p1[((5)+1) + idx]) != 0)
11578: /* MUTANT (rep_const) */		      if ((p2[2 + idx] & p1[((5)-1) + idx]) != 0)
11578: /* MUTANT (rep_const) */		      if ((p2[2 + idx] & p1[5 + idx]) != 1)
11578: /* MUTANT (rep_const) */		      if ((p2[2 + idx] & p1[5 + idx]) != -1)
11578: /* MUTANT (negate) */		      if(! ((p2[2 + idx] & p1[5 + idx]) != 0))
11581: /* MUTANT (rep_op) */		    if (idx != p2[1] || idx == p1[4])
11581: /* MUTANT (rep_op) */		    if (idx == p2[1] && idx == p1[4])
11581: /* MUTANT (rep_op) */		    if (idx == p2[1] || idx != p1[4])
11581: /* MUTANT (rep_const) */		    if (idx == p2[0] || idx == p1[4])
11581: /* MUTANT (rep_const) */		    if (idx == p2[-1] || idx == p1[4])
11581: /* MUTANT (rep_const) */		    if (idx == p2[((1)+1)] || idx == p1[4])
11581: /* MUTANT (rep_const) */		    if (idx == p2[1] || idx == p1[0])
11581: /* MUTANT (rep_const) */		    if (idx == p2[1] || idx == p1[1])
11581: /* MUTANT (rep_const) */		    if (idx == p2[1] || idx == p1[-1])
11581: /* MUTANT (rep_const) */		    if (idx == p2[1] || idx == p1[((4)+1)])
11581: /* MUTANT (rep_const) */		    if (idx == p2[1] || idx == p1[((4)-1)])
11581: /* MUTANT (negate) */		    if(! (idx == p2[1] || idx == p1[4]))
11583: /* MUTANT (del_stmt) */ /*   		        p[-3] = (unsigned char) pop_failure_jump; */ 
11583: /* MUTANT (rep_const) */  		        p[0] = (unsigned char) pop_failure_jump;
11583: /* MUTANT (rep_const) */  		        p[1] = (unsigned char) pop_failure_jump;
11583: /* MUTANT (rep_const) */  		        p[-1] = (unsigned char) pop_failure_jump;
11583: /* MUTANT (rep_const) */  		        p[((-3)+1)] = (unsigned char) pop_failure_jump;
11583: /* MUTANT (rep_const) */  		        p[((-3)-1)] = (unsigned char) pop_failure_jump;
11584: /* MUTANT (del_stmt) */ /*                         DEBUG_PRINT1 ("  No match => pop_failure_jump.\n"); */ 
11589: /* MUTANT (rep_op) */	  p += 2;		/* Point at relative address again.  */
11589: /* MUTANT (rep_op) */	  p *= 2;		/* Point at relative address again.  */
11589: /* MUTANT (rep_op) */	  p %= 2;		/* Point at relative address again.  */
11589: /* MUTANT (rep_const) */	  p -= 0;		/* Point at relative address again.  */
11589: /* MUTANT (rep_const) */	  p -= 1;		/* Point at relative address again.  */
11589: /* MUTANT (rep_const) */	  p -= -1;		/* Point at relative address again.  */
11589: /* MUTANT (rep_const) */	  p -= ((2)+1);		/* Point at relative address again.  */
11589: /* MUTANT (rep_const) */	  p -= ((2)-1);		/* Point at relative address again.  */
11590: /* MUTANT (rep_op) */	  if ((re_opcode_t) p[-1] == pop_failure_jump)
11590: /* MUTANT (rep_const) */	  if ((re_opcode_t) p[0] != pop_failure_jump)
11590: /* MUTANT (rep_const) */	  if ((re_opcode_t) p[1] != pop_failure_jump)
11590: /* MUTANT (rep_const) */	  if ((re_opcode_t) p[((-1)+1)] != pop_failure_jump)
11590: /* MUTANT (rep_const) */	  if ((re_opcode_t) p[((-1)-1)] != pop_failure_jump)
11590: /* MUTANT (negate) */	  if(! ((re_opcode_t) p[-1] != pop_failure_jump))
11592: /* MUTANT (del_stmt) */ /* 	      p[-1] = (unsigned char) jump; */ 
11592: /* MUTANT (rep_const) */	      p[0] = (unsigned char) jump;
11592: /* MUTANT (rep_const) */	      p[1] = (unsigned char) jump;
11592: /* MUTANT (rep_const) */	      p[((-1)+1)] = (unsigned char) jump;
11592: /* MUTANT (rep_const) */	      p[((-1)-1)] = (unsigned char) jump;
11593: /* MUTANT (del_stmt) */ /*               DEBUG_PRINT1 ("  Match => jump.\n"); */ 
11594: /* MUTANT (del_stmt) */ /* 	      goto unconditional_jump; */ 
11612: /* MUTANT (del_stmt) */ /*             active_reg_t dummy_low_reg, dummy_high_reg; */ 
11613: /* MUTANT (del_stmt) */ /*             unsigned char *pdummy; */ 
11614: /* MUTANT (del_stmt) */ /*             const char *sdummy; */ 
11616: /* MUTANT (del_stmt) */ /*             DEBUG_PRINT1 ("EXECUTING pop_failure_jump.\n"); */ 
11634: /* MUTANT (del_stmt) */ /*           DEBUG_PRINT2 ("EXECUTING jump %d ", mcnt); */ 
11635: /* MUTANT (del_stmt) */ /* 	  p += mcnt; */ 				/* Do the jump.  */
11635: /* MUTANT (rep_op) */	  p -= mcnt;				/* Do the jump.  */
11635: /* MUTANT (rep_op) */	  p *= mcnt;				/* Do the jump.  */
11635: /* MUTANT (rep_op) */	  p %= mcnt;				/* Do the jump.  */
11639: /* MUTANT (rep_const) */          DEBUG_PRINT2 ("(to 1x%x).\n", p);
11639: /* MUTANT (rep_const) */          DEBUG_PRINT2 ("(to -1x%x).\n", p);
11648: /* MUTANT (del_stmt) */ /*           goto unconditional_jump; */ 
11660: /* MUTANT (del_stmt) */ /*           PUSH_FAILURE_POINT (0, 0, -2); */ 
11660: /* MUTANT (rep_const) */          PUSH_FAILURE_POINT (1, 0, -2);
11660: /* MUTANT (rep_const) */          PUSH_FAILURE_POINT (-1, 0, -2);
11660: /* MUTANT (rep_const) */          PUSH_FAILURE_POINT (0, 1, -2);
11660: /* MUTANT (rep_const) */          PUSH_FAILURE_POINT (0, -1, -2);
11660: /* MUTANT (rep_const) */          PUSH_FAILURE_POINT (0, 0, 0);
11660: /* MUTANT (rep_const) */          PUSH_FAILURE_POINT (0, 0, 1);
11660: /* MUTANT (rep_const) */          PUSH_FAILURE_POINT (0, 0, -1);
11660: /* MUTANT (rep_const) */          PUSH_FAILURE_POINT (0, 0, ((-2)+1));
11660: /* MUTANT (rep_const) */          PUSH_FAILURE_POINT (0, 0, ((-2)-1));
11661: /* MUTANT (del_stmt) */ /*           goto unconditional_jump; */ 
11673: /* MUTANT (del_stmt) */ /*           PUSH_FAILURE_POINT (0, 0, -2); */ 
11673: /* MUTANT (rep_const) */          PUSH_FAILURE_POINT (1, 0, -2);
11673: /* MUTANT (rep_const) */          PUSH_FAILURE_POINT (-1, 0, -2);
11673: /* MUTANT (rep_const) */          PUSH_FAILURE_POINT (0, 1, -2);
11673: /* MUTANT (rep_const) */          PUSH_FAILURE_POINT (0, -1, -2);
11673: /* MUTANT (rep_const) */          PUSH_FAILURE_POINT (0, 0, 0);
11673: /* MUTANT (rep_const) */          PUSH_FAILURE_POINT (0, 0, 1);
11673: /* MUTANT (rep_const) */          PUSH_FAILURE_POINT (0, 0, -1);
11673: /* MUTANT (rep_const) */          PUSH_FAILURE_POINT (0, 0, ((-2)+1));
11673: /* MUTANT (rep_const) */          PUSH_FAILURE_POINT (0, 0, ((-2)-1));
11674: /* MUTANT (del_stmt) */ /*           break; */ 
11679: /* MUTANT (rep_op) */          EXTRACT_NUMBER (mcnt, p - 2);
11679: /* MUTANT (rep_op) */          EXTRACT_NUMBER (mcnt, p * 2);
11679: /* MUTANT (rep_op) */          EXTRACT_NUMBER (mcnt, p % 2);
11679: /* MUTANT (rep_const) */          EXTRACT_NUMBER (mcnt, p + 0);
11679: /* MUTANT (rep_const) */          EXTRACT_NUMBER (mcnt, p + 1);
11679: /* MUTANT (rep_const) */          EXTRACT_NUMBER (mcnt, p + -1);
11679: /* MUTANT (rep_const) */          EXTRACT_NUMBER (mcnt, p + ((2)+1));
11679: /* MUTANT (rep_const) */          EXTRACT_NUMBER (mcnt, p + ((2)-1));
11680: /* MUTANT (del_stmt) */ /*           DEBUG_PRINT2 ("EXECUTING succeed_n %d.\n", mcnt); */ 
11682: /* MUTANT (del_stmt) */ /*           assert (mcnt >= 0); */ 
11682: /* MUTANT (rep_op) */          assert (mcnt <= 0);
11682: /* MUTANT (rep_op) */          assert (mcnt < 0);
11682: /* MUTANT (rep_op) */          assert (mcnt > 0);
11682: /* MUTANT (rep_op) */          assert (mcnt == 0);
11682: /* MUTANT (rep_op) */          assert (mcnt != 0);
11682: /* MUTANT (rep_const) */          assert (mcnt >= 1);
11682: /* MUTANT (rep_const) */          assert (mcnt >= -1);
11684: /* MUTANT (rep_op) */          if (mcnt <= 0)
11684: /* MUTANT (rep_op) */          if (mcnt < 0)
11684: /* MUTANT (rep_op) */          if (mcnt >= 0)
11684: /* MUTANT (rep_op) */          if (mcnt == 0)
11684: /* MUTANT (rep_op) */          if (mcnt != 0)
11684: /* MUTANT (rep_const) */          if (mcnt > 1)
11684: /* MUTANT (rep_const) */          if (mcnt > -1)
11684: /* MUTANT (negate) */          if(! (mcnt > 0))
11686: /* MUTANT (del_stmt) */ /*                mcnt--; */ 
11686: /* MUTANT (rep_op) */               mcnt++;
11687: /* MUTANT (del_stmt) */ /* 	       p += 2; */ 
11687: /* MUTANT (rep_op) */	       p -= 2;
11687: /* MUTANT (rep_op) */	       p *= 2;
11687: /* MUTANT (rep_op) */	       p %= 2;
11687: /* MUTANT (rep_const) */	       p += 0;
11687: /* MUTANT (rep_const) */	       p += 1;
11687: /* MUTANT (rep_const) */	       p += -1;
11687: /* MUTANT (rep_const) */	       p += ((2)+1);
11687: /* MUTANT (rep_const) */	       p += ((2)-1);
11688: /* MUTANT (del_stmt) */ /*                STORE_NUMBER_AND_INCR (p, mcnt); */ 
11690: /* MUTANT (rep_const) */               DEBUG_PRINT3 ("  Setting %p to %d.\n", p - 0, mcnt);
11690: /* MUTANT (rep_const) */               DEBUG_PRINT3 ("  Setting %p to %d.\n", p - 1, mcnt);
11690: /* MUTANT (rep_const) */               DEBUG_PRINT3 ("  Setting %p to %d.\n", p - -1, mcnt);
11690: /* MUTANT (rep_const) */               DEBUG_PRINT3 ("  Setting %p to %d.\n", p - ((2)+1), mcnt);
11690: /* MUTANT (rep_const) */               DEBUG_PRINT3 ("  Setting %p to %d.\n", p - ((2)-1), mcnt);
11692: /* MUTANT (rep_const) */               DEBUG_PRINT3 ("  Setting 1x%x to %d.\n", p - 2, mcnt);
11692: /* MUTANT (rep_const) */               DEBUG_PRINT3 ("  Setting -1x%x to %d.\n", p - 2, mcnt);
11692: /* MUTANT (rep_const) */               DEBUG_PRINT3 ("  Setting 0x%x to %d.\n", p - 0, mcnt);
11692: /* MUTANT (rep_const) */               DEBUG_PRINT3 ("  Setting 0x%x to %d.\n", p - 1, mcnt);
11692: /* MUTANT (rep_const) */               DEBUG_PRINT3 ("  Setting 0x%x to %d.\n", p - -1, mcnt);
11692: /* MUTANT (rep_const) */               DEBUG_PRINT3 ("  Setting 0x%x to %d.\n", p - ((2)+1), mcnt);
11692: /* MUTANT (rep_const) */               DEBUG_PRINT3 ("  Setting 0x%x to %d.\n", p - ((2)-1), mcnt);
11695: /* MUTANT (rep_op) */	  else if (mcnt != 0)
11695: /* MUTANT (rep_const) */	  else if (mcnt == 1)
11695: /* MUTANT (rep_const) */	  else if (mcnt == -1)
11695: /* MUTANT (negate) */	  else if(! (mcnt == 0))
11698: /* MUTANT (rep_op) */              DEBUG_PRINT2 ("  Setting two bytes from %p to no_op.\n", p-2);
11698: /* MUTANT (rep_op) */              DEBUG_PRINT2 ("  Setting two bytes from %p to no_op.\n", p*2);
11698: /* MUTANT (rep_op) */              DEBUG_PRINT2 ("  Setting two bytes from %p to no_op.\n", p%2);
11698: /* MUTANT (rep_const) */              DEBUG_PRINT2 ("  Setting two bytes from %p to no_op.\n", p+0);
11698: /* MUTANT (rep_const) */              DEBUG_PRINT2 ("  Setting two bytes from %p to no_op.\n", p+1);
11698: /* MUTANT (rep_const) */              DEBUG_PRINT2 ("  Setting two bytes from %p to no_op.\n", p+-1);
11698: /* MUTANT (rep_const) */              DEBUG_PRINT2 ("  Setting two bytes from %p to no_op.\n", p+((2)+1));
11698: /* MUTANT (rep_const) */              DEBUG_PRINT2 ("  Setting two bytes from %p to no_op.\n", p+((2)-1));
11700: /* MUTANT (rep_op) */              DEBUG_PRINT2 ("  Setting two bytes from 0x%x to no_op.\n", p-2);
11700: /* MUTANT (rep_op) */              DEBUG_PRINT2 ("  Setting two bytes from 0x%x to no_op.\n", p*2);
11700: /* MUTANT (rep_op) */              DEBUG_PRINT2 ("  Setting two bytes from 0x%x to no_op.\n", p%2);
11700: /* MUTANT (rep_const) */              DEBUG_PRINT2 ("  Setting two bytes from 1x%x to no_op.\n", p+2);
11700: /* MUTANT (rep_const) */              DEBUG_PRINT2 ("  Setting two bytes from -1x%x to no_op.\n", p+2);
11700: /* MUTANT (rep_const) */              DEBUG_PRINT2 ("  Setting two bytes from 0x%x to no_op.\n", p+0);
11700: /* MUTANT (rep_const) */              DEBUG_PRINT2 ("  Setting two bytes from 0x%x to no_op.\n", p+1);
11700: /* MUTANT (rep_const) */              DEBUG_PRINT2 ("  Setting two bytes from 0x%x to no_op.\n", p+-1);
11700: /* MUTANT (rep_const) */              DEBUG_PRINT2 ("  Setting two bytes from 0x%x to no_op.\n", p+((2)+1));
11700: /* MUTANT (rep_const) */              DEBUG_PRINT2 ("  Setting two bytes from 0x%x to no_op.\n", p+((2)-1));
11702: /* MUTANT (rep_const) */	      p[0] = (unsigned char) no_op;
11702: /* MUTANT (rep_const) */	      p[1] = (unsigned char) no_op;
11702: /* MUTANT (rep_const) */	      p[-1] = (unsigned char) no_op;
11702: /* MUTANT (rep_const) */	      p[((2)+1)] = (unsigned char) no_op;
11702: /* MUTANT (rep_const) */	      p[((2)-1)] = (unsigned char) no_op;
11703: /* MUTANT (del_stmt) */ /*               p[3] = (unsigned char) no_op; */ 
11703: /* MUTANT (rep_const) */              p[0] = (unsigned char) no_op;
11703: /* MUTANT (rep_const) */              p[1] = (unsigned char) no_op;
11703: /* MUTANT (rep_const) */              p[-1] = (unsigned char) no_op;
11703: /* MUTANT (rep_const) */              p[((3)+1)] = (unsigned char) no_op;
11703: /* MUTANT (rep_const) */              p[((3)-1)] = (unsigned char) no_op;
11704: /* MUTANT (del_stmt) */ /*               goto on_failure; */ 
11709: /* MUTANT (rep_op) */          EXTRACT_NUMBER (mcnt, p - 2);
11709: /* MUTANT (rep_op) */          EXTRACT_NUMBER (mcnt, p * 2);
11709: /* MUTANT (rep_op) */          EXTRACT_NUMBER (mcnt, p % 2);
11709: /* MUTANT (rep_const) */          EXTRACT_NUMBER (mcnt, p + 0);
11709: /* MUTANT (rep_const) */          EXTRACT_NUMBER (mcnt, p + 1);
11709: /* MUTANT (rep_const) */          EXTRACT_NUMBER (mcnt, p + -1);
11709: /* MUTANT (rep_const) */          EXTRACT_NUMBER (mcnt, p + ((2)+1));
11709: /* MUTANT (rep_const) */          EXTRACT_NUMBER (mcnt, p + ((2)-1));
11710: /* MUTANT (del_stmt) */ /*           DEBUG_PRINT2 ("EXECUTING jump_n %d.\n", mcnt); */ 
11713: /* MUTANT (negate) */          if(! (mcnt))
11715: /* MUTANT (del_stmt) */ /*                mcnt--; */ 
11715: /* MUTANT (rep_op) */               mcnt++;
11716: /* MUTANT (del_stmt) */ /*                STORE_NUMBER (p + 2, mcnt); */ 
11716: /* MUTANT (rep_op) */               STORE_NUMBER (p - 2, mcnt);
11716: /* MUTANT (rep_op) */               STORE_NUMBER (p * 2, mcnt);
11716: /* MUTANT (rep_op) */               STORE_NUMBER (p % 2, mcnt);
11716: /* MUTANT (rep_const) */               STORE_NUMBER (p + 0, mcnt);
11716: /* MUTANT (rep_const) */               STORE_NUMBER (p + 1, mcnt);
11716: /* MUTANT (rep_const) */               STORE_NUMBER (p + -1, mcnt);
11716: /* MUTANT (rep_const) */               STORE_NUMBER (p + ((2)+1), mcnt);
11716: /* MUTANT (rep_const) */               STORE_NUMBER (p + ((2)-1), mcnt);
11718: /* MUTANT (rep_op) */               DEBUG_PRINT3 ("  Setting %p to %d.\n", p - 2, mcnt);
11718: /* MUTANT (rep_op) */               DEBUG_PRINT3 ("  Setting %p to %d.\n", p * 2, mcnt);
11718: /* MUTANT (rep_op) */               DEBUG_PRINT3 ("  Setting %p to %d.\n", p % 2, mcnt);
11718: /* MUTANT (rep_const) */               DEBUG_PRINT3 ("  Setting %p to %d.\n", p + 0, mcnt);
11718: /* MUTANT (rep_const) */               DEBUG_PRINT3 ("  Setting %p to %d.\n", p + 1, mcnt);
11718: /* MUTANT (rep_const) */               DEBUG_PRINT3 ("  Setting %p to %d.\n", p + -1, mcnt);
11718: /* MUTANT (rep_const) */               DEBUG_PRINT3 ("  Setting %p to %d.\n", p + ((2)+1), mcnt);
11718: /* MUTANT (rep_const) */               DEBUG_PRINT3 ("  Setting %p to %d.\n", p + ((2)-1), mcnt);
11720: /* MUTANT (rep_op) */               DEBUG_PRINT3 ("  Setting 0x%x to %d.\n", p - 2, mcnt);
11720: /* MUTANT (rep_op) */               DEBUG_PRINT3 ("  Setting 0x%x to %d.\n", p * 2, mcnt);
11720: /* MUTANT (rep_op) */               DEBUG_PRINT3 ("  Setting 0x%x to %d.\n", p % 2, mcnt);
11720: /* MUTANT (rep_const) */               DEBUG_PRINT3 ("  Setting 1x%x to %d.\n", p + 2, mcnt);
11720: /* MUTANT (rep_const) */               DEBUG_PRINT3 ("  Setting -1x%x to %d.\n", p + 2, mcnt);
11720: /* MUTANT (rep_const) */               DEBUG_PRINT3 ("  Setting 0x%x to %d.\n", p + 0, mcnt);
11720: /* MUTANT (rep_const) */               DEBUG_PRINT3 ("  Setting 0x%x to %d.\n", p + 1, mcnt);
11720: /* MUTANT (rep_const) */               DEBUG_PRINT3 ("  Setting 0x%x to %d.\n", p + -1, mcnt);
11720: /* MUTANT (rep_const) */               DEBUG_PRINT3 ("  Setting 0x%x to %d.\n", p + ((2)+1), mcnt);
11720: /* MUTANT (rep_const) */               DEBUG_PRINT3 ("  Setting 0x%x to %d.\n", p + ((2)-1), mcnt);
11726: /* MUTANT (rep_op) */	    p -= 4;
11726: /* MUTANT (rep_op) */	    p *= 4;
11726: /* MUTANT (rep_op) */	    p %= 4;
11726: /* MUTANT (rep_const) */	    p += 0;
11726: /* MUTANT (rep_const) */	    p += 1;
11726: /* MUTANT (rep_const) */	    p += -1;
11726: /* MUTANT (rep_const) */	    p += ((4)+1);
11726: /* MUTANT (rep_const) */	    p += ((4)-1);
11727: /* MUTANT (del_stmt) */ /*           break; */ 
11731: /* MUTANT (del_stmt) */ /*             DEBUG_PRINT1 ("EXECUTING set_number_at.\n"); */ 
11733: /* MUTANT (del_stmt) */ /*             EXTRACT_NUMBER_AND_INCR (mcnt, p); */ 
11734: /* MUTANT (del_stmt) */ /*             p1 = p + mcnt; */ 
11734: /* MUTANT (rep_op) */            p1 = p - mcnt;
11734: /* MUTANT (rep_op) */            p1 = p * mcnt;
11734: /* MUTANT (rep_op) */            p1 = p % mcnt;
11735: /* MUTANT (del_stmt) */ /*             EXTRACT_NUMBER_AND_INCR (mcnt, p); */ 
11739: /* MUTANT (rep_const) */            DEBUG_PRINT3 ("  Setting 1x%x to %d.\n", p1, mcnt);
11739: /* MUTANT (rep_const) */            DEBUG_PRINT3 ("  Setting -1x%x to %d.\n", p1, mcnt);
11742: /* MUTANT (del_stmt) */ /*             break; */ 
11745: #if 1 /* MUTANT (rep_const) */
11745: #if -1 /* MUTANT (rep_const) */
11753: /* MUTANT (negate) */	  if(! (AT_WORD_BOUNDARY (d)))
11755: /* MUTANT (del_stmt) */ /* 	  goto fail; */ 
11759: /* MUTANT (negate) */	  if(! (AT_WORD_BOUNDARY (d)))
11761: /* MUTANT (del_stmt) */ /* 	  break; */ 
11765: /* MUTANT (del_stmt) */ /* 	  boolean prevchar, thischar; */ 
11767: /* MUTANT (del_stmt) */ /* 	  DEBUG_PRINT1 ("EXECUTING wordbound.\n"); */ 
11768: /* MUTANT (rep_op) */	  if (AT_STRINGS_BEG (d) && AT_STRINGS_END (d))
11768: /* MUTANT (negate) */	  if(! (AT_STRINGS_BEG (d) || AT_STRINGS_END (d)))
11771: /* MUTANT (del_stmt) */ /* 	  prevchar = WORDCHAR_P (d - 1); */ 
11771: /* MUTANT (rep_const) */	  prevchar = WORDCHAR_P (d - 0);
11771: /* MUTANT (rep_const) */	  prevchar = WORDCHAR_P (d - -1);
11771: /* MUTANT (rep_const) */	  prevchar = WORDCHAR_P (d - ((1)+1));
11772: /* MUTANT (del_stmt) */ /* 	  thischar = WORDCHAR_P (d); */ 
11773: /* MUTANT (rep_op) */	  if (prevchar == thischar)
11773: /* MUTANT (negate) */	  if(! (prevchar != thischar))
11775: /* MUTANT (del_stmt) */ /* 	  goto fail; */ 
11780: /* MUTANT (del_stmt) */ /* 	  boolean prevchar, thischar; */ 
11782: /* MUTANT (del_stmt) */ /* 	  DEBUG_PRINT1 ("EXECUTING notwordbound.\n"); */ 
11783: /* MUTANT (rep_op) */	  if (AT_STRINGS_BEG (d) && AT_STRINGS_END (d))
11783: /* MUTANT (negate) */	  if(! (AT_STRINGS_BEG (d) || AT_STRINGS_END (d)))
11786: /* MUTANT (del_stmt) */ /* 	  prevchar = WORDCHAR_P (d - 1); */ 
11786: /* MUTANT (rep_const) */	  prevchar = WORDCHAR_P (d - 0);
11786: /* MUTANT (rep_const) */	  prevchar = WORDCHAR_P (d - -1);
11786: /* MUTANT (rep_const) */	  prevchar = WORDCHAR_P (d - ((1)+1));
11787: /* MUTANT (del_stmt) */ /* 	  thischar = WORDCHAR_P (d); */ 
11788: /* MUTANT (rep_op) */	  if (prevchar == thischar)
11788: /* MUTANT (negate) */	  if(! (prevchar != thischar))
11790: /* MUTANT (del_stmt) */ /* 	  break; */ 
11796: /* MUTANT (rep_op) */	  if (WORDCHAR_P (d) || (AT_STRINGS_BEG (d) || !WORDCHAR_P (d - 1)))
11796: /* MUTANT (rep_op) */	  if (WORDCHAR_P (d) && (AT_STRINGS_BEG (d) && !WORDCHAR_P (d - 1)))
11796: /* MUTANT (rep_const) */	  if (WORDCHAR_P (d) && (AT_STRINGS_BEG (d) || !WORDCHAR_P (d - 0)))
11796: /* MUTANT (rep_const) */	  if (WORDCHAR_P (d) && (AT_STRINGS_BEG (d) || !WORDCHAR_P (d - -1)))
11796: /* MUTANT (rep_const) */	  if (WORDCHAR_P (d) && (AT_STRINGS_BEG (d) || !WORDCHAR_P (d - ((1)+1))))
11796: /* MUTANT (negate) */	  if(! (WORDCHAR_P (d) && (AT_STRINGS_BEG (d) || !WORDCHAR_P (d - 1))))
11798: /* MUTANT (del_stmt) */ /*           goto fail; */ 
11802: /* MUTANT (rep_op) */	  if (!AT_STRINGS_BEG (d) || WORDCHAR_P (d - 1)
11802: /* MUTANT (rep_const) */	  if (!AT_STRINGS_BEG (d) && WORDCHAR_P (d - 0)
11802: /* MUTANT (rep_const) */	  if (!AT_STRINGS_BEG (d) && WORDCHAR_P (d - -1)
11802: /* MUTANT (rep_const) */	  if (!AT_STRINGS_BEG (d) && WORDCHAR_P (d - ((1)+1))
11803: /* MUTANT (rep_op) */              || (!WORDCHAR_P (d) || AT_STRINGS_END (d)))
11803: /* MUTANT (rep_op) */              && (!WORDCHAR_P (d) && AT_STRINGS_END (d)))
11805: /* MUTANT (del_stmt) */ /*           goto fail; */ 
11810: /* MUTANT (rep_op) */ 	  if (PTR_CHAR_POS ((unsigned char *) d) <= point)
11810: /* MUTANT (rep_op) */ 	  if (PTR_CHAR_POS ((unsigned char *) d) < point)
11810: /* MUTANT (rep_op) */ 	  if (PTR_CHAR_POS ((unsigned char *) d) > point)
11810: /* MUTANT (rep_op) */ 	  if (PTR_CHAR_POS ((unsigned char *) d) == point)
11810: /* MUTANT (rep_op) */ 	  if (PTR_CHAR_POS ((unsigned char *) d) != point)
11810: /* MUTANT (negate) */ 	  if(! (PTR_CHAR_POS ((unsigned char *) d) >= point))
11812: /* MUTANT (del_stmt) */ /*   	  break; */ 
11816: /* MUTANT (rep_op) */ 	  if (PTR_CHAR_POS ((unsigned char *) d) == point)
11816: /* MUTANT (negate) */ 	  if(! (PTR_CHAR_POS ((unsigned char *) d) != point))
11818: /* MUTANT (del_stmt) */ /*   	  break; */ 
11822: /* MUTANT (rep_op) */          if (PTR_CHAR_POS ((unsigned char *) d) < point)
11822: /* MUTANT (rep_op) */          if (PTR_CHAR_POS ((unsigned char *) d) > point)
11822: /* MUTANT (rep_op) */          if (PTR_CHAR_POS ((unsigned char *) d) >= point)
11822: /* MUTANT (rep_op) */          if (PTR_CHAR_POS ((unsigned char *) d) == point)
11822: /* MUTANT (rep_op) */          if (PTR_CHAR_POS ((unsigned char *) d) != point)
11822: /* MUTANT (negate) */          if(! (PTR_CHAR_POS ((unsigned char *) d) <= point))
11824: /* MUTANT (del_stmt) */ /*   	  break; */ 
11828: /* MUTANT (del_stmt) */ /* 	  mcnt = *p++; */ 
11828: /* MUTANT (rep_op) */	  mcnt = *p--;
11829: /* MUTANT (del_stmt) */ /* 	  goto matchsyntax; */ 
11833: /* MUTANT (del_stmt) */ /* 	  mcnt = (int) Sword; */ 
11837: /* MUTANT (del_stmt) */ /* 	  d++; */ 
11837: /* MUTANT (rep_op) */	  d--;
11838: /* MUTANT (rep_op) */	  if (SYNTAX (d[-1]) == (enum syntaxcode) mcnt)
11838: /* MUTANT (rep_const) */	  if (SYNTAX (d[0]) != (enum syntaxcode) mcnt)
11838: /* MUTANT (rep_const) */	  if (SYNTAX (d[1]) != (enum syntaxcode) mcnt)
11838: /* MUTANT (rep_const) */	  if (SYNTAX (d[((-1)+1)]) != (enum syntaxcode) mcnt)
11838: /* MUTANT (rep_const) */	  if (SYNTAX (d[((-1)-1)]) != (enum syntaxcode) mcnt)
11838: /* MUTANT (negate) */	  if(! (SYNTAX (d[-1]) != (enum syntaxcode) mcnt))
11840: /* MUTANT (del_stmt) */ /*           SET_REGS_MATCHED (); */ 
11841: /* MUTANT (del_stmt) */ /* 	  break; */ 
11845: /* MUTANT (del_stmt) */ /* 	  mcnt = *p++; */ 
11845: /* MUTANT (rep_op) */	  mcnt = *p--;
11846: /* MUTANT (del_stmt) */ /* 	  goto matchnotsyntax; */ 
11850: /* MUTANT (del_stmt) */ /* 	  mcnt = (int) Sword; */ 
11854: /* MUTANT (del_stmt) */ /* 	  d++; */ 
11854: /* MUTANT (rep_op) */	  d--;
11855: /* MUTANT (rep_op) */	  if (SYNTAX (d[-1]) != (enum syntaxcode) mcnt)
11855: /* MUTANT (rep_const) */	  if (SYNTAX (d[0]) == (enum syntaxcode) mcnt)
11855: /* MUTANT (rep_const) */	  if (SYNTAX (d[1]) == (enum syntaxcode) mcnt)
11855: /* MUTANT (rep_const) */	  if (SYNTAX (d[((-1)+1)]) == (enum syntaxcode) mcnt)
11855: /* MUTANT (rep_const) */	  if (SYNTAX (d[((-1)-1)]) == (enum syntaxcode) mcnt)
11855: /* MUTANT (negate) */	  if(! (SYNTAX (d[-1]) == (enum syntaxcode) mcnt))
11857: /* MUTANT (del_stmt) */ /* 	  SET_REGS_MATCHED (); */ 
11858: /* MUTANT (del_stmt) */ /*           break; */ 
11863: /* MUTANT (del_stmt) */ /* 	  PREFETCH (); */ 
11864: /* MUTANT (negate) */          if(! (!WORDCHAR_P (d)))
11866: /* MUTANT (del_stmt) */ /* 	  SET_REGS_MATCHED (); */ 
11867: /* MUTANT (del_stmt) */ /*           d++; */ 
11867: /* MUTANT (rep_op) */          d--;
11868: /* MUTANT (del_stmt) */ /* 	  break; */ 
11872: /* MUTANT (del_stmt) */ /* 	  PREFETCH (); */ 
11873: /* MUTANT (negate) */	  if(! (WORDCHAR_P (d)))
11875: /* MUTANT (del_stmt) */ /*           SET_REGS_MATCHED (); */ 
11876: /* MUTANT (del_stmt) */ /*           d++; */ 
11876: /* MUTANT (rep_op) */          d--;
11877: /* MUTANT (del_stmt) */ /* 	  break; */ 
11888: /* MUTANT (negate) */      if(! (!FAIL_STACK_EMPTY ()))
11890: /* MUTANT (del_stmt) */ /*           DEBUG_PRINT1 ("\nFAIL:\n"); */ 
11896: /* MUTANT (negate) */          if(! (!p))
11900: /* MUTANT (del_stmt) */ /* 	  assert (p <= pend); */ 
11900: /* MUTANT (rep_op) */	  assert (p < pend);
11900: /* MUTANT (rep_op) */	  assert (p > pend);
11900: /* MUTANT (rep_op) */	  assert (p >= pend);
11900: /* MUTANT (rep_op) */	  assert (p == pend);
11900: /* MUTANT (rep_op) */	  assert (p != pend);
11901: /* MUTANT (rep_op) */          if (p <= pend)
11901: /* MUTANT (rep_op) */          if (p > pend)
11901: /* MUTANT (rep_op) */          if (p >= pend)
11901: /* MUTANT (rep_op) */          if (p == pend)
11901: /* MUTANT (rep_op) */          if (p != pend)
11901: /* MUTANT (negate) */          if(! (p < pend))
11903: /* MUTANT (del_stmt) */ /*               boolean is_a_jump_n = false; */ 
11914: /* MUTANT (rep_op) */                  p1 = p - 1;
11914: /* MUTANT (rep_op) */                  p1 = p * 1;
11914: /* MUTANT (rep_op) */                  p1 = p % 1;
11914: /* MUTANT (rep_const) */                  p1 = p + 0;
11914: /* MUTANT (rep_const) */                  p1 = p + -1;
11914: /* MUTANT (rep_const) */                  p1 = p + ((1)+1);
11915: /* MUTANT (del_stmt) */ /*                   EXTRACT_NUMBER_AND_INCR (mcnt, p1); */ 
11916: /* MUTANT (del_stmt) */ /*                   p1 += mcnt; */ 
11916: /* MUTANT (rep_op) */                  p1 -= mcnt;
11916: /* MUTANT (rep_op) */                  p1 *= mcnt;
11916: /* MUTANT (rep_op) */                  p1 %= mcnt;
11918: /* MUTANT (rep_op) */                  if ((is_a_jump_n || (re_opcode_t) *p1 == succeed_n)
11918: /* MUTANT (rep_op) */                  if ((is_a_jump_n && (re_opcode_t) *p1 != succeed_n)
11919: /* MUTANT (rep_op) */                      && (!is_a_jump_n
11920: /* MUTANT (rep_op) */                          || (re_opcode_t) *p1 == on_failure_jump))
11920: /* MUTANT (rep_op) */                          && (re_opcode_t) *p1 != on_failure_jump))
11922: /* MUTANT (del_stmt) */ /*                   break; */ 
11928: /* MUTANT (rep_op) */          if (d <= string1 && d <= end1)
11928: /* MUTANT (rep_op) */          if (d < string1 && d <= end1)
11928: /* MUTANT (rep_op) */          if (d > string1 && d <= end1)
11928: /* MUTANT (rep_op) */          if (d == string1 && d <= end1)
11928: /* MUTANT (rep_op) */          if (d != string1 && d <= end1)
11928: /* MUTANT (rep_op) */          if (d >= string1 || d <= end1)
11928: /* MUTANT (rep_op) */          if (d >= string1 && d < end1)
11928: /* MUTANT (rep_op) */          if (d >= string1 && d > end1)
11928: /* MUTANT (rep_op) */          if (d >= string1 && d >= end1)
11928: /* MUTANT (rep_op) */          if (d >= string1 && d == end1)
11928: /* MUTANT (rep_op) */          if (d >= string1 && d != end1)
11928: /* MUTANT (negate) */          if(! (d >= string1 && d <= end1))
11935: /* MUTANT (negate) */  if(! (best_regs_set))
11938: /* MUTANT (del_stmt) */ /*   FREE_VARIABLES (); */ 
11940: /* MUTANT (del_stmt) */ /*   return -1; */          			/* Failure to match.  */
11940: /* MUTANT (rep_const) */  return 0;         			/* Failure to match.  */
11940: /* MUTANT (rep_const) */  return 1;         			/* Failure to match.  */
11940: /* MUTANT (rep_const) */  return ((-1)+1);         			/* Failure to match.  */
11940: /* MUTANT (rep_const) */  return ((-1)-1);         			/* Failure to match.  */
11959: /* MUTANT (del_stmt) */ /*     register_info_type *reg_info; */ 
11961: /* MUTANT (del_stmt) */ /*   int mcnt; */ 
11963: /* MUTANT (del_stmt) */ /*   unsigned char *p1 = *p + 2; */ 
11963: /* MUTANT (rep_op) */  unsigned char *p1 = *p - 2;
11963: /* MUTANT (rep_op) */  unsigned char *p1 = *p * 2;
11963: /* MUTANT (rep_op) */  unsigned char *p1 = *p % 2;
11963: /* MUTANT (rep_const) */  unsigned char *p1 = *p + 0;
11963: /* MUTANT (rep_const) */  unsigned char *p1 = *p + 1;
11963: /* MUTANT (rep_const) */  unsigned char *p1 = *p + -1;
11963: /* MUTANT (rep_const) */  unsigned char *p1 = *p + ((2)+1);
11963: /* MUTANT (rep_const) */  unsigned char *p1 = *p + ((2)-1);
11965: /* MUTANT (rep_op) */  while (p1 <= end)
11965: /* MUTANT (rep_op) */  while (p1 > end)
11965: /* MUTANT (rep_op) */  while (p1 >= end)
11965: /* MUTANT (rep_op) */  while (p1 == end)
11965: /* MUTANT (rep_op) */  while (p1 != end)
11965: /* MUTANT (negate) */  while(! (p1 < end))
11975: /* MUTANT (rep_op) */          p1--;
11976: /* MUTANT (del_stmt) */ /*           EXTRACT_NUMBER_AND_INCR (mcnt, p1); */ 
11981: /* MUTANT (rep_op) */	  if (mcnt <= 0)
11981: /* MUTANT (rep_op) */	  if (mcnt < 0)
11981: /* MUTANT (rep_op) */	  if (mcnt > 0)
11981: /* MUTANT (rep_op) */	  if (mcnt == 0)
11981: /* MUTANT (rep_op) */	  if (mcnt != 0)
11981: /* MUTANT (rep_const) */	  if (mcnt >= 1)
11981: /* MUTANT (rep_const) */	  if (mcnt >= -1)
11981: /* MUTANT (negate) */	  if(! (mcnt >= 0))
12001: /* MUTANT (rep_op) */              while ((re_opcode_t) p1[mcnt-3] != jump_past_alt)
12001: /* MUTANT (rep_const) */              while ((re_opcode_t) p1[mcnt-0] == jump_past_alt)
12001: /* MUTANT (rep_const) */              while ((re_opcode_t) p1[mcnt-1] == jump_past_alt)
12001: /* MUTANT (rep_const) */              while ((re_opcode_t) p1[mcnt--1] == jump_past_alt)
12001: /* MUTANT (rep_const) */              while ((re_opcode_t) p1[mcnt-((3)+1)] == jump_past_alt)
12001: /* MUTANT (rep_const) */              while ((re_opcode_t) p1[mcnt-((3)-1)] == jump_past_alt)
12001: /* MUTANT (negate) */              while(! ((re_opcode_t) p1[mcnt-3] == jump_past_alt))
12007: /* MUTANT (rep_op) */                  if (!alt_match_null_string_p (p1, p1 - mcnt - 3,
12007: /* MUTANT (rep_op) */                  if (!alt_match_null_string_p (p1, p1 * mcnt - 3,
12007: /* MUTANT (rep_op) */                  if (!alt_match_null_string_p (p1, p1 % mcnt - 3,
12007: /* MUTANT (rep_const) */                  if (!alt_match_null_string_p (p1, p1 + mcnt - 0,
12007: /* MUTANT (rep_const) */                  if (!alt_match_null_string_p (p1, p1 + mcnt - 1,
12007: /* MUTANT (rep_const) */                  if (!alt_match_null_string_p (p1, p1 + mcnt - -1,
12007: /* MUTANT (rep_const) */                  if (!alt_match_null_string_p (p1, p1 + mcnt - ((3)+1),
12007: /* MUTANT (rep_const) */                  if (!alt_match_null_string_p (p1, p1 + mcnt - ((3)-1),
12013: /* MUTANT (del_stmt) */ /*                   p1 += mcnt; */ 
12013: /* MUTANT (rep_op) */                  p1 -= mcnt;
12013: /* MUTANT (rep_op) */                  p1 *= mcnt;
12013: /* MUTANT (rep_op) */                  p1 %= mcnt;
12017: /* MUTANT (rep_op) */                  if ((re_opcode_t) *p1 == on_failure_jump)
12017: /* MUTANT (negate) */                  if(! ((re_opcode_t) *p1 != on_failure_jump))
12022: /* MUTANT (del_stmt) */ /* 		  p1++; */ 
12022: /* MUTANT (rep_op) */		  p1--;
12023: /* MUTANT (del_stmt) */ /*                   EXTRACT_NUMBER_AND_INCR (mcnt, p1); */ 
12024: /* MUTANT (rep_op) */                  if ((re_opcode_t) p1[mcnt-3] == jump_past_alt)
12024: /* MUTANT (rep_const) */                  if ((re_opcode_t) p1[mcnt-0] != jump_past_alt)
12024: /* MUTANT (rep_const) */                  if ((re_opcode_t) p1[mcnt-1] != jump_past_alt)
12024: /* MUTANT (rep_const) */                  if ((re_opcode_t) p1[mcnt--1] != jump_past_alt)
12024: /* MUTANT (rep_const) */                  if ((re_opcode_t) p1[mcnt-((3)+1)] != jump_past_alt)
12024: /* MUTANT (rep_const) */                  if ((re_opcode_t) p1[mcnt-((3)-1)] != jump_past_alt)
12024: /* MUTANT (negate) */                  if(! ((re_opcode_t) p1[mcnt-3] != jump_past_alt))
12027: /* MUTANT (del_stmt) */ /*                       p1 -= 3; */ 
12027: /* MUTANT (rep_op) */                      p1 += 3;
12027: /* MUTANT (rep_op) */                      p1 *= 3;
12027: /* MUTANT (rep_op) */                      p1 %= 3;
12027: /* MUTANT (rep_const) */                      p1 -= 0;
12027: /* MUTANT (rep_const) */                      p1 -= 1;
12027: /* MUTANT (rep_const) */                      p1 -= -1;
12027: /* MUTANT (rep_const) */                      p1 -= ((3)+1);
12027: /* MUTANT (rep_const) */                      p1 -= ((3)-1);
12028: /* MUTANT (del_stmt) */ /*                       break; */ 
12035: /* MUTANT (rep_const) */              EXTRACT_NUMBER (mcnt, p1 - 0);
12035: /* MUTANT (rep_const) */              EXTRACT_NUMBER (mcnt, p1 - 1);
12035: /* MUTANT (rep_const) */              EXTRACT_NUMBER (mcnt, p1 - -1);
12035: /* MUTANT (rep_const) */              EXTRACT_NUMBER (mcnt, p1 - ((2)+1));
12035: /* MUTANT (rep_const) */              EXTRACT_NUMBER (mcnt, p1 - ((2)-1));
12037: /* MUTANT (rep_op) */              if (!alt_match_null_string_p (p1, p1 - mcnt, reg_info))
12037: /* MUTANT (rep_op) */              if (!alt_match_null_string_p (p1, p1 * mcnt, reg_info))
12037: /* MUTANT (rep_op) */              if (!alt_match_null_string_p (p1, p1 % mcnt, reg_info))
12037: /* MUTANT (negate) */              if(! (!alt_match_null_string_p (p1, p1 + mcnt, reg_info)))
12040: /* MUTANT (del_stmt) */ /*               p1 += mcnt; */ 	/* Get past the n-th alternative.  */
12040: /* MUTANT (rep_op) */              p1 -= mcnt;	/* Get past the n-th alternative.  */
12040: /* MUTANT (rep_op) */              p1 *= mcnt;	/* Get past the n-th alternative.  */
12040: /* MUTANT (rep_op) */              p1 %= mcnt;	/* Get past the n-th alternative.  */
12046: /* MUTANT (rep_op) */	  assert (p1[1] != **p);
12046: /* MUTANT (rep_const) */	  assert (p1[0] == **p);
12046: /* MUTANT (rep_const) */	  assert (p1[-1] == **p);
12046: /* MUTANT (rep_const) */	  assert (p1[((1)+1)] == **p);
12047: /* MUTANT (del_stmt) */ /*           *p = p1 + 2; */ 
12047: /* MUTANT (rep_op) */          *p = p1 - 2;
12047: /* MUTANT (rep_op) */          *p = p1 * 2;
12047: /* MUTANT (rep_op) */          *p = p1 % 2;
12047: /* MUTANT (rep_const) */          *p = p1 + 0;
12047: /* MUTANT (rep_const) */          *p = p1 + 1;
12047: /* MUTANT (rep_const) */          *p = p1 + -1;
12047: /* MUTANT (rep_const) */          *p = p1 + ((2)+1);
12047: /* MUTANT (rep_const) */          *p = p1 + ((2)-1);
12048: /* MUTANT (del_stmt) */ /*           return true; */ 
12052: /* MUTANT (negate) */          if(! (!common_op_match_null_string_p (&p1, end, reg_info)))
12068: /* MUTANT (del_stmt) */ /*     register_info_type *reg_info; */ 
12070: /* MUTANT (del_stmt) */ /*   int mcnt; */ 
12071: /* MUTANT (del_stmt) */ /*   unsigned char *p1 = p; */ 
12073: /* MUTANT (rep_op) */  while (p1 <= end)
12073: /* MUTANT (rep_op) */  while (p1 > end)
12073: /* MUTANT (rep_op) */  while (p1 >= end)
12073: /* MUTANT (rep_op) */  while (p1 == end)
12073: /* MUTANT (rep_op) */  while (p1 != end)
12073: /* MUTANT (negate) */  while(! (p1 < end))
12082: /* MUTANT (rep_op) */          p1--;
12083: /* MUTANT (del_stmt) */ /*           EXTRACT_NUMBER_AND_INCR (mcnt, p1); */ 
12084: /* MUTANT (del_stmt) */ /*           p1 += mcnt; */ 
12084: /* MUTANT (rep_op) */          p1 -= mcnt;
12084: /* MUTANT (rep_op) */          p1 *= mcnt;
12084: /* MUTANT (rep_op) */          p1 %= mcnt;
12085: /* MUTANT (del_stmt) */ /*           break; */ 
12088: /* MUTANT (negate) */          if(! (!common_op_match_null_string_p (&p1, end, reg_info)))
12105: /* MUTANT (del_stmt) */ /*     register_info_type *reg_info; */ 
12107: /* MUTANT (del_stmt) */ /*   int mcnt; */ 
12108: /* MUTANT (del_stmt) */ /*   boolean ret; */ 
12109: /* MUTANT (del_stmt) */ /*   int reg_no; */ 
12110: /* MUTANT (del_stmt) */ /*   unsigned char *p1 = *p; */ 
12112: /* MUTANT (rep_op) */  switch ((re_opcode_t) *p1--)
12132: /* MUTANT (del_stmt) */ /*       assert (reg_no > 0 && reg_no <= MAX_REGNUM); */ 
12132: /* MUTANT (rep_op) */      assert (reg_no <= 0 && reg_no <= MAX_REGNUM);
12132: /* MUTANT (rep_op) */      assert (reg_no < 0 && reg_no <= MAX_REGNUM);
12132: /* MUTANT (rep_op) */      assert (reg_no >= 0 && reg_no <= MAX_REGNUM);
12132: /* MUTANT (rep_op) */      assert (reg_no == 0 && reg_no <= MAX_REGNUM);
12132: /* MUTANT (rep_op) */      assert (reg_no != 0 && reg_no <= MAX_REGNUM);
12132: /* MUTANT (rep_op) */      assert (reg_no > 0 || reg_no <= MAX_REGNUM);
12132: /* MUTANT (rep_op) */      assert (reg_no > 0 && reg_no < MAX_REGNUM);
12132: /* MUTANT (rep_op) */      assert (reg_no > 0 && reg_no > MAX_REGNUM);
12132: /* MUTANT (rep_op) */      assert (reg_no > 0 && reg_no >= MAX_REGNUM);
12132: /* MUTANT (rep_op) */      assert (reg_no > 0 && reg_no == MAX_REGNUM);
12132: /* MUTANT (rep_op) */      assert (reg_no > 0 && reg_no != MAX_REGNUM);
12132: /* MUTANT (rep_const) */      assert (reg_no > 1 && reg_no <= MAX_REGNUM);
12132: /* MUTANT (rep_const) */      assert (reg_no > -1 && reg_no <= MAX_REGNUM);
12133: /* MUTANT (del_stmt) */ /*       ret = group_match_null_string_p (&p1, end, reg_info); */ 
12138: /* MUTANT (rep_op) */      if (REG_MATCH_NULL_STRING_P (reg_info[reg_no]) != MATCH_NULL_UNSET_VALUE)
12138: /* MUTANT (negate) */      if(! (REG_MATCH_NULL_STRING_P (reg_info[reg_no]) == MATCH_NULL_UNSET_VALUE))
12141: /* MUTANT (negate) */      if(! (!ret))
12143: /* MUTANT (del_stmt) */ /*       break; */ 
12148: /* MUTANT (rep_op) */      if (mcnt <= 0)
12148: /* MUTANT (rep_op) */      if (mcnt < 0)
12148: /* MUTANT (rep_op) */      if (mcnt > 0)
12148: /* MUTANT (rep_op) */      if (mcnt == 0)
12148: /* MUTANT (rep_op) */      if (mcnt != 0)
12148: /* MUTANT (rep_const) */      if (mcnt >= 1)
12148: /* MUTANT (rep_const) */      if (mcnt >= -1)
12148: /* MUTANT (negate) */      if(! (mcnt >= 0))
12149: /* MUTANT (rep_op) */        p1 -= mcnt;
12149: /* MUTANT (rep_op) */        p1 *= mcnt;
12149: /* MUTANT (rep_op) */        p1 %= mcnt;
12152: /* MUTANT (del_stmt) */ /*       break; */ 
12156: /* MUTANT (rep_op) */      p1 -= 2;
12156: /* MUTANT (rep_op) */      p1 *= 2;
12156: /* MUTANT (rep_op) */      p1 %= 2;
12156: /* MUTANT (rep_const) */      p1 += 0;
12156: /* MUTANT (rep_const) */      p1 += 1;
12156: /* MUTANT (rep_const) */      p1 += -1;
12156: /* MUTANT (rep_const) */      p1 += ((2)+1);
12156: /* MUTANT (rep_const) */      p1 += ((2)-1);
12157: /* MUTANT (del_stmt) */ /*       EXTRACT_NUMBER_AND_INCR (mcnt, p1); */ 
12159: /* MUTANT (rep_op) */      if (mcnt != 0)
12159: /* MUTANT (rep_const) */      if (mcnt == 1)
12159: /* MUTANT (rep_const) */      if (mcnt == -1)
12159: /* MUTANT (negate) */      if(! (mcnt == 0))
12161: /* MUTANT (del_stmt) */ /*           p1 -= 4; */ 
12161: /* MUTANT (rep_op) */          p1 += 4;
12161: /* MUTANT (rep_op) */          p1 *= 4;
12161: /* MUTANT (rep_op) */          p1 %= 4;
12161: /* MUTANT (rep_const) */          p1 -= 0;
12161: /* MUTANT (rep_const) */          p1 -= 1;
12161: /* MUTANT (rep_const) */          p1 -= -1;
12161: /* MUTANT (rep_const) */          p1 -= ((4)+1);
12161: /* MUTANT (rep_const) */          p1 -= ((4)-1);
12162: /* MUTANT (del_stmt) */ /*           EXTRACT_NUMBER_AND_INCR (mcnt, p1); */ 
12163: /* MUTANT (del_stmt) */ /*           p1 += mcnt; */ 
12163: /* MUTANT (rep_op) */          p1 -= mcnt;
12163: /* MUTANT (rep_op) */          p1 *= mcnt;
12163: /* MUTANT (rep_op) */          p1 %= mcnt;
12167: /* MUTANT (del_stmt) */ /*       break; */ 
12170: /* MUTANT (negate) */      if(! (!REG_MATCH_NULL_STRING_P (reg_info[*p1])))
12172: /* MUTANT (del_stmt) */ /*       break; */ 
12175: /* MUTANT (rep_op) */      p1 -= 4;
12175: /* MUTANT (rep_op) */      p1 *= 4;
12175: /* MUTANT (rep_op) */      p1 %= 4;
12175: /* MUTANT (rep_const) */      p1 += 0;
12175: /* MUTANT (rep_const) */      p1 += 1;
12175: /* MUTANT (rep_const) */      p1 += -1;
12175: /* MUTANT (rep_const) */      p1 += ((4)+1);
12175: /* MUTANT (rep_const) */      p1 += ((4)-1);
12183: /* MUTANT (del_stmt) */ /*   return true; */ 
12193: /* MUTANT (del_stmt) */ /*      register int len; */ 
12194: /* MUTANT (del_stmt) */ /*      RE_TRANSLATE_TYPE translate; */ 
12196: /* MUTANT (del_stmt) */ /*   register const unsigned char *p1 = (const unsigned char *) s1; */ 
12197: /* MUTANT (del_stmt) */ /*   register const unsigned char *p2 = (const unsigned char *) s2; */ 
12198: /* MUTANT (negate) */  while(! (len))
12200: /* MUTANT (del_stmt) */ /*       if (translate[*p1++] != translate[*p2++]) return 1; */ 
12200: /* MUTANT (rep_op) */      if (translate[*p1--] != translate[*p2++]) return 1;
12200: /* MUTANT (rep_op) */      if (translate[*p1++] == translate[*p2++]) return 1;
12200: /* MUTANT (rep_op) */      if (translate[*p1++] != translate[*p2--]) return 1;
12200: /* MUTANT (rep_const) */      if (translate[*p1++] != translate[*p2++]) return 0;
12200: /* MUTANT (rep_const) */      if (translate[*p1++] != translate[*p2++]) return -1;
12200: /* MUTANT (rep_const) */      if (translate[*p1++] != translate[*p2++]) return ((1)+1);
12200: /* MUTANT (negate) */      if(! (translate[*p1++] != translate[*p2++])) return 1;
12201: /* MUTANT (del_stmt) */ /*       len--; */ 
12201: /* MUTANT (rep_op) */      len++;
12203: /* MUTANT (rep_const) */  return 1;
12203: /* MUTANT (rep_const) */  return -1;
12220: /* MUTANT (del_stmt) */ /*      size_t length; */ 
12221: /* MUTANT (del_stmt) */ /*      struct re_pattern_buffer *bufp; */ 
12223: /* MUTANT (del_stmt) */ /*   reg_errcode_t ret; */ 
12227: /* MUTANT (del_stmt) */ /*   bufp->regs_allocated = REGS_UNALLOCATED; */ 
12232: /* MUTANT (del_stmt) */ /*   bufp->no_sub = 0; */ 
12232: /* MUTANT (rep_const) */  bufp->no_sub = 1;
12232: /* MUTANT (rep_const) */  bufp->no_sub = -1;
12235: /* MUTANT (del_stmt) */ /*   bufp->newline_anchor = 1; */ 
12235: /* MUTANT (rep_const) */  bufp->newline_anchor = 0;
12235: /* MUTANT (rep_const) */  bufp->newline_anchor = -1;
12235: /* MUTANT (rep_const) */  bufp->newline_anchor = ((1)+1);
12237: /* MUTANT (del_stmt) */ /*   ret = regex_compile (pattern, length, re_syntax_options, bufp); */ 
12239: /* MUTANT (negate) */  if(! (!ret))
12241: /* MUTANT (del_stmt) */ /*   return gettext (re_error_msgid[(int) ret]); */ 
12262: /* MUTANT (del_stmt) */ /*   reg_errcode_t ret; */ 
12264: /* MUTANT (negate) */  if(! (!s))
12266: /* MUTANT (negate) */      if(! (!re_comp_buf.buffer))
12268: /* MUTANT (del_stmt) */ /*       return 0; */ 
12268: /* MUTANT (rep_const) */      return 1;
12268: /* MUTANT (rep_const) */      return -1;
12271: /* MUTANT (negate) */  if(! (!re_comp_buf.buffer))
12273: /* MUTANT (del_stmt) */ /*       re_comp_buf.buffer = (unsigned char *) malloc (200); */ 
12273: /* MUTANT (rep_const) */      re_comp_buf.buffer = (unsigned char *) malloc (0);
12273: /* MUTANT (rep_const) */      re_comp_buf.buffer = (unsigned char *) malloc (1);
12273: /* MUTANT (rep_const) */      re_comp_buf.buffer = (unsigned char *) malloc (-1);
12273: /* MUTANT (rep_const) */      re_comp_buf.buffer = (unsigned char *) malloc (((200)+1));
12273: /* MUTANT (rep_const) */      re_comp_buf.buffer = (unsigned char *) malloc (((200)-1));
12274: /* MUTANT (rep_op) */      if (re_comp_buf.buffer != NULL)
12274: /* MUTANT (negate) */      if(! (re_comp_buf.buffer == NULL))
12276: /* MUTANT (del_stmt) */ /*       re_comp_buf.allocated = 200; */ 
12276: /* MUTANT (rep_const) */      re_comp_buf.allocated = 0;
12276: /* MUTANT (rep_const) */      re_comp_buf.allocated = 1;
12276: /* MUTANT (rep_const) */      re_comp_buf.allocated = -1;
12276: /* MUTANT (rep_const) */      re_comp_buf.allocated = ((200)+1);
12276: /* MUTANT (rep_const) */      re_comp_buf.allocated = ((200)-1);
12278: /* MUTANT (del_stmt) */ /*       re_comp_buf.fastmap = (char *) malloc (1 << BYTEWIDTH); */ 
12278: /* MUTANT (rep_const) */      re_comp_buf.fastmap = (char *) malloc (0 << BYTEWIDTH);
12278: /* MUTANT (rep_const) */      re_comp_buf.fastmap = (char *) malloc (-1 << BYTEWIDTH);
12278: /* MUTANT (rep_const) */      re_comp_buf.fastmap = (char *) malloc (((1)+1) << BYTEWIDTH);
12279: /* MUTANT (rep_op) */      if (re_comp_buf.fastmap != NULL)
12279: /* MUTANT (negate) */      if(! (re_comp_buf.fastmap == NULL))
12287: /* MUTANT (rep_const) */  re_comp_buf.newline_anchor = 0;
12287: /* MUTANT (rep_const) */  re_comp_buf.newline_anchor = -1;
12287: /* MUTANT (rep_const) */  re_comp_buf.newline_anchor = ((1)+1);
12289: /* MUTANT (del_stmt) */ /*   ret = regex_compile (s, strlen (s), re_syntax_options, &re_comp_buf); */ 
12291: /* MUTANT (negate) */  if(! (!ret))
12295: /* MUTANT (del_stmt) */ /*   return (char *) gettext (re_error_msgid[(int) ret]); */ 
12306: /* MUTANT (del_stmt) */ /*   const int len = strlen (s); */ 
12308: /* MUTANT (rep_op) */    0 < re_search (&re_comp_buf, s, len, 0, len, (struct re_registers *) 0);
12308: /* MUTANT (rep_op) */    0 > re_search (&re_comp_buf, s, len, 0, len, (struct re_registers *) 0);
12308: /* MUTANT (rep_op) */    0 >= re_search (&re_comp_buf, s, len, 0, len, (struct re_registers *) 0);
12308: /* MUTANT (rep_op) */    0 == re_search (&re_comp_buf, s, len, 0, len, (struct re_registers *) 0);
12308: /* MUTANT (rep_op) */    0 != re_search (&re_comp_buf, s, len, 0, len, (struct re_registers *) 0);
12308: /* MUTANT (rep_const) */    1 <= re_search (&re_comp_buf, s, len, 0, len, (struct re_registers *) 0);
12308: /* MUTANT (rep_const) */    -1 <= re_search (&re_comp_buf, s, len, 0, len, (struct re_registers *) 0);
12308: /* MUTANT (rep_const) */    0 <= re_search (&re_comp_buf, s, len, 1, len, (struct re_registers *) 0);
12308: /* MUTANT (rep_const) */    0 <= re_search (&re_comp_buf, s, len, -1, len, (struct re_registers *) 0);
12308: /* MUTANT (rep_const) */    0 <= re_search (&re_comp_buf, s, len, 0, len, (struct re_registers *) 1);
12308: /* MUTANT (rep_const) */    0 <= re_search (&re_comp_buf, s, len, 0, len, (struct re_registers *) -1);
12354: /* MUTANT (del_stmt) */ /*     const char *pattern; */ 
12355: /* MUTANT (del_stmt) */ /*     int cflags; */ 
12357: /* MUTANT (del_stmt) */ /*   reg_errcode_t ret; */ 
12363: /* MUTANT (del_stmt) */ /*   preg->buffer = 0; */ 
12363: /* MUTANT (rep_const) */  preg->buffer = 1;
12363: /* MUTANT (rep_const) */  preg->buffer = -1;
12364: /* MUTANT (del_stmt) */ /*   preg->allocated = 0; */ 
12364: /* MUTANT (rep_const) */  preg->allocated = 1;
12364: /* MUTANT (rep_const) */  preg->allocated = -1;
12365: /* MUTANT (del_stmt) */ /*   preg->used = 0; */ 
12365: /* MUTANT (rep_const) */  preg->used = 1;
12365: /* MUTANT (rep_const) */  preg->used = -1;
12371: /* MUTANT (del_stmt) */ /*   preg->fastmap = 0; */ 
12371: /* MUTANT (rep_const) */  preg->fastmap = 1;
12371: /* MUTANT (rep_const) */  preg->fastmap = -1;
12373: /* MUTANT (negate) */  if(! (cflags & REG_ICASE))
12375: /* MUTANT (del_stmt) */ /*       unsigned i; */ 
12379: /* MUTANT (rep_const) */				      * sizeof (*(RE_TRANSLATE_TYPE)1));
12379: /* MUTANT (rep_const) */				      * sizeof (*(RE_TRANSLATE_TYPE)-1));
12380: /* MUTANT (rep_op) */      if (preg->translate != NULL)
12380: /* MUTANT (negate) */      if(! (preg->translate == NULL))
12384: /* MUTANT (rep_op) */      for (i = 0; i <= CHAR_SET_SIZE; i++)
12384: /* MUTANT (rep_op) */      for (i = 0; i > CHAR_SET_SIZE; i++)
12384: /* MUTANT (rep_op) */      for (i = 0; i >= CHAR_SET_SIZE; i++)
12384: /* MUTANT (rep_op) */      for (i = 0; i == CHAR_SET_SIZE; i++)
12384: /* MUTANT (rep_op) */      for (i = 0; i != CHAR_SET_SIZE; i++)
12384: /* MUTANT (rep_op) */      for (i = 0; i < CHAR_SET_SIZE; i--)
12384: /* MUTANT (rep_const) */      for (i = 1; i < CHAR_SET_SIZE; i++)
12384: /* MUTANT (rep_const) */      for (i = -1; i < CHAR_SET_SIZE; i++)
12391: /* MUTANT (negate) */  if(! (cflags & REG_NEWLINE))
12393: /* MUTANT (del_stmt) */ /*       syntax &= ~RE_DOT_NEWLINE; */ 
12394: /* MUTANT (del_stmt) */ /*       syntax |= RE_HAT_LISTS_NOT_NEWLINE; */ 
12396: /* MUTANT (del_stmt) */ /*       preg->newline_anchor = 1; */ 
12396: /* MUTANT (rep_const) */      preg->newline_anchor = 0;
12396: /* MUTANT (rep_const) */      preg->newline_anchor = -1;
12396: /* MUTANT (rep_const) */      preg->newline_anchor = ((1)+1);
12399: /* MUTANT (rep_const) */    preg->newline_anchor = 1;
12399: /* MUTANT (rep_const) */    preg->newline_anchor = -1;
12401: /* MUTANT (del_stmt) */ /*   preg->no_sub = !!(cflags & REG_NOSUB); */ 
12405: /* MUTANT (del_stmt) */ /*   ret = regex_compile (pattern, strlen (pattern), syntax, preg); */ 
12409: /* MUTANT (del_stmt) */ /*   if (ret == REG_ERPAREN) ret = REG_EPAREN; */ 
12409: /* MUTANT (rep_op) */  if (ret != REG_ERPAREN) ret = REG_EPAREN;
12409: /* MUTANT (negate) */  if(! (ret == REG_ERPAREN)) ret = REG_EPAREN;
12411: /* MUTANT (del_stmt) */ /*   return (int) ret; */ 
12432: /* MUTANT (del_stmt) */ /*     const char *string; */ 
12433: /* MUTANT (del_stmt) */ /*     size_t nmatch; */ 
12434: /* MUTANT (del_stmt) */ /*     regmatch_t pmatch[]; */ 
12435: /* MUTANT (del_stmt) */ /*     int eflags; */ 
12437: /* MUTANT (del_stmt) */ /*   int ret; */ 
12438: /* MUTANT (del_stmt) */ /*   struct re_registers regs; */ 
12439: /* MUTANT (del_stmt) */ /*   regex_t private_preg; */ 
12440: /* MUTANT (del_stmt) */ /*   int len = strlen (string); */ 
12441: /* MUTANT (del_stmt) */ /*   boolean want_reg_info = !preg->no_sub && nmatch > 0; */ 
12441: /* MUTANT (rep_op) */  boolean want_reg_info = !preg->no_sub || nmatch > 0;
12441: /* MUTANT (rep_op) */  boolean want_reg_info = !preg->no_sub && nmatch <= 0;
12441: /* MUTANT (rep_op) */  boolean want_reg_info = !preg->no_sub && nmatch < 0;
12441: /* MUTANT (rep_op) */  boolean want_reg_info = !preg->no_sub && nmatch >= 0;
12441: /* MUTANT (rep_op) */  boolean want_reg_info = !preg->no_sub && nmatch == 0;
12441: /* MUTANT (rep_op) */  boolean want_reg_info = !preg->no_sub && nmatch != 0;
12441: /* MUTANT (rep_const) */  boolean want_reg_info = !preg->no_sub && nmatch > 1;
12441: /* MUTANT (rep_const) */  boolean want_reg_info = !preg->no_sub && nmatch > -1;
12443: /* MUTANT (del_stmt) */ /*   private_preg = *preg; */ 
12445: /* MUTANT (del_stmt) */ /*   private_preg.not_bol = !!(eflags & REG_NOTBOL); */ 
12446: /* MUTANT (del_stmt) */ /*   private_preg.not_eol = !!(eflags & REG_NOTEOL); */ 
12451: /* MUTANT (del_stmt) */ /*   private_preg.regs_allocated = REGS_FIXED; */ 
12453: /* MUTANT (negate) */  if(! (want_reg_info))
12455: /* MUTANT (del_stmt) */ /*       regs.num_regs = nmatch; */ 
12456: /* MUTANT (del_stmt) */ /*       regs.start = TALLOC (nmatch, regoff_t); */ 
12457: /* MUTANT (del_stmt) */ /*       regs.end = TALLOC (nmatch, regoff_t); */ 
12458: /* MUTANT (rep_op) */      if (regs.start != NULL || regs.end == NULL)
12458: /* MUTANT (rep_op) */      if (regs.start == NULL && regs.end == NULL)
12458: /* MUTANT (rep_op) */      if (regs.start == NULL || regs.end != NULL)
12458: /* MUTANT (negate) */      if(! (regs.start == NULL || regs.end == NULL))
12465: /* MUTANT (rep_const) */                   want_reg_info ? &regs : (struct re_registers *) 1);
12465: /* MUTANT (rep_const) */                   want_reg_info ? &regs : (struct re_registers *) -1);
12468: /* MUTANT (negate) */  if(! (want_reg_info))
12470: /* MUTANT (rep_op) */      if (ret <= 0)
12470: /* MUTANT (rep_op) */      if (ret < 0)
12470: /* MUTANT (rep_op) */      if (ret > 0)
12470: /* MUTANT (rep_op) */      if (ret == 0)
12470: /* MUTANT (rep_op) */      if (ret != 0)
12470: /* MUTANT (rep_const) */      if (ret >= 1)
12470: /* MUTANT (rep_const) */      if (ret >= -1)
12470: /* MUTANT (negate) */      if(! (ret >= 0))
12472: /* MUTANT (del_stmt) */ /*           unsigned r; */ 
12474: /* MUTANT (rep_op) */          for (r = 0; r <= nmatch; r++)
12474: /* MUTANT (rep_op) */          for (r = 0; r > nmatch; r++)
12474: /* MUTANT (rep_op) */          for (r = 0; r >= nmatch; r++)
12474: /* MUTANT (rep_op) */          for (r = 0; r == nmatch; r++)
12474: /* MUTANT (rep_op) */          for (r = 0; r != nmatch; r++)
12474: /* MUTANT (rep_op) */          for (r = 0; r < nmatch; r--)
12474: /* MUTANT (rep_const) */          for (r = 1; r < nmatch; r++)
12474: /* MUTANT (rep_const) */          for (r = -1; r < nmatch; r++)
12476: /* MUTANT (del_stmt) */ /*               pmatch[r].rm_so = regs.start[r]; */ 
12477: /* MUTANT (del_stmt) */ /*               pmatch[r].rm_eo = regs.end[r]; */ 
12483: /* MUTANT (del_stmt) */ /*       free (regs.end); */ 
12487: /* MUTANT (rep_op) */  return ret <= 0 ? (int) REG_NOERROR : (int) REG_NOMATCH;
12487: /* MUTANT (rep_op) */  return ret < 0 ? (int) REG_NOERROR : (int) REG_NOMATCH;
12487: /* MUTANT (rep_op) */  return ret > 0 ? (int) REG_NOERROR : (int) REG_NOMATCH;
12487: /* MUTANT (rep_op) */  return ret == 0 ? (int) REG_NOERROR : (int) REG_NOMATCH;
12487: /* MUTANT (rep_op) */  return ret != 0 ? (int) REG_NOERROR : (int) REG_NOMATCH;
12487: /* MUTANT (rep_const) */  return ret >= 1 ? (int) REG_NOERROR : (int) REG_NOMATCH;
12487: /* MUTANT (rep_const) */  return ret >= -1 ? (int) REG_NOERROR : (int) REG_NOMATCH;
12497: /* MUTANT (del_stmt) */ /*     const regex_t *preg; */ 
12498: /* MUTANT (del_stmt) */ /*     char *errbuf; */ 
12499: /* MUTANT (del_stmt) */ /*     size_t errbuf_size; */ 
12501: /* MUTANT (del_stmt) */ /*   const char *msg; */ 
12502: /* MUTANT (del_stmt) */ /*   size_t msg_size; */ 
12504: /* MUTANT (rep_op) */  if (errcode <= 0
12504: /* MUTANT (rep_op) */  if (errcode > 0
12504: /* MUTANT (rep_op) */  if (errcode >= 0
12504: /* MUTANT (rep_op) */  if (errcode == 0
12504: /* MUTANT (rep_op) */  if (errcode != 0
12504: /* MUTANT (rep_const) */  if (errcode < 1
12504: /* MUTANT (rep_const) */  if (errcode < -1
12505: /* MUTANT (rep_op) */      && errcode >= (int) (sizeof (re_error_msgid)
12505: /* MUTANT (rep_op) */      || errcode <= (int) (sizeof (re_error_msgid)
12505: /* MUTANT (rep_op) */      || errcode < (int) (sizeof (re_error_msgid)
12505: /* MUTANT (rep_op) */      || errcode > (int) (sizeof (re_error_msgid)
12505: /* MUTANT (rep_op) */      || errcode == (int) (sizeof (re_error_msgid)
12505: /* MUTANT (rep_op) */      || errcode != (int) (sizeof (re_error_msgid)
12506: /* MUTANT (rep_const) */			   / sizeof (re_error_msgid[1])))
12506: /* MUTANT (rep_const) */			   / sizeof (re_error_msgid[-1])))
12513: /* MUTANT (del_stmt) */ /*   msg = gettext (re_error_msgid[errcode]); */ 
12515: /* MUTANT (del_stmt) */ /*   msg_size = strlen (msg) + 1; */  /* Includes the null.  */
12515: /* MUTANT (rep_op) */  msg_size = strlen (msg) - 1; /* Includes the null.  */
12515: /* MUTANT (rep_op) */  msg_size = strlen (msg) * 1; /* Includes the null.  */
12515: /* MUTANT (rep_op) */  msg_size = strlen (msg) % 1; /* Includes the null.  */
12515: /* MUTANT (rep_const) */  msg_size = strlen (msg) + 0; /* Includes the null.  */
12515: /* MUTANT (rep_const) */  msg_size = strlen (msg) + -1; /* Includes the null.  */
12515: /* MUTANT (rep_const) */  msg_size = strlen (msg) + ((1)+1); /* Includes the null.  */
12517: /* MUTANT (rep_op) */  if (errbuf_size == 0)
12517: /* MUTANT (rep_const) */  if (errbuf_size != 1)
12517: /* MUTANT (rep_const) */  if (errbuf_size != -1)
12517: /* MUTANT (negate) */  if(! (errbuf_size != 0))
12519: /* MUTANT (rep_op) */      if (msg_size <= errbuf_size)
12519: /* MUTANT (rep_op) */      if (msg_size < errbuf_size)
12519: /* MUTANT (rep_op) */      if (msg_size >= errbuf_size)
12519: /* MUTANT (rep_op) */      if (msg_size == errbuf_size)
12519: /* MUTANT (rep_op) */      if (msg_size != errbuf_size)
12519: /* MUTANT (negate) */      if(! (msg_size > errbuf_size))
12521: /* MUTANT (del_stmt) */ /*           strncpy (errbuf, msg, errbuf_size - 1); */ 
12521: /* MUTANT (rep_const) */          strncpy (errbuf, msg, errbuf_size - 0);
12521: /* MUTANT (rep_const) */          strncpy (errbuf, msg, errbuf_size - -1);
12521: /* MUTANT (rep_const) */          strncpy (errbuf, msg, errbuf_size - ((1)+1));
12522: /* MUTANT (del_stmt) */ /*           errbuf[errbuf_size - 1] = 0; */ 
12522: /* MUTANT (rep_const) */          errbuf[errbuf_size - 0] = 0;
12522: /* MUTANT (rep_const) */          errbuf[errbuf_size - -1] = 0;
12522: /* MUTANT (rep_const) */          errbuf[errbuf_size - ((1)+1)] = 0;
12522: /* MUTANT (rep_const) */          errbuf[errbuf_size - 1] = 1;
12522: /* MUTANT (rep_const) */          errbuf[errbuf_size - 1] = -1;
12538: /* MUTANT (rep_op) */  if (preg->buffer == NULL)
12538: /* MUTANT (negate) */  if(! (preg->buffer != NULL))
12540: /* MUTANT (del_stmt) */ /*   preg->buffer = NULL; */ 
12542: /* MUTANT (del_stmt) */ /*   preg->allocated = 0; */ 
12542: /* MUTANT (rep_const) */  preg->allocated = 1;
12542: /* MUTANT (rep_const) */  preg->allocated = -1;
12543: /* MUTANT (del_stmt) */ /*   preg->used = 0; */ 
12543: /* MUTANT (rep_const) */  preg->used = 1;
12543: /* MUTANT (rep_const) */  preg->used = -1;
12545: /* MUTANT (rep_op) */  if (preg->fastmap == NULL)
12545: /* MUTANT (negate) */  if(! (preg->fastmap != NULL))
12547: /* MUTANT (del_stmt) */ /*   preg->fastmap = NULL; */ 
12548: /* MUTANT (del_stmt) */ /*   preg->fastmap_accurate = 0; */ 
12548: /* MUTANT (rep_const) */  preg->fastmap_accurate = 1;
12548: /* MUTANT (rep_const) */  preg->fastmap_accurate = -1;
12550: /* MUTANT (rep_op) */  if (preg->translate == NULL)
12550: /* MUTANT (negate) */  if(! (preg->translate != NULL))
12552: /* MUTANT (del_stmt) */ /*   preg->translate = NULL; */ 
